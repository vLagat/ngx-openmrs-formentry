(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/forms'), require('moment'), require('lodash'), require('hammerjs'), require('@angular/common'), require('@angular/platform-browser'), require('ngx-file-uploader-ampath'), require('@angular/material/core'), require('@angular/material-moment-adapter'), require('@angular/material/datepicker'), require('@angular/material/form-field'), require('@angular/material'), require('@angular/material/select'), require('@angular/http'), require('ngx-bootstrap/collapse')) :
    typeof define === 'function' && define.amd ? define('ngx-openmrs-formentry', ['exports', '@angular/core', 'rxjs', '@angular/forms', 'moment', 'lodash', 'hammerjs', '@angular/common', '@angular/platform-browser', 'ngx-file-uploader-ampath', '@angular/material/core', '@angular/material-moment-adapter', '@angular/material/datepicker', '@angular/material/form-field', '@angular/material', '@angular/material/select', '@angular/http', 'ngx-bootstrap/collapse'], factory) :
    (factory((global['ngx-openmrs-formentry'] = {}),global.ng.core,global.rxjs,global.ng.forms,null,null,null,global.ng.common,global.ng.platformBrowser,null,global.ng.material.core,global.ng['material-moment-adapter'],global.ng.material.datepicker,global.ng.material['form-field'],global.ng.material,global.ng.material.select,global.ng.http,null));
}(this, (function (exports,core,rxjs,forms,moment_,_,hammerjs,common,platformBrowser,ngxFileUploaderAmpath,core$1,materialMomentAdapter,datepicker,formField,material,select,http,collapse) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DebugModeService = (function () {
        function DebugModeService() {
            this.cookieKey = 'formDebug';
        }
        /**
         * @return {?}
         */
        DebugModeService.prototype.debugEnabled = /**
         * @return {?}
         */
            function () {
                // check if the hidefield
                return false;
            };
        DebugModeService.decorators = [
            { type: core.Injectable },
        ];
        DebugModeService.ctorParameters = function () { return []; };
        return DebugModeService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormErrorsService = (function () {
        function FormErrorsService() {
            this.announceErrorFieldSource = new rxjs.Subject();
            this.announceErrorField$ = this.announceErrorFieldSource.asObservable();
        }
        /**
         * @param {?} error
         * @return {?}
         */
        FormErrorsService.prototype.announceErrorField = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this.announceErrorFieldSource.next(error);
            };
        // Observable string sources
        FormErrorsService.control = null;
        FormErrorsService.tab = null;
        FormErrorsService.decorators = [
            { type: core.Injectable },
        ];
        return FormErrorsService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { CanHide } from '../form-entry/control-hiders-disablers/can-hide';
    // import { CanDisable } from '../form-entry/control-hiders-disablers/can-disable';
    var 
    // import { CanHide } from '../form-entry/control-hiders-disablers/can-hide';
    // import { CanDisable } from '../form-entry/control-hiders-disablers/can-disable';
    ControlRelation = (function () {
        function ControlRelation(control, relatedTo) {
            this._control = control;
            this._relatedTo = relatedTo;
            this._registerForChangesFromRelatedControl();
        }
        Object.defineProperty(ControlRelation.prototype, "control", {
            get: /**
             * @return {?}
             */ function () {
                return this._control;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlRelation.prototype, "relatedTo", {
            get: /**
             * @return {?}
             */ function () {
                return this._relatedTo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlRelation.prototype, "lastUpdateValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._lastUpdateValue;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} newValue
         * @return {?}
         */
        ControlRelation.prototype.updateControlBasedOnRelation = /**
         * @param {?} newValue
         * @return {?}
         */
            function (newValue) {
                if (newValue !== this._lastUpdateValue) {
                    this._lastUpdateValue = newValue;
                    if ((((this._control))).updateCalculatedValue) {
                        (((this._control))).updateCalculatedValue();
                    }
                    this._control.updateValueAndValidity();
                    if ((((this._control))).updateHiddenState) {
                        (((this._control))).updateHiddenState();
                    }
                    if ((((this._control))).updateDisabledState) {
                        (((this._control))).updateDisabledState();
                    }
                    if ((((this._control))).updateAlert) {
                        (((this._control))).updateAlert();
                    }
                    return true;
                }
                return false;
            };
        /**
         * @private
         * @return {?}
         */
        ControlRelation.prototype._registerForChangesFromRelatedControl = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this._relatedTo.valueChanges.subscribe(function (value) {
                    _this.updateControlBasedOnRelation(value);
                });
            };
        return ControlRelation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ControlRelations = (function () {
        function ControlRelations(relationFor, relatedTo) {
            this._otherRelations = [];
            this._relationFor = relationFor;
            this._relations = [];
            if (relatedTo) {
                this.addRelatedControls(relatedTo);
            }
        }
        Object.defineProperty(ControlRelations.prototype, "relationsFor", {
            get: /**
             * @return {?}
             */ function () {
                return this._relationFor;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlRelations.prototype, "relations", {
            get: /**
             * @return {?}
             */ function () {
                return this._relations;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlRelations.prototype, "otherRelations", {
            get: /**
             * @return {?}
             */ function () {
                return this._otherRelations;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} relatedTo
         * @return {?}
         */
        ControlRelations.prototype.addRelatedControls = /**
         * @param {?} relatedTo
         * @return {?}
         */
            function (relatedTo) {
                if (relatedTo instanceof forms.AbstractControl) {
                    this.relations.push(new ControlRelation(this._relationFor, relatedTo));
                }
                if (relatedTo instanceof Array) {
                    for (var i = 0; i < relatedTo.length; i++) {
                        this.relations.push(new ControlRelation(this._relationFor, relatedTo[i]));
                    }
                }
            };
        return ControlRelations;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HiderHelper = (function () {
        function HiderHelper() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        HiderHelper.prototype.hideControl = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                control.hidden = true;
                if (control.disable) {
                    control.disable();
                }
            };
        /**
         * @param {?} control
         * @return {?}
         */
        HiderHelper.prototype.showControl = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                control.hidden = false;
            };
        /**
         * @param {?} control
         * @param {?} hider
         * @return {?}
         */
        HiderHelper.prototype.setHiderForControl = /**
         * @param {?} control
         * @param {?} hider
         * @return {?}
         */
            function (control, hider) {
                control.hiders.push(hider);
            };
        /**
         * @param {?} control
         * @return {?}
         */
        HiderHelper.prototype.clearHidersForControl = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                control.hiders.splice(0);
                control.hidden = false;
            };
        /**
         * @param {?} control
         * @return {?}
         */
        HiderHelper.prototype.evaluateControlHiders = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                /** @type {?} */
                var hiddenValue = false;
                control.hiders.forEach(function (hider) {
                    hider.reEvaluateHidingExpression();
                    if (hider.toHide === true) {
                        hiddenValue = true;
                    }
                });
                control.hidden = hiddenValue;
                if (control.hidden && control.disable) {
                    control.disable();
                    // control.setValue(null);
                }
            };
        /**
         * @param {?} control
         * @return {?}
         */
        HiderHelper.prototype.setUpReEvaluationWhenValueChanges = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.updateHiddenState) {
                    control.valueChanges.subscribe(function (val) {
                        control.updateHiddenState();
                    });
                }
            };
        return HiderHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AlertHelper = (function () {
        function AlertHelper() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        AlertHelper.prototype.hideAlert = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                control.shown = false;
            };
        /**
         * @param {?} control
         * @return {?}
         */
        AlertHelper.prototype.showAlert = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                control.shown = true;
            };
        /**
         * @param {?} control
         * @param {?} alert
         * @return {?}
         */
        AlertHelper.prototype.setAlertsForControl = /**
         * @param {?} control
         * @param {?} alert
         * @return {?}
         */
            function (control, alert) {
                control.alerts.push(alert);
            };
        /**
         * @param {?} control
         * @return {?}
         */
        AlertHelper.prototype.clearAlertsForControl = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                control.alerts.splice(0);
                control.alert = '';
            };
        /**
         * @param {?} control
         * @return {?}
         */
        AlertHelper.prototype.evaluateControlAlerts = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                /** @type {?} */
                var messageValue = '';
                control.alerts.forEach(function (message) {
                    message.reEvaluateAlertExpression();
                    if (message.shown === true) {
                        messageValue = message.alertMessage;
                    }
                    else {
                        messageValue = '';
                    }
                });
                control.alert = messageValue;
                // if (control.message && control.disable) {
                //     control.disable();
                //     // control.setValue(null);
                // }
            };
        /**
         * @param {?} control
         * @return {?}
         */
        AlertHelper.prototype.setUpReEvaluationWhenValueChanges = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.updateAlert) {
                    control.valueChanges.subscribe(function (val) {
                        control.updateAlert();
                    });
                }
            };
        return AlertHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DisablerHelper = (function () {
        function DisablerHelper() {
        }
        /**
         * @param {?} control
         * @param {?} disabler
         * @return {?}
         */
        DisablerHelper.prototype.setDisablerForControl = /**
         * @param {?} control
         * @param {?} disabler
         * @return {?}
         */
            function (control, disabler) {
                control.disablers.push(disabler);
            };
        /**
         * @param {?} control
         * @return {?}
         */
        DisablerHelper.prototype.clearDisablersForControl = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                control.disablers.splice(0);
                control.disable();
            };
        /**
         * @param {?} control
         * @return {?}
         */
        DisablerHelper.prototype.evaluateControlDisablers = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                /** @type {?} */
                var toDisable = false;
                control.disablers.forEach(function (hider) {
                    hider.reEvaluateDisablingExpression();
                    if (hider.toDisable === true) {
                        toDisable = true;
                    }
                });
                // console.log('Control', control);
                if (toDisable) {
                    control.disable();
                }
                else {
                    control.enable();
                }
            };
        /**
         * @param {?} control
         * @return {?}
         */
        DisablerHelper.prototype.setUpReEvaluationWhenValueChanges = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.updateDisabledState) {
                    control.valueChanges.subscribe(function (val) {
                        control.updateDisabledState();
                    });
                }
            };
        return DisablerHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NodeBase = (function () {
        function NodeBase(question, control, form, parentPath) {
            this._control = control;
            this._questionModel = question;
            this._form = form;
            this._path = parentPath ? parentPath + '.' + question.key : question.key;
        }
        Object.defineProperty(NodeBase.prototype, "question", {
            get: /**
             * @return {?}
             */ function () {
                return this._questionModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeBase.prototype, "control", {
            get: /**
             * @return {?}
             */ function () {
                return this._control;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeBase.prototype, "form", {
            get: /**
             * @return {?}
             */ function () {
                return this._form;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeBase.prototype, "path", {
            get: /**
             * @return {?}
             */ function () {
                return this._path;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} index
         * @return {?}
         */
        NodeBase.prototype.removeAt = /**
         * @param {?} index
         * @return {?}
         */
            function (index) { };
        /**
         * @return {?}
         */
        NodeBase.prototype.createChildNode = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        NodeBase.prototype.removeChildNode = /**
         * @return {?}
         */
            function () { };
        return NodeBase;
    }());
    var LeafNode = (function (_super) {
        __extends(LeafNode, _super);
        function LeafNode(question, control, parentControl, form, parentPath) {
            return _super.call(this, question, control, form, parentPath) || this;
        }
        return LeafNode;
    }(NodeBase));
    var GroupNode = (function (_super) {
        __extends(GroupNode, _super);
        function GroupNode(question, control, parentControl, form, parentPath) {
            var _this = _super.call(this, question, control, form, parentPath) || this;
            _this._children = {};
            return _this;
        }
        Object.defineProperty(GroupNode.prototype, "children", {
            get: /**
             * @return {?}
             */ function () {
                return this._children;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @param {?} node
         * @return {?}
         */
        GroupNode.prototype.setChild = /**
         * @param {?} key
         * @param {?} node
         * @return {?}
         */
            function (key, node) {
                this.children[key] = node;
            };
        return GroupNode;
    }(NodeBase));
    var ArrayNode = (function (_super) {
        __extends(ArrayNode, _super);
        function ArrayNode(question, control, parentControl, formFactory, form, parentPath) {
            var _this = _super.call(this, question, control, form, parentPath) || this;
            _this.formFactory = formFactory;
            _this.childNodeCreatedEvents = [];
            _this._children = [];
            _this.childNodeCreatedEvents = [];
            return _this;
        }
        Object.defineProperty(ArrayNode.prototype, "children", {
            get: /**
             * @return {?}
             */ function () {
                return this._children;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ArrayNode.prototype.createChildNode = /**
         * @return {?}
         */
            function () {
                if (this.createChildFunc) {
                    /** @type {?} */
                    var g = this.createChildFunc(((this.question)), this, this.formFactory);
                    this.fireChildNodeCreatedListener(g);
                    return g;
                }
                return null;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        ArrayNode.prototype.removeAt = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (this.removeChildFunc) {
                    this.removeChildFunc(index, this);
                }
            };
        /**
         * @param {?} func
         * @return {?}
         */
        ArrayNode.prototype.addChildNodeCreatedListener = /**
         * @param {?} func
         * @return {?}
         */
            function (func) {
                this.childNodeCreatedEvents.push(func);
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ArrayNode.prototype.fireChildNodeCreatedListener = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                for (var i = 0; i < this.childNodeCreatedEvents.length; i++) {
                    /** @type {?} */
                    var func = this.childNodeCreatedEvents[i];
                    func(node);
                }
            };
        return ArrayNode;
    }(NodeBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValidationModel = (function () {
        function ValidationModel(validations) {
            this.type = validations.type;
            this.message = validations.message || null;
        }
        return ValidationModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var JsExpressionValidationModel = (function (_super) {
        __extends(JsExpressionValidationModel, _super);
        function JsExpressionValidationModel(validations) {
            var _this = _super.call(this, validations) || this;
            _this.failsWhenExpression = validations.failsWhenExpression;
            return _this;
        }
        return JsExpressionValidationModel;
    }(ValidationModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConditionalValidationModel = (function (_super) {
        __extends(ConditionalValidationModel, _super);
        function ConditionalValidationModel(validations) {
            var _this = _super.call(this, validations) || this;
            _this.referenceQuestionId = validations.referenceQuestionId;
            _this.referenceQuestionAnswers = validations.referenceQuestionAnswers;
            return _this;
        }
        return ConditionalValidationModel;
    }(ValidationModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ControlRelationsFactory = (function () {
        function ControlRelationsFactory() {
        }
        /**
         * @param {?} rootNode
         * @return {?}
         */
        ControlRelationsFactory.prototype.buildRelations = /**
         * @param {?} rootNode
         * @return {?}
         */
            function (rootNode) {
                /** @type {?} */
                var controlsStore = this.mapControlIds(rootNode, {});
                for (var key in controlsStore) {
                    if (controlsStore.hasOwnProperty(key)) {
                        /** @type {?} */
                        var nodeBase = controlsStore[key];
                        this.setRelations(controlsStore, nodeBase);
                    }
                }
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ControlRelationsFactory.prototype.buildArrayNodeRelations = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var form = node.form;
                if (!form) {
                    return;
                }
                /** @type {?} */
                var rootNode = form.rootNode;
                // build relations for controls in the same array
                this.buildRelations(node);
                // build relations for control outside the array
                /** @type {?} */
                var rootControlsStore = this.mapControlIds(rootNode, {});
                /** @type {?} */
                var arrayControlStore = this.mapControlIds(node, {});
                for (var key in rootControlsStore) {
                    if (rootControlsStore.hasOwnProperty(key)) {
                        /** @type {?} */
                        var child = rootControlsStore[key];
                        if (child instanceof LeafNode) {
                            /** @type {?} */
                            var questionBase = (((child))).question;
                            if (questionBase.key && questionBase.key.length > 0) {
                                this.setRelations(arrayControlStore, child);
                            }
                        }
                    }
                }
                // define relations for controls outside the group to controls in this group
                this.createRelationsToArrayControls(node);
                // fire relations
                for (var id in arrayControlStore) {
                    if (arrayControlStore.hasOwnProperty(id)) {
                        /** @type {?} */
                        var child = arrayControlStore[id];
                        /** @type {?} */
                        var control = ((child.control));
                        control.updateHiddenState();
                        control.updateAlert();
                    }
                }
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ControlRelationsFactory.prototype.createRelationsToArrayControls = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var form = node.form;
                /** @type {?} */
                var rootNode = form.rootNode;
                // build relations for control outside the array
                /** @type {?} */
                var rootControlsStore = this.mapControlIds(rootNode, {});
                /** @type {?} */
                var arrayControlStore = this.mapControlIds(node, {});
                // loop through form controls
                for (var key in rootControlsStore) {
                    if (rootControlsStore.hasOwnProperty(key)) {
                        /** @type {?} */
                        var rChild = rootControlsStore[key];
                        /** @type {?} */
                        var parentNodePath = node.path.substring(0, node.path.lastIndexOf('.'));
                        if (rChild.path.indexOf(parentNodePath + '.') === -1) {
                            var _loop_1 = function (id) {
                                if (arrayControlStore.hasOwnProperty(id)) {
                                    /** @type {?} */
                                    var aChild = arrayControlStore[id];
                                    /** @type {?} */
                                    var aChildId = aChild.question.key;
                                    if (this_1.hasRelation(aChildId, rChild.question)) {
                                        /** @type {?} */
                                        var nodes = node.form.searchNodeByPath(rootNode, parentNodePath, []);
                                        if (nodes.length > 0) {
                                            /** @type {?} */
                                            var an = ((nodes[0]));
                                            /** @type {?} */
                                            var rootControl_1 = (((rChild.control)));
                                            if (rootControl_1.controlRelations.otherRelations.indexOf(an) === -1) {
                                                rootControl_1.controlRelations.otherRelations.push(an);
                                            }
                                            (((aChild.control))).addValueChangeListener(function (value) {
                                                if ((((rootControl_1))).updateCalculatedValue) {
                                                    (((rootControl_1))).updateCalculatedValue();
                                                }
                                                rootControl_1.updateValueAndValidity();
                                                if ((((rootControl_1))).updateHiddenState) {
                                                    (((rootControl_1))).updateHiddenState();
                                                }
                                                if ((((rootControl_1))).updateAlert) {
                                                    (((rootControl_1))).updateAlert();
                                                }
                                                if ((((rootControl_1))).updateDisabledState) {
                                                    (((rootControl_1))).updateDisabledState();
                                                }
                                            });
                                        }
                                    }
                                }
                            };
                            var this_1 = this;
                            // loop through controls in the array group
                            for (var id in arrayControlStore) {
                                _loop_1(id);
                            }
                        }
                    }
                }
            };
        /**
         * @param {?} id
         * @param {?} node
         * @return {?}
         */
        ControlRelationsFactory.prototype.getRelationsForControl = /**
         * @param {?} id
         * @param {?} node
         * @return {?}
         */
            function (id, node) {
                /** @type {?} */
                var relations = new Array();
                /** @type {?} */
                var nodeBaseArray = node.form.searchNodeByQuestionId(id);
                if (nodeBaseArray.length > 0) {
                    /** @type {?} */
                    var nodeBase = nodeBaseArray[0];
                    /** @type {?} */
                    var controlList = this.mapControlIds(node, {});
                    for (var key in controlList) {
                        if (controlList.hasOwnProperty(key)) {
                            if (this.hasRelation(controlList[key].question.key, nodeBase.question)) {
                                relations.push(controlList[key].control);
                            }
                        }
                    }
                }
                return relations;
            };
        /**
         * @param {?} node
         * @param {?} controlsStore
         * @return {?}
         */
        ControlRelationsFactory.prototype.mapControlIds = /**
         * @param {?} node
         * @param {?} controlsStore
         * @return {?}
         */
            function (node, controlsStore) {
                /** @type {?} */
                var children = node.children;
                for (var key in children) {
                    if (children.hasOwnProperty(key)) {
                        /** @type {?} */
                        var child = children[key];
                        if (child instanceof GroupNode) {
                            this.mapControlIds(child, controlsStore);
                        }
                        else if (child instanceof LeafNode) {
                            /** @type {?} */
                            var questionBase = (((child))).question;
                            if (questionBase.key && questionBase.key.length > 0) {
                                controlsStore[questionBase.key] = child;
                            }
                        }
                        else if (child instanceof ArrayNode) {
                            /** @type {?} */
                            var questionBase = (((child))).question;
                            if (questionBase.key && questionBase.key.length > 0) {
                                controlsStore[questionBase.key] = child;
                            }
                        }
                    }
                }
                return controlsStore;
            };
        /**
         * @param {?} controlsStore
         * @param {?} nodeBase
         * @return {?}
         */
        ControlRelationsFactory.prototype.setRelations = /**
         * @param {?} controlsStore
         * @param {?} nodeBase
         * @return {?}
         */
            function (controlsStore, nodeBase) {
                /** @type {?} */
                var questionBase = nodeBase.question;
                /** @type {?} */
                var id = questionBase.key;
                for (var key in controlsStore) {
                    if (controlsStore.hasOwnProperty(key) && key !== id) {
                        /** @type {?} */
                        var node = controlsStore[key];
                        /** @type {?} */
                        var question = node.question;
                        if (this.hasRelation(id, question, nodeBase)) {
                            this.addRelationToControl(((node.control)), ((nodeBase.control)));
                        }
                        // add conditional required and conditional answered relations
                        if (typeof question.required === 'object') {
                            /** @type {?} */
                            var required = question.required;
                            if (required.type === 'conditionalRequired') {
                                if (required.referenceQuestionId === id) {
                                    this.addRelationToControl(((node.control)), ((nodeBase.control)));
                                }
                            }
                        }
                    }
                }
            };
        /**
         * @param {?} id
         * @param {?} questionBase
         * @param {?=} nodeBase
         * @return {?}
         */
        ControlRelationsFactory.prototype.hasRelation = /**
         * @param {?} id
         * @param {?} questionBase
         * @param {?=} nodeBase
         * @return {?}
         */
            function (id, questionBase, nodeBase) {
                /** @type {?} */
                var hasRelation = false;
                if (questionBase.validators && questionBase.validators.length > 0) {
                    questionBase.validators.forEach(function (element) {
                        if (element instanceof JsExpressionValidationModel) {
                            /** @type {?} */
                            var model = ((element));
                            /** @type {?} */
                            var failsWhenExpression = model.failsWhenExpression;
                            if (failsWhenExpression && failsWhenExpression.indexOf(id) !== -1) {
                                hasRelation = true;
                            }
                        }
                        else if (element instanceof ConditionalValidationModel && element.type === 'conditionalAnswered'
                            && element.referenceQuestionId === id) {
                            hasRelation = true;
                        }
                    });
                }
                // add hiders and disablers relations
                if (!hasRelation) {
                    if (typeof questionBase.hide === 'string') {
                        /** @type {?} */
                        var hide = ((questionBase.hide));
                        if (hide.length > 0 && hide.indexOf(id) !== -1) {
                            hasRelation = true;
                        }
                    }
                    else if (typeof questionBase.hide === 'object') {
                        /** @type {?} */
                        var hideObj = questionBase.hide;
                        if (hideObj.field === id) {
                            hasRelation = true;
                        }
                    }
                    if (questionBase.alert && typeof questionBase.alert === 'object') {
                        hasRelation = true;
                    }
                    if (typeof questionBase.disable === 'string') {
                        /** @type {?} */
                        var disable = ((questionBase.disable));
                        if (disable.length > 0 && disable.indexOf(id) !== -1) {
                            hasRelation = true;
                        }
                    }
                }
                // add calculate expressions relations
                if (!hasRelation && questionBase.calculateExpression && questionBase.calculateExpression.length > 0
                    && questionBase.calculateExpression.indexOf(id) !== -1) {
                    hasRelation = true;
                }
                return hasRelation;
            };
        /**
         * @param {?} control
         * @param {?} related
         * @return {?}
         */
        ControlRelationsFactory.prototype.addRelationToControl = /**
         * @param {?} control
         * @param {?} related
         * @return {?}
         */
            function (control, related) {
                //  let relations = control.controlRelations.relations;
                //
                //  let hasRelation = false;
                //
                //   relations.forEach(element => {
                //
                //     let controlRelation: ControlRelation = element as ControlRelation;
                //
                //     let relation: AfeFormControl | AfeFormArray = controlRelation.control as AfeFormControl | AfeFormArray;
                //
                //     if ( control.uuid !== undefined && control.uuid === relation.uuid ) {
                //       hasRelation = true;
                //     }
                //   });
                // if ( !hasRelation ) {
                control.controlRelations.addRelatedControls(related);
                // }
            };
        ControlRelationsFactory.decorators = [
            { type: core.Injectable },
        ];
        ControlRelationsFactory.ctorParameters = function () { return []; };
        return ControlRelationsFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment = moment_;
    var ExpressionRunner = (function () {
        function ExpressionRunner() {
        }
        /**
         * @param {?} expression
         * @param {?} control
         * @param {?} helper
         * @param {?} dataDependencies
         * @param {?=} form
         * @return {?}
         */
        ExpressionRunner.prototype.getRunnable = /**
         * @param {?} expression
         * @param {?} control
         * @param {?} helper
         * @param {?} dataDependencies
         * @param {?=} form
         * @return {?}
         */
            function (expression, control, helper, dataDependencies, form) {
                /** @type {?} */
                var runner = this;
                /** @type {?} */
                var runnable = {
                    run: function () {
                        /* tslint:disable */
                        /** @type {?} */
                        var scope = {};
                        if (control.uuid) {
                            scope[control.uuid] = control.value;
                        }
                        window['moment'] = moment;
                        // scope.moment = moment;
                        scope['myValue'] = control.value;
                        runner.getControlRelationValueString(control, scope);
                        runner.getHelperMethods(helper, scope);
                        runner.getDataDependencies(dataDependencies, scope);
                        if (form) {
                            // console.error('Form defined', form);
                            runner.getDataDependencies(form.dataSourcesContainer.dataSources, scope);
                        }
                        /** @type {?} */
                        var paramList = '';
                        /** @type {?} */
                        var argList = '';
                        for (var o in scope) {
                            paramList = paramList === "" ? paramList + o : paramList + ',' + o;
                            argList = argList === "" ? argList + "scope['" + o + "']" : argList + ",scope['" + o + "']";
                        }
                        // prevent more than one return statements
                        if (expression.indexOf('return') === -1) {
                            expression = '"return ' + expression + '"';
                        }
                        /** @type {?} */
                        var funcDeclarationCode = 'var afeDynamicFunc = new Function("' + paramList + '", ' + expression + ');';
                        /** @type {?} */
                        var funcCallCode = 'afeDynamicFunc.call(this ' + (argList === '' ? '' : ',' + argList) + ');';
                        try {
                            if (Object.keys(scope).indexOf('undefined') >= 0) {
                                console.warn('Missing reference found', expression, scope);
                                return false;
                            }
                            //console.info('results: ', expression, eval(funcDeclarationCode + funcCallCode));
                            return eval(funcDeclarationCode + funcCallCode);
                        }
                        catch (e) {
                            // if (window['error_count']) {
                            //     window['error_count'] = window['error_count'] + 1;
                            // } else {
                            //     window['error_count'] = 1;
                            // }
                            // console.error(window['error_count'] + ' Error running expression:' + expression + '. ',
                            //     e, control, 'Effective Expression', (funcDeclarationCode + funcCallCode));
                            // console.error('Error running expression:' + expression + '. ',
                            //     e, control, 'Effective Expression', (funcDeclarationCode + funcCallCode));
                            // Uncomment the line above during debugging
                            // console.error('Error running expression:' + expression, scope);
                            return false;
                        }
                        /* tslint:enable */
                    }
                };
                return runnable;
            };
        /**
         * @private
         * @param {?} control
         * @param {?} scope
         * @return {?}
         */
        ExpressionRunner.prototype.getControlRelationValueString = /**
         * @private
         * @param {?} control
         * @param {?} scope
         * @return {?}
         */
            function (control, scope) {
                var _this = this;
                if (control && control.controlRelations && control.controlRelations.relations) {
                    control.controlRelations.relations.forEach(function (relation) {
                        if (relation.relatedTo) {
                            /** @type {?} */
                            var related = ((relation.relatedTo));
                            /** @type {?} */
                            var relatedAsControl = ((relation.relatedTo));
                            if (relatedAsControl && Array.isArray(relatedAsControl.value)) {
                                scope[related.uuid] = relation.relatedTo.value;
                            }
                            else {
                                scope[related.uuid] = relation.relatedTo.value && relation.relatedTo.value.value ?
                                    relation.relatedTo.value.value : relation.relatedTo.value;
                            }
                        }
                    });
                }
                if (control && control.controlRelations && control.controlRelations.otherRelations
                    && control.controlRelations.otherRelations.length > 0) {
                    control.controlRelations.otherRelations.forEach(function (node) {
                        if (node instanceof ArrayNode) {
                            /** @type {?} */
                            var arrayNode = ((node));
                            /** @type {?} */
                            var uuid_1 = control.uuid;
                            /** @type {?} */
                            var controlRelationsFactory_1 = new ControlRelationsFactory();
                            /** @type {?} */
                            var relationsForControl_1 = [];
                            // get all related controls
                            arrayNode.children.forEach(function (child) {
                                relationsForControl_1 = relationsForControl_1.concat(controlRelationsFactory_1.getRelationsForControl(uuid_1, child));
                            });
                            _this.setControlArrayValues(((control)), relationsForControl_1, scope);
                        }
                    });
                }
            };
        /**
         * @private
         * @param {?} control
         * @param {?} relationsForControl
         * @param {?} scope
         * @return {?}
         */
        ExpressionRunner.prototype.setControlArrayValues = /**
         * @private
         * @param {?} control
         * @param {?} relationsForControl
         * @param {?} scope
         * @return {?}
         */
            function (control, relationsForControl, scope) {
                var _this = this;
                /** @type {?} */
                var keys = this._getFormControlKeys(relationsForControl);
                keys.forEach(function (key) {
                    /** @type {?} */
                    var values = _this._getValuesForKey(key, relationsForControl);
                    scope[key] = values;
                });
            };
        /**
         * @private
         * @param {?} array
         * @return {?}
         */
        ExpressionRunner.prototype._getFormControlKeys = /**
         * @private
         * @param {?} array
         * @return {?}
         */
            function (array) {
                /** @type {?} */
                var keys = [];
                array.forEach(function (control) {
                    if (keys.indexOf(control.uuid) === -1) {
                        keys.push(control.uuid);
                    }
                });
                return keys;
            };
        /**
         * @private
         * @param {?} key
         * @param {?} array
         * @return {?}
         */
        ExpressionRunner.prototype._getValuesForKey = /**
         * @private
         * @param {?} key
         * @param {?} array
         * @return {?}
         */
            function (key, array) {
                /** @type {?} */
                var values = [];
                array.forEach(function (control) {
                    if (control.uuid === key) {
                        values.push(control.value);
                    }
                });
                return values;
            };
        /**
         * @private
         * @param {?} obj
         * @param {?=} scope
         * @return {?}
         */
        ExpressionRunner.prototype.getHelperMethods = /**
         * @private
         * @param {?} obj
         * @param {?=} scope
         * @return {?}
         */
            function (obj, scope) {
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        scope[key] = obj[key];
                    }
                }
            };
        /**
         * @private
         * @param {?} obj
         * @param {?=} scope
         * @return {?}
         */
        ExpressionRunner.prototype.getDataDependencies = /**
         * @private
         * @param {?} obj
         * @param {?=} scope
         * @return {?}
         */
            function (obj, scope) {
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        scope[key] = obj[key];
                    }
                }
            };
        return ExpressionRunner;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AfeFormControl = (function (_super) {
        __extends(AfeFormControl, _super);
        function AfeFormControl(formState, validator, asyncValidator) {
            var _this = _super.call(this, formState, validator, asyncValidator) || this;
            _this.hidden = false;
            _this.hiderHelper = new HiderHelper();
            _this.disablerHelper = new DisablerHelper();
            _this.AlertHelper = new AlertHelper();
            _this._controlRelations = new ControlRelations(_this);
            _this.hiders = [];
            _this.disablers = [];
            _this.alerts = [];
            _this.valueChanges.subscribe(function (value) {
                if (_this._previousValue !== value) {
                    _this.fireValueChangeListener(value);
                    _this._previousValue = value;
                }
            });
            return _this;
        }
        Object.defineProperty(AfeFormControl.prototype, "controlRelations", {
            get: /**
             * @return {?}
             */ function () {
                return this._controlRelations;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} param
         * @return {?}
         */
        AfeFormControl.prototype.disable = /**
         * @param {?=} param
         * @return {?}
         */
            function (param) {
                _super.prototype.disable.call(this, param);
                _super.prototype.setValue.call(this, '');
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.hideControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.show = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.showControl(this);
            };
        /**
         * @param {?} newHider
         * @return {?}
         */
        AfeFormControl.prototype.setHidingFn = /**
         * @param {?} newHider
         * @return {?}
         */
            function (newHider) {
                this.hiderHelper.setHiderForControl(this, newHider);
            };
        /**
         * @param {?} newCalculator
         * @return {?}
         */
        AfeFormControl.prototype.setCalculatorFn = /**
         * @param {?} newCalculator
         * @return {?}
         */
            function (newCalculator) {
                this.calculator = newCalculator;
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.updateCalculatedValue = /**
         * @return {?}
         */
            function () {
                if (this.calculator) {
                    /** @type {?} */
                    var _val = this.calculator.call(ExpressionRunner, {});
                    this.setValue(_val);
                }
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.clearHidingFns = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.clearHidersForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.updateHiddenState = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.evaluateControlHiders(this);
            };
        /**
         * @param {?} newDisabler
         * @return {?}
         */
        AfeFormControl.prototype.setDisablingFn = /**
         * @param {?} newDisabler
         * @return {?}
         */
            function (newDisabler) {
                this.disablerHelper.setDisablerForControl(this, newDisabler);
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.clearDisablingFns = /**
         * @return {?}
         */
            function () {
                this.disablerHelper.clearDisablersForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.updateDisabledState = /**
         * @return {?}
         */
            function () {
                this.disablerHelper.evaluateControlDisablers(this);
            };
        /**
         * @param {?} newHider
         * @return {?}
         */
        AfeFormControl.prototype.setAlertFn = /**
         * @param {?} newHider
         * @return {?}
         */
            function (newHider) {
                this.AlertHelper.setAlertsForControl(this, newHider);
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.clearMessageFns = /**
         * @return {?}
         */
            function () {
                this.AlertHelper.clearAlertsForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormControl.prototype.updateAlert = /**
         * @return {?}
         */
            function () {
                this.AlertHelper.evaluateControlAlerts(this);
            };
        /**
         * @param {?} func
         * @return {?}
         */
        AfeFormControl.prototype.addValueChangeListener = /**
         * @param {?} func
         * @return {?}
         */
            function (func) {
                this._valueChangeListener = func;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AfeFormControl.prototype.fireValueChangeListener = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this._valueChangeListener && typeof this._valueChangeListener === 'function') {
                    this._valueChangeListener(value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AfeFormControl.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                _super.prototype.setValue.call(this, value);
            };
        return AfeFormControl;
    }(forms.FormControl));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AfeFormGroup = (function (_super) {
        __extends(AfeFormGroup, _super);
        function AfeFormGroup(controls, validator, asyncValidator) {
            var _this = _super.call(this, controls, validator, asyncValidator) || this;
            _this.hiderHelper = new HiderHelper();
            _this.disablerHelper = new DisablerHelper();
            _this.AlertHelper = new AlertHelper();
            _this._controlRelations = new ControlRelations(_this);
            _this.hiders = [];
            _this.disablers = [];
            _this.alerts = [];
            return _this;
        }
        Object.defineProperty(AfeFormGroup.prototype, "controlRelations", {
            get: /**
             * @return {?}
             */ function () {
                return this._controlRelations;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AfeFormGroup.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.hideControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormGroup.prototype.show = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.showControl(this);
            };
        /**
         * @param {?=} param
         * @return {?}
         */
        AfeFormGroup.prototype.disable = /**
         * @param {?=} param
         * @return {?}
         */
            function (param) {
                _super.prototype.disable.call(this, param);
                _super.prototype.setValue.call(this, {});
            };
        /**
         * @param {?} newHider
         * @return {?}
         */
        AfeFormGroup.prototype.setHidingFn = /**
         * @param {?} newHider
         * @return {?}
         */
            function (newHider) {
                this.hiderHelper.setHiderForControl(this, newHider);
            };
        /**
         * @return {?}
         */
        AfeFormGroup.prototype.clearHidingFns = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.clearHidersForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormGroup.prototype.updateHiddenState = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.evaluateControlHiders(this);
            };
        /**
         * @param {?} newDisabler
         * @return {?}
         */
        AfeFormGroup.prototype.setDisablingFn = /**
         * @param {?} newDisabler
         * @return {?}
         */
            function (newDisabler) {
                this.disablerHelper.setDisablerForControl(this, newDisabler);
            };
        /**
         * @return {?}
         */
        AfeFormGroup.prototype.clearDisablingFns = /**
         * @return {?}
         */
            function () {
                this.disablerHelper.clearDisablersForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormGroup.prototype.updateDisabledState = /**
         * @return {?}
         */
            function () {
                this.disablerHelper.evaluateControlDisablers(this);
            };
        /**
         * @param {?} newHider
         * @return {?}
         */
        AfeFormGroup.prototype.setAlertFn = /**
         * @param {?} newHider
         * @return {?}
         */
            function (newHider) {
                this.AlertHelper.setAlertsForControl(this, newHider);
            };
        /**
         * @return {?}
         */
        AfeFormGroup.prototype.clearMessageFns = /**
         * @return {?}
         */
            function () {
                this.AlertHelper.clearAlertsForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormGroup.prototype.updateAlert = /**
         * @return {?}
         */
            function () {
                this.AlertHelper.evaluateControlAlerts(this);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AfeFormGroup.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                _super.prototype.setValue.call(this, value);
            };
        return AfeFormGroup;
    }(forms.FormGroup));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AfeFormArray = (function (_super) {
        __extends(AfeFormArray, _super);
        function AfeFormArray(controls, validator, asyncValidator) {
            var _this = _super.call(this, controls, validator, asyncValidator) || this;
            _this.hiderHelper = new HiderHelper();
            _this.AlertHelper = new AlertHelper();
            _this.disablerHelper = new DisablerHelper();
            _this._controlRelations = new ControlRelations(_this);
            _this.hiders = [];
            _this.alerts = [];
            _this.disablers = [];
            _this.valueChanges.subscribe(function (value) {
                if (_this._previousValue !== value) {
                    _this.fireValueChangeListener(value);
                    _this._previousValue = value;
                }
            });
            return _this;
        }
        Object.defineProperty(AfeFormArray.prototype, "uuid", {
            get: /**
             * @return {?}
             */ function () {
                return this._uuid;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._uuid = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AfeFormArray.prototype, "controlRelations", {
            get: /**
             * @return {?}
             */ function () {
                return this._controlRelations;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AfeFormArray.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.hideControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormArray.prototype.show = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.showControl(this);
            };
        /**
         * @param {?=} param
         * @return {?}
         */
        AfeFormArray.prototype.disable = /**
         * @param {?=} param
         * @return {?}
         */
            function (param) {
                _super.prototype.disable.call(this, param);
                _super.prototype.setValue.call(this, []);
            };
        /**
         * @param {?} newHider
         * @return {?}
         */
        AfeFormArray.prototype.setHidingFn = /**
         * @param {?} newHider
         * @return {?}
         */
            function (newHider) {
                this.hiderHelper.setHiderForControl(this, newHider);
            };
        /**
         * @return {?}
         */
        AfeFormArray.prototype.clearHidingFns = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.clearHidersForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormArray.prototype.updateHiddenState = /**
         * @return {?}
         */
            function () {
                this.hiderHelper.evaluateControlHiders(this);
            };
        /**
         * @param {?} newDisabler
         * @return {?}
         */
        AfeFormArray.prototype.setDisablingFn = /**
         * @param {?} newDisabler
         * @return {?}
         */
            function (newDisabler) {
                this.disablerHelper.setDisablerForControl(this, newDisabler);
            };
        /**
         * @return {?}
         */
        AfeFormArray.prototype.clearDisablingFns = /**
         * @return {?}
         */
            function () {
                this.disablerHelper.clearDisablersForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormArray.prototype.updateDisabledState = /**
         * @return {?}
         */
            function () {
                this.disablerHelper.evaluateControlDisablers(this);
            };
        /**
         * @param {?} newHider
         * @return {?}
         */
        AfeFormArray.prototype.setAlertFn = /**
         * @param {?} newHider
         * @return {?}
         */
            function (newHider) {
                this.AlertHelper.setAlertsForControl(this, newHider);
            };
        /**
         * @return {?}
         */
        AfeFormArray.prototype.clearMessageFns = /**
         * @return {?}
         */
            function () {
                this.AlertHelper.clearAlertsForControl(this);
            };
        /**
         * @return {?}
         */
        AfeFormArray.prototype.updateAlert = /**
         * @return {?}
         */
            function () {
                this.AlertHelper.evaluateControlAlerts(this);
            };
        /**
         * @param {?} func
         * @return {?}
         */
        AfeFormArray.prototype.addValueChangeListener = /**
         * @param {?} func
         * @return {?}
         */
            function (func) {
                this._valueChangeListener = func;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AfeFormArray.prototype.fireValueChangeListener = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.alerts.length > 0) {
                    this.updateAlert();
                }
                if (this._valueChangeListener && typeof this._valueChangeListener === 'function') {
                    this._valueChangeListener(value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AfeFormArray.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                _super.prototype.setValue.call(this, value);
            };
        return AfeFormArray;
    }(forms.FormArray));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var AfeControlType = {
        AfeFormControl: 0,
        AfeFormArray: 1,
        AfeFormGroup: 2,
        None: 3,
    };
    AfeControlType[AfeControlType.AfeFormControl] = 'AfeFormControl';
    AfeControlType[AfeControlType.AfeFormArray] = 'AfeFormArray';
    AfeControlType[AfeControlType.AfeFormGroup] = 'AfeFormGroup';
    AfeControlType[AfeControlType.None] = 'None';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QuestionBase = (function () {
        function QuestionBase(options) {
            this.defaultValue = options.defaultValue;
            this.originalValue = options.originalValue;
            this.extras = options.extras;
            this.renderingType = options.type;
            this.key = options.key || '';
            this.label = options.label || '';
            this.validators = options.validators || [];
            this.required = options.required;
            this.hide = options.hide;
            this.disable = options.disable;
            this.alert = options.alert;
            this.historicalDataValue = options.historicalDataValue;
            this.calculateExpression = options.calculateExpression;
        }
        /**
         * @param {?} v
         * @return {?}
         */
        QuestionBase.prototype.setHistoricalValue = /**
         * @param {?} v
         * @return {?}
         */
            function (v) {
                this.enableHistoricalValue = v;
            };
        /**
         * @param {?=} v
         * @return {?}
         */
        QuestionBase.prototype.showHistoricalEncounterDate = /**
         * @param {?=} v
         * @return {?}
         */
            function (v) {
                this.showHistoricalValueDate = v === undefined ? true : v;
            };
        return QuestionBase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConditionalRequiredValidator = (function () {
        function ConditionalRequiredValidator() {
        }
        /**
         * @param {?} model
         * @return {?}
         */
        ConditionalRequiredValidator.prototype.validate = /**
         * @param {?} model
         * @return {?}
         */
            function (model) {
                // convert helper functions to string
                return function (control) {
                    /** @type {?} */
                    var value = control.value;
                    /** @type {?} */
                    var relationValue = null;
                    /** @type {?} */
                    var referenceQuestionId = model.referenceQuestionId;
                    /** @type {?} */
                    var referenceQuestionAnswers = model.referenceQuestionAnswers;
                    /** @type {?} */
                    var isRequired;
                    if (control && control.controlRelations && control.controlRelations.relations) {
                        control.controlRelations.relations.forEach(function (relation) {
                            /** @type {?} */
                            var relatedAsControl = ((relation.relatedTo));
                            if (relatedAsControl.uuid === referenceQuestionId) {
                                if (relatedAsControl && Array.isArray(relatedAsControl.value)) {
                                    relationValue = relation.relatedTo.value;
                                }
                                else {
                                    relationValue = relation.relatedTo.value && relation.relatedTo.value.value ?
                                        relation.relatedTo.value.value : relation.relatedTo.value;
                                }
                            }
                        });
                    }
                    if (typeof referenceQuestionAnswers === 'object' && referenceQuestionAnswers.indexOf(relationValue) !== -1) {
                        isRequired = true;
                    }
                    if (isRequired && !value) {
                        return { 'conditional_required': { message: model.message } };
                    }
                    return null;
                };
            };
        return ConditionalRequiredValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConditionalAnsweredValidator = (function () {
        function ConditionalAnsweredValidator() {
        }
        /**
         * @param {?} model
         * @return {?}
         */
        ConditionalAnsweredValidator.prototype.validate = /**
         * @param {?} model
         * @return {?}
         */
            function (model) {
                return function (control) {
                    /** @type {?} */
                    var value = control.value;
                    /** @type {?} */
                    var relationValue = null;
                    /** @type {?} */
                    var referenceQuestionId = model.referenceQuestionId;
                    /** @type {?} */
                    var referenceQuestionAnswers = model.referenceQuestionAnswers;
                    /** @type {?} */
                    var successCondition = true;
                    if (value) {
                        if (control && control.controlRelations && control.controlRelations.relations) {
                            control.controlRelations.relations.forEach(function (relation) {
                                /** @type {?} */
                                var relatedAsControl = ((relation.relatedTo));
                                if (relatedAsControl.uuid === referenceQuestionId) {
                                    if (Array.isArray(relatedAsControl.value)) {
                                        relationValue = relatedAsControl.value;
                                    }
                                    else {
                                        relationValue = relatedAsControl.value && typeof relatedAsControl.value === 'object' && relatedAsControl.value.value ?
                                            relatedAsControl.value.value : relatedAsControl.value;
                                    }
                                }
                                if (!relationValue) {
                                    successCondition = false;
                                }
                                else if (typeof referenceQuestionAnswers === 'object' && referenceQuestionAnswers.indexOf(relationValue) === -1) {
                                    successCondition = false;
                                }
                            });
                        }
                    }
                    if (!successCondition) {
                        return { 'conditional_answered': { message: model.message } };
                    }
                    return null;
                };
            };
        return ConditionalAnsweredValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RequiredValidator = (function () {
        function RequiredValidator() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        RequiredValidator.prototype.validate = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.hidden) {
                    return null;
                }
                /** @type {?} */
                var value = control.value;
                /** @type {?} */
                var isEmpty = value == null || typeof value === 'string' && value.length === 0;
                return isEmpty ? { 'required': true } : null;
            };
        return RequiredValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateValidator = (function () {
        function DateValidator() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        DateValidator.prototype.validate = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.hidden) {
                    return null;
                }
                /** @type {?} */
                var value = control.value;
                if (value && value.length !== 0) {
                    // YYYY-MM-DD or DD-MM-YYYY
                    /** @type {?} */
                    var test = !/Invalid|NaN/.test(new Date(value).toString());
                    return test ? null : { 'date': true };
                }
                else {
                    return null;
                }
            };
        return DateValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MinValidator = (function () {
        function MinValidator() {
        }
        /**
         * @param {?} min
         * @return {?}
         */
        MinValidator.prototype.validate = /**
         * @param {?} min
         * @return {?}
         */
            function (min) {
                return function (control) {
                    if (control.hidden) {
                        return null;
                    }
                    if (control.value && control.value.length !== 0) {
                        /** @type {?} */
                        var v = control.value;
                        return v >= min ? null : { 'min': { requiredValue: min, actualValue: v } };
                    }
                    return null;
                };
            };
        return MinValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaxValidator = (function () {
        function MaxValidator() {
        }
        /**
         * @param {?} max
         * @return {?}
         */
        MaxValidator.prototype.validate = /**
         * @param {?} max
         * @return {?}
         */
            function (max) {
                return function (control) {
                    if (control.hidden) {
                        return null;
                    }
                    if (control.value && control.value.length !== 0) {
                        /** @type {?} */
                        var v = control.value;
                        return v <= max ? null : { 'max': { requiredValue: max, actualValue: v } };
                    }
                    return null;
                };
            };
        return MaxValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MinDateValidator = (function () {
        function MinDateValidator() {
        }
        /**
         * @param {?} min
         * @return {?}
         */
        MinDateValidator.prototype.validate = /**
         * @param {?} min
         * @return {?}
         */
            function (min) {
                return function (control) {
                    if (control.hidden) {
                        return null;
                    }
                    if (control.value && control.value.length !== 0) {
                        if (!new DateValidator().validate(control.value)) {
                            /** @type {?} */
                            var newDate = new Date(control.value);
                            return newDate.getTime() < min.getTime() ? { 'mindate': { 'requiredDate': min, actualDate: newDate } } : null;
                        }
                        else {
                            return { 'mindate': { 'requiredDate': min } };
                        }
                    }
                    return null;
                };
            };
        return MinDateValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaxDateValidator = (function () {
        function MaxDateValidator() {
        }
        /**
         * @param {?} max
         * @return {?}
         */
        MaxDateValidator.prototype.validate = /**
         * @param {?} max
         * @return {?}
         */
            function (max) {
                return function (control) {
                    if (control.hidden) {
                        return null;
                    }
                    if (control.value && control.value.length !== 0) {
                        if (!new DateValidator().validate(control.value)) {
                            /** @type {?} */
                            var newDate = new Date(control.value);
                            return newDate.getTime() > max.getTime() ? { 'maxdate': { 'requiredDate': max, actualDate: newDate } } : null;
                        }
                        else {
                            return { 'maxdate': { 'requiredDate': max } };
                        }
                    }
                    return null;
                };
            };
        return MaxDateValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FutureDateRestrictionValidator = (function () {
        function FutureDateRestrictionValidator() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        FutureDateRestrictionValidator.prototype.validate = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.hidden) {
                    return null;
                }
                /** @type {?} */
                var value = control.value;
                /** @type {?} */
                var now = new Date();
                if (value && value.length !== 0) {
                    if (!new DateValidator().validate(value)) {
                        /** @type {?} */
                        var d = new Date(value);
                        return d.getTime() > now.getTime() ? { 'futureDateRestriction': true } : null;
                    }
                }
                return null;
            };
        return FutureDateRestrictionValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var JsExpressionHelper = (function () {
        function JsExpressionHelper() {
        }
        /**
         * @param {?} height
         * @param {?} weight
         * @return {?}
         */
        JsExpressionHelper.prototype.calcBMI = /**
         * @param {?} height
         * @param {?} weight
         * @return {?}
         */
            function (height, weight) {
                /** @type {?} */
                var r;
                if (height && weight) {
                    r = (weight / (height / 100 * height / 100)).toFixed(1);
                }
                return height && weight ? parseFloat(r) : null;
            };
        /**
         * @param {?} bmiForAgeRef
         * @param {?} height
         * @param {?} weight
         * @return {?}
         */
        JsExpressionHelper.prototype.calcBMIForAgeZscore = /**
         * @param {?} bmiForAgeRef
         * @param {?} height
         * @param {?} weight
         * @return {?}
         */
            function (bmiForAgeRef, height, weight) {
                /** @type {?} */
                var bmi;
                if (height && weight) {
                    bmi = (weight / (height / 100 * height / 100)).toFixed(1);
                }
                /** @type {?} */
                var refSectionObject = _.first(bmiForAgeRef);
                /** @type {?} */
                var formattedSDValue;
                if (refSectionObject) {
                    /** @type {?} */
                    var refObjectValues = Object.keys(refSectionObject).map(function (key) { return refSectionObject[key]; }).map(function (x) { return x; });
                    /** @type {?} */
                    var refObjectKeys = Object.keys(refSectionObject);
                    /** @type {?} */
                    var minimumValue = refObjectValues[1];
                    /** @type {?} */
                    var minReferencePoint_1 = [];
                    if (bmi < minimumValue) {
                        minReferencePoint_1.push(minimumValue);
                    }
                    else {
                        _.forEach(refObjectValues, function (value) {
                            if (value <= bmi) {
                                minReferencePoint_1.push(value);
                            }
                        });
                    }
                    /** @type {?} */
                    var lastReferenceValue_1 = _.last(minReferencePoint_1);
                    /** @type {?} */
                    var lastValueIndex = _.findIndex(refObjectValues, function (o) {
                        return o === lastReferenceValue_1;
                    });
                    /** @type {?} */
                    var SDValue = refObjectKeys[lastValueIndex];
                    formattedSDValue = SDValue.replace('SD', '');
                    if (formattedSDValue.includes('neg')) {
                        formattedSDValue = formattedSDValue.substring(1, 0);
                        formattedSDValue = '-' + formattedSDValue;
                    }
                    if (formattedSDValue === 'S' || formattedSDValue === 'L' || formattedSDValue === 'M' || formattedSDValue === '-5') {
                        formattedSDValue = '-4';
                    }
                }
                return bmi && refSectionObject ? formattedSDValue : null;
            };
        /**
         * @param {?} weightForHeightRef
         * @param {?} height
         * @param {?} weight
         * @return {?}
         */
        JsExpressionHelper.prototype.calcWeightForHeightZscore = /**
         * @param {?} weightForHeightRef
         * @param {?} height
         * @param {?} weight
         * @return {?}
         */
            function (weightForHeightRef, height, weight) {
                /** @type {?} */
                var refSection;
                /** @type {?} */
                var formattedSDValue;
                if (height && weight) {
                    height = parseFloat(height).toFixed(1);
                }
                /** @type {?} */
                var standardHeightMin = 45;
                /** @type {?} */
                var standardMaxHeight = 110;
                if (height < standardHeightMin || height > standardMaxHeight) {
                    formattedSDValue = -4;
                }
                else {
                    refSection = _.filter(weightForHeightRef, function (refObject) {
                        return parseFloat(refObject['Length']).toFixed(1) === height;
                    });
                }
                /** @type {?} */
                var refSectionObject = _.first(refSection);
                if (refSectionObject) {
                    /** @type {?} */
                    var refObjectValues = Object.keys(refSectionObject).map(function (key) { return refSectionObject[key]; }).map(function (x) { return x; });
                    /** @type {?} */
                    var refObjectKeys = Object.keys(refSectionObject);
                    /** @type {?} */
                    var minimumValue = refObjectValues[1];
                    /** @type {?} */
                    var minReferencePoint_2 = [];
                    if (weight < minimumValue) {
                        minReferencePoint_2.push(minimumValue);
                    }
                    else {
                        _.forEach(refObjectValues, function (value) {
                            if (value <= weight) {
                                minReferencePoint_2.push(value);
                            }
                        });
                    }
                    /** @type {?} */
                    var lastReferenceValue_2 = _.last(minReferencePoint_2);
                    /** @type {?} */
                    var lastValueIndex = _.findIndex(refObjectValues, function (o) {
                        return o === lastReferenceValue_2;
                    });
                    /** @type {?} */
                    var SDValue = refObjectKeys[lastValueIndex];
                    formattedSDValue = SDValue.replace('SD', '');
                    if (formattedSDValue.includes('neg')) {
                        formattedSDValue = formattedSDValue.substring(1, 0);
                        formattedSDValue = '-' + formattedSDValue;
                    }
                    if (formattedSDValue === 'S' || formattedSDValue === 'L' || formattedSDValue === 'M' || formattedSDValue === '-5') {
                        formattedSDValue = '-4';
                    }
                }
                return height && weight ? formattedSDValue : null;
            };
        /**
         * @param {?} heightForAgeRef
         * @param {?} height
         * @param {?} weight
         * @return {?}
         */
        JsExpressionHelper.prototype.calcHeightForAgeZscore = /**
         * @param {?} heightForAgeRef
         * @param {?} height
         * @param {?} weight
         * @return {?}
         */
            function (heightForAgeRef, height, weight) {
                /** @type {?} */
                var refSectionObject = _.first(heightForAgeRef);
                /** @type {?} */
                var formattedSDValue;
                if (refSectionObject) {
                    /** @type {?} */
                    var refObjectValues = Object.keys(refSectionObject).map(function (key) { return refSectionObject[key]; }).map(function (x) { return x; });
                    /** @type {?} */
                    var refObjectKeys = Object.keys(refSectionObject);
                    /** @type {?} */
                    var minimumValue = refObjectValues[1];
                    /** @type {?} */
                    var minReferencePoint_3 = [];
                    if (height < minimumValue) {
                        minReferencePoint_3.push(minimumValue);
                    }
                    else {
                        _.forEach(refObjectValues, function (value) {
                            if (value <= height) {
                                minReferencePoint_3.push(value);
                            }
                        });
                    }
                    /** @type {?} */
                    var lastReferenceValue_3 = _.last(minReferencePoint_3);
                    /** @type {?} */
                    var lastValueIndex = _.findIndex(refObjectValues, function (o) {
                        return o === lastReferenceValue_3;
                    });
                    /** @type {?} */
                    var SDValue = refObjectKeys[lastValueIndex];
                    formattedSDValue = SDValue.replace('SD', '');
                    if (formattedSDValue.includes('neg')) {
                        formattedSDValue = formattedSDValue.substring(1, 0);
                        formattedSDValue = '-' + formattedSDValue;
                    }
                    if (formattedSDValue === 'S' || formattedSDValue === 'L' || formattedSDValue === 'M' || formattedSDValue === '-5') {
                        formattedSDValue = '-4';
                    }
                }
                return height && weight && refSectionObject ? formattedSDValue : null;
            };
        /**
         * @param {?} val
         * @return {?}
         */
        JsExpressionHelper.prototype.isEmpty = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                if (val === undefined || val === null || val === '' || val === 'null' || val === 'undefined') {
                    return true;
                }
                if (Array.isArray(val) && val.length === 0) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} array
         * @param {?} members
         * @return {?}
         */
        JsExpressionHelper.prototype.arrayContains = /**
         * @param {?} array
         * @param {?} members
         * @return {?}
         */
            function (array, members) {
                if (Array.isArray(members)) {
                    if (members.length === 0) {
                        return true;
                    }
                    /** @type {?} */
                    var contains = true;
                    for (var i = 0; i < members.length; i++) {
                        /** @type {?} */
                        var val = members[i];
                        if (array.indexOf(val) === -1) {
                            contains = false;
                        }
                    }
                    return contains;
                }
                else {
                    return array.indexOf(members) !== -1;
                }
            };
        /**
         * @param {?} key
         * @param {?} array
         * @return {?}
         */
        JsExpressionHelper.prototype.extractRepeatingGroupValues = /**
         * @param {?} key
         * @param {?} array
         * @return {?}
         */
            function (key, array) {
                /** @type {?} */
                var values = array.map(function (item) {
                    return item[key];
                });
                return values;
            };
        /**
         * @param {?} value
         * @param {?} format
         * @param {?} offset
         * @return {?}
         */
        JsExpressionHelper.prototype.formatDate = /**
         * @param {?} value
         * @param {?} format
         * @param {?} offset
         * @return {?}
         */
            function (value, format, offset) {
                format = format || 'yyyy-MM-dd';
                offset = offset || '+0300';
                if (!(value instanceof Date)) {
                    value = new Date(value);
                    if (value === null || value === undefined) {
                        throw new Error('DateFormatException: value passed ' +
                            'is not a valid date');
                    }
                }
                return value; // TODO implement this
                // return $filter('date')(value, format, offset);
            };
        /**
         * @param {?} array
         * @param {?} members
         * @return {?}
         */
        JsExpressionHelper.prototype.arrayContainsAny = /**
         * @param {?} array
         * @param {?} members
         * @return {?}
         */
            function (array, members) {
                if (Array.isArray(members)) {
                    if (members.length === 0) {
                        return true;
                    }
                    /** @type {?} */
                    var contains = false;
                    for (var i = 0; i < members.length; i++) {
                        /** @type {?} */
                        var val = members[i];
                        if (array.indexOf(val) !== -1) {
                            contains = true;
                        }
                    }
                    return contains;
                }
                else {
                    return array.indexOf(members) !== -1;
                }
            };
        Object.defineProperty(JsExpressionHelper.prototype, "helperFunctions", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var helper = this;
                return {
                    arrayContainsAny: helper.arrayContainsAny,
                    calcBMI: helper.calcBMI,
                    calcBMIForAgeZscore: helper.calcBMIForAgeZscore,
                    calcWeightForHeightZscore: helper.calcWeightForHeightZscore,
                    calcHeightForAgeZscore: helper.calcHeightForAgeZscore,
                    isEmpty: helper.isEmpty,
                    arrayContains: helper.arrayContains,
                    extractRepeatingGroupValues: helper.extractRepeatingGroupValues
                };
            },
            enumerable: true,
            configurable: true
        });
        return JsExpressionHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Validations = (function () {
        function Validations() {
        }
        Validations.JSExpressionValidatorsEnabled = false;
        return Validations;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var JsExpressionValidator = (function () {
        function JsExpressionValidator() {
        }
        /**
         * @param {?} model
         * @param {?=} form
         * @return {?}
         */
        JsExpressionValidator.prototype.validate = /**
         * @param {?} model
         * @param {?=} form
         * @return {?}
         */
            function (model, form) {
                // convert helper functions to string
                return function (control) {
                    if (!Validations.JSExpressionValidatorsEnabled) {
                        return null;
                    }
                    /** @type {?} */
                    var expression = model.failsWhenExpression;
                    /** @type {?} */
                    var helper = new JsExpressionHelper();
                    /** @type {?} */
                    var dataDependencies = {};
                    /** @type {?} */
                    var helperFunctions = helper.helperFunctions;
                    /** @type {?} */
                    var runnable = new ExpressionRunner().getRunnable(expression, control, helperFunctions, dataDependencies, form);
                    if (runnable.run()) {
                        return { 'js_expression': { 'expression': expression, message: model.message } };
                    }
                    return null;
                };
            };
        return JsExpressionValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Messages = (function () {
        function Messages() {
        }
        Messages.REQUIRED_FIELD_MSG = 'This field is required!';
        Messages.INVALID_DATE_MSG = 'Provided date is invalid!';
        Messages.FUTURE_DATE_RESTRICTION_MSG = 'Future date is not allowed!';
        Messages.MIN_LENGTH_MSG = 'Min Length should be {minLength}';
        Messages.MAX_LENGTH_MSG = 'Max Length should be {maxLength}';
        Messages.MAX_DATE_MSG = 'Max Date should be {maxDate}';
        Messages.MIN_DATE_MSG = 'Min Date should be {minDate}';
        Messages.MAX_MSG = 'Max value should be {max}';
        Messages.MIN_MSG = 'Min value should be {min}';
        return Messages;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValidationFactory = (function () {
        function ValidationFactory() {
        }
        /**
         * @param {?} question
         * @param {?=} form
         * @return {?}
         */
        ValidationFactory.prototype.getValidators = /**
         * @param {?} question
         * @param {?=} form
         * @return {?}
         */
            function (question, form) {
                var _this = this;
                /** @type {?} */
                var list = [];
                if (question.validators) {
                    _.forEach(question.validators, function (validator) {
                        switch (validator.type) {
                            case 'date':
                                list.push(_this.dateValidator);
                                /** @type {?} */
                                var allowFutureDates = (((validator))).allowFutureDates;
                                if (!allowFutureDates) {
                                    list.push(_this.futureDateRestrictionValidator);
                                }
                                break;
                            case 'js_expression':
                                list.push(_this.jsExpressionValidator.validate(((validator)), form));
                                break;
                            case 'max':
                                list.push(_this.getMaxValueValidator((((validator))).max));
                                break;
                            case 'min':
                                list.push(_this.getMinValueValidator((((validator))).min));
                                break;
                            case 'conditionalRequired':
                                list.push(_this.conditionalRequiredValidator.validate(((validator))));
                                break;
                            case 'conditionalAnswered':
                                list.push(_this.conditionalAnsweredValidator.validate(((validator))));
                                break;
                        }
                    });
                }
                if (question.required && typeof (question.required) === 'string' && question.required === 'true') {
                    list.push(this.requiredValidator);
                }
                return list;
            };
        Object.defineProperty(ValidationFactory.prototype, "conditionalRequiredValidator", {
            get: /**
             * @return {?}
             */ function () {
                return new ConditionalRequiredValidator();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFactory.prototype, "conditionalAnsweredValidator", {
            get: /**
             * @return {?}
             */ function () {
                return new ConditionalAnsweredValidator();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFactory.prototype, "requiredValidator", {
            get: /**
             * @return {?}
             */ function () {
                return new RequiredValidator().validate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFactory.prototype, "dateValidator", {
            get: /**
             * @return {?}
             */ function () {
                return new DateValidator().validate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFactory.prototype, "futureDateRestrictionValidator", {
            get: /**
             * @return {?}
             */ function () {
                return new FutureDateRestrictionValidator().validate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFactory.prototype, "maxDateValidator", {
            get: /**
             * @return {?}
             */ function () {
                return new MaxDateValidator().validate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFactory.prototype, "minDateValidator", {
            get: /**
             * @return {?}
             */ function () {
                return new MinDateValidator().validate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFactory.prototype, "minLengthValidator", {
            get: /**
             * @return {?}
             */ function () {
                return forms.Validators.minLength;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFactory.prototype, "maxLengthValidator", {
            get: /**
             * @return {?}
             */ function () {
                return forms.Validators.maxLength;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} min
         * @return {?}
         */
        ValidationFactory.prototype.getMinValueValidator = /**
         * @param {?} min
         * @return {?}
         */
            function (min) {
                return new MinValidator().validate(min);
            };
        /**
         * @param {?} max
         * @return {?}
         */
        ValidationFactory.prototype.getMaxValueValidator = /**
         * @param {?} max
         * @return {?}
         */
            function (max) {
                return new MaxValidator().validate(max);
            };
        Object.defineProperty(ValidationFactory.prototype, "jsExpressionValidator", {
            get: /**
             * @return {?}
             */ function () {
                return new JsExpressionValidator();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} errors
         * @param {?} question
         * @return {?}
         */
        ValidationFactory.prototype.errors = /**
         * @param {?} errors
         * @param {?} question
         * @return {?}
         */
            function (errors, question) {
                /** @type {?} */
                var messages = [];
                for (var property in errors) {
                    if (errors.hasOwnProperty(property)) {
                        switch (property) {
                            case 'required':
                                messages.push(Messages.REQUIRED_FIELD_MSG);
                                break;
                            case 'date':
                                messages.push(Messages.INVALID_DATE_MSG);
                                break;
                            case 'futureDateRestriction':
                                messages.push(Messages.FUTURE_DATE_RESTRICTION_MSG);
                                break;
                            case 'minlength':
                                messages.push(Messages.MIN_LENGTH_MSG.replace('{minLength}', errors.minlength.requiredLength));
                                break;
                            case 'maxlength':
                                messages.push(Messages.MIN_LENGTH_MSG.replace('{maxLength}', errors.maxlength.requiredLength));
                                break;
                            case 'maxdate':
                                messages.push(Messages.MAX_DATE_MSG.replace('{maxDate}', errors.maxdate.requiredDate));
                                break;
                            case 'mindate':
                                messages.push(Messages.MIN_DATE_MSG.replace('{minDate}', errors.mindate.requiredDate));
                                break;
                            case 'max':
                                messages.push(Messages.MAX_MSG.replace('{max}', errors.max.requiredValue));
                                break;
                            case 'min':
                                messages.push(Messages.MIN_MSG.replace('{min}', errors.min.requiredValue));
                                break;
                            case 'js_expression':
                                messages.push(errors['js_expression'].message);
                                break;
                            case 'conditional_required':
                                messages.push(errors['conditional_required'].message);
                                break;
                            case 'conditional_answered':
                                messages.push(errors['conditional_answered'].message);
                                break;
                        }
                    }
                }
                return messages;
            };
        ValidationFactory.decorators = [
            { type: core.Injectable },
        ];
        ValidationFactory.ctorParameters = function () { return []; };
        return ValidationFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HidersDisablersFactory = (function () {
        function HidersDisablersFactory(expressionRunner, expressionHelper, _debugModeService) {
            this.expressionRunner = expressionRunner;
            this.expressionHelper = expressionHelper;
            this._debugModeService = _debugModeService;
        }
        /**
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
        HidersDisablersFactory.prototype.getJsExpressionDisabler = /**
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
            function (question, control, form) {
                /** @type {?} */
                var runnable = this.expressionRunner.getRunnable(((question.disable)), control, this.expressionHelper.helperFunctions, {}, form);
                /** @type {?} */
                var disabler = {
                    toDisable: false,
                    disableWhenExpression: ((question.disable)),
                    reEvaluateDisablingExpression: function () {
                        /** @type {?} */
                        var result = runnable.run();
                        disabler.toDisable = result;
                    }
                };
                return disabler;
            };
        /**
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
        HidersDisablersFactory.prototype.getJsExpressionHider = /**
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
            function (question, control, form) {
                /** @type {?} */
                var hide = question.hide;
                /** @type {?} */
                var value = typeof hide === 'object' ? this.convertHideObjectToString(hide) : ((question.hide));
                // check if debugging has been enabled
                /** @type {?} */
                var debugEnabled = this._debugModeService.debugEnabled();
                /** @type {?} */
                var runnable = this.expressionRunner.getRunnable(value, control, this.expressionHelper.helperFunctions, {}, form);
                /** @type {?} */
                var hider = {
                    toHide: false,
                    hideWhenExpression: value,
                    reEvaluateHidingExpression: function () {
                        /* if debug is enabled then hiders to be false
                        else run the normal eveluator i.e runnable.run()
                        */
                        if (debugEnabled === true) {
                            hider.toHide = false;
                        }
                        else {
                            hider.toHide = runnable.run();
                        }
                    }
                };
                return hider;
            };
        /**
         * @param {?} hide
         * @return {?}
         */
        HidersDisablersFactory.prototype.convertHideObjectToString = /**
         * @param {?} hide
         * @return {?}
         */
            function (hide) {
                if (hide.value instanceof Array) {
                    /** @type {?} */
                    var arrayStr = '\'' + hide.value.join('\',\'') + '\'';
                    /** @type {?} */
                    var exp = '!arrayContains([' + arrayStr + '],' + hide.field + ')';
                    return exp;
                }
                return '';
            };
        HidersDisablersFactory.decorators = [
            { type: core.Injectable },
        ];
        HidersDisablersFactory.ctorParameters = function () {
            return [
                { type: ExpressionRunner },
                { type: JsExpressionHelper },
                { type: DebugModeService }
            ];
        };
        return HidersDisablersFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AlertsFactory = (function () {
        function AlertsFactory(expressionRunner, expressionHelper) {
            this.expressionRunner = expressionRunner;
            this.expressionHelper = expressionHelper;
        }
        /**
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
        AlertsFactory.prototype.getJsExpressionshowAlert = /**
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
            function (question, control, form) {
                /** @type {?} */
                var runnable = this.expressionRunner.getRunnable(question.alert.alertWhenExpression, control, this.expressionHelper.helperFunctions, {}, form);
                /** @type {?} */
                var showAlert = {
                    shown: false,
                    alertWhenExpression: question.alert.alertWhenExpression,
                    alertMessage: question.alert.message,
                    reEvaluateAlertExpression: function () {
                        /** @type {?} */
                        var result = runnable.run();
                        showAlert.shown = result;
                    }
                };
                return showAlert;
            };
        AlertsFactory.decorators = [
            { type: core.Injectable },
        ];
        AlertsFactory.ctorParameters = function () {
            return [
                { type: ExpressionRunner },
                { type: JsExpressionHelper }
            ];
        };
        return AlertsFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormControlService = (function () {
        function FormControlService(validationFactory, hidersDisablersFactory, alertsFactory) {
            this.alertsFactory = alertsFactory;
            this.controls = [];
            this.validationFactory = validationFactory;
            this.hidersDisablersFactory = hidersDisablersFactory;
        }
        /**
         * @param {?} questionModel
         * @param {?} parentControl
         * @param {?} generateChildren
         * @param {?=} form
         * @return {?}
         */
        FormControlService.prototype.generateControlModel = /**
         * @param {?} questionModel
         * @param {?} parentControl
         * @param {?} generateChildren
         * @param {?=} form
         * @return {?}
         */
            function (questionModel, parentControl, generateChildren, form) {
                if (questionModel instanceof QuestionBase) {
                    if (questionModel.controlType === AfeControlType.AfeFormArray) {
                        return this.generateFormArray(questionModel, parentControl, form);
                    }
                    if (questionModel.controlType === AfeControlType.AfeFormGroup) {
                        return this.generateFormGroupModel(questionModel, generateChildren, parentControl, form);
                    }
                    if (questionModel.controlType === AfeControlType.AfeFormControl) {
                        return this.generateFormControl(questionModel, parentControl, form);
                    }
                }
                return null;
            };
        /**
         * @param {?} question
         * @param {?} generateChildren
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormControlService.prototype.generateFormGroupModel = /**
         * @param {?} question
         * @param {?} generateChildren
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (question, generateChildren, parentControl, form) {
                /** @type {?} */
                var formGroup = new AfeFormGroup({});
                this.wireHidersDisablers(question, formGroup, form);
                this.wireAlerts(question, formGroup, form);
                if (parentControl instanceof AfeFormGroup) {
                    parentControl.setControl(question.key, formGroup);
                }
                /** @type {?} */
                var asGroup = ((question));
                if (generateChildren && asGroup && asGroup.questions.length > 0) {
                    this._generateFormGroupChildrenModel(asGroup.questions, formGroup, form);
                }
                return formGroup;
            };
        /**
         * @param {?} questions
         * @param {?} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormControlService.prototype._generateFormGroupChildrenModel = /**
         * @param {?} questions
         * @param {?} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (questions, parentControl, form) {
                var _this = this;
                if (questions.length > 0) {
                    questions.forEach(function (element) {
                        /** @type {?} */
                        var generated = _this.generateControlModel(element, parentControl, true, form);
                        if (generated !== null) {
                            parentControl.addControl(element.key, generated);
                        }
                    });
                }
            };
        /**
         * @param {?} question
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormControlService.prototype.generateFormArray = /**
         * @param {?} question
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (question, parentControl, form) {
                /** @type {?} */
                var validators = this.validationFactory.getValidators(question, form);
                /** @type {?} */
                var formArray;
                if (validators && validators.length > 0) {
                    formArray = new AfeFormArray([], validators[0]);
                }
                else {
                    formArray = new AfeFormArray([]);
                }
                formArray.uuid = question.key;
                this.wireHidersDisablers(question, formArray, form);
                this.wireAlerts(question, formArray, form);
                if (parentControl instanceof AfeFormGroup) {
                    parentControl.setControl(question.key, formArray);
                }
                return formArray;
            };
        /**
         * @param {?} question
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormControlService.prototype.generateFormControl = /**
         * @param {?} question
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (question, parentControl, form) {
                /** @type {?} */
                var value = question.defaultValue || '';
                /** @type {?} */
                var validators = this.validationFactory.getValidators(question, form);
                /** @type {?} */
                var control = new AfeFormControl(value, validators);
                control.uuid = question.key;
                this.wireHidersDisablers(question, control, form);
                this.wireAlerts(question, control, form);
                this.wireCalculator(question, control, (form ? form.dataSourcesContainer.dataSources : null));
                if (parentControl instanceof AfeFormGroup) {
                    parentControl.setControl(question.key, control);
                }
                return control;
            };
        /**
         * @private
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
        FormControlService.prototype.wireAlerts = /**
         * @private
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
            function (question, control, form) {
                if (question.alert && question.alert !== '') {
                    /** @type {?} */
                    var alert_1 = this.alertsFactory.getJsExpressionshowAlert(question, control, form);
                    control.setAlertFn(alert_1);
                }
            };
        /**
         * @private
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
        FormControlService.prototype.wireHidersDisablers = /**
         * @private
         * @param {?} question
         * @param {?} control
         * @param {?=} form
         * @return {?}
         */
            function (question, control, form) {
                if (question.hide && question.hide !== '') {
                    /** @type {?} */
                    var hider = this.hidersDisablersFactory.getJsExpressionHider(question, control, form);
                    control.setHidingFn(hider);
                }
                if (question.disable && question.disable !== '') {
                    /** @type {?} */
                    var disable = this.hidersDisablersFactory.getJsExpressionDisabler(question, control, form);
                    control.setDisablingFn(disable);
                }
            };
        /**
         * @private
         * @param {?} question
         * @param {?} control
         * @param {?=} dataSource
         * @return {?}
         */
        FormControlService.prototype.wireCalculator = /**
         * @private
         * @param {?} question
         * @param {?} control
         * @param {?=} dataSource
         * @return {?}
         */
            function (question, control, dataSource) {
                if (question.calculateExpression && question.calculateExpression !== '') {
                    /** @type {?} */
                    var helper = new JsExpressionHelper();
                    /** @type {?} */
                    var runner = new ExpressionRunner();
                    /** @type {?} */
                    var runnable = runner.getRunnable(question.calculateExpression, control, helper.helperFunctions, dataSource);
                    // this functionality strictly assumes the calculateExpression function has been defined in the JsExpressionHelper class
                    control.setCalculatorFn(runnable.run);
                }
            };
        FormControlService.decorators = [
            { type: core.Injectable },
        ];
        FormControlService.ctorParameters = function () {
            return [
                { type: ValidationFactory },
                { type: HidersDisablersFactory },
                { type: AlertsFactory }
            ];
        };
        return FormControlService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_STYLES = "a {\n      color: white;\n      text-decoration: none;\n      font-size: 12px;\n      text-transform: uppercase;\n    }\n\n    ul {\n      list-style-type: none;\n      margin: 2px auto;\n      position: relative;\n    }\n\n    li {\n      display: block;\n      padding: 10px 20px;\n      white-space: nowrap;\n      transition: all 0.3s ease-in;\n      border-bottom: 4px solid transparent;\n    }\n\n    li:hover {\n      border-bottom: 4px solid white;\n      opacity: 0.7;\n      cursor: pointer;\n    }\n\n    .owl-theme .owl-controls .owl-nav {\n      position: absolute;\n      width: 100%;\n      top: 0;\n    }\n\n    .owl-theme .owl-controls .owl-nav [class*=\"owl-\"] {\n      position: absolute;\n      background: none;\n      color: black;\n    }\n\n    .owl-theme .owl-controls .owl-nav [class*=\"owl-\"]:hover {\n      background: none;\n      color: black;\n    }\n\n    .owl-theme .owl-controls .owl-nav .owl-next {\n      right: 0;\n      transform: translate(120%);\n    }\n\n    .owl-theme .owl-controls .owl-nav .owl-prev {\n      left: 0;\n      transform: translate(-120%);\n    }\n\n    .slick-initialized .swipe-tab-content {\n      position: relative;\n      min-height: 365px;\n    }\n    @media screen and (min-width: 767px) {\n      .slick-initialized .swipe-tab-content {\n        min-height: 500px;\n      }\n    }\n    .slick-initialized .swipe-tab {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 50px;\n      background: none;\n      border: 0;\n      color: #757575;\n      cursor: pointer;\n      text-align: center;\n      border-bottom: 2px solid rgba(51, 122, 183, 0);\n      transition: all 0.5s;\n    }\n    .slick-initialized .swipe-tab:hover {\n      color: #337AB7;\n    }\n    .slick-initialized .swipe-tab.active-tab {\n      border-bottom-color: #337AB7;\n      color: #337AB7;\n      font-weight: bold;\n    }\n\n    .disabled {\n      opacity: .5;\n      pointer-events: none;\n    }\n\n    .select2-container {\n      margin-top: -5px;\n    }\n\n    .btn {\n      padding: 0px 12px !important;\n    }\n\n    .form-tooltip{\n      color:rgb(51, 122, 183);\n      display: inline-block;\n    }\n    .question-info{\n          opacity:0;\n          height:0px;\n          display: none;\n          transition-duration: opacity 1s ease-out;\n          transtion-delay: 0.5s;\n          padding-top: 2px;\n          padding-bottom: 2px;\n          color: #696969;\n          border-style: ridge;\n          border-width: 1px;\n          border-color: #337ab7;\n          margin-top: 2px;\n    }\n    .hide-info{\n      display:none;\n      height:0px;\n    }\n    .form-tooltip:hover ~ .question-info {\n          display:block;\n          opacity:1;\n          height:auto;\n     }\n    .form-tooltip .tooltipcontent::after {\n          content: \" \";\n          position: absolute;\n          bottom: 100%;  /* At the top of the tooltip */\n          right: 0%;\n          margin-left: -5px;\n          border-width: 5px;\n          border-style: solid;\n          border-top-color: transparent;\n          border-right-color: transparent;\n          border-bottom-color: #337ab7;\n          border-left-color: transparent;\n }\n\n    ng-select.form-control {\n      padding-top: 0;\n      height: auto;\n      padding-bottom: 0;\n    }\n\n .forms-dropdown-menu {\n     max-height: 450px;\n     overflow-y: scroll;\n }\n .no-border {\n  border: 0;\n  box-shadow: none;\n}\n\n    ";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataSources = (function () {
        function DataSources() {
            this._dataSources = {};
        }
        Object.defineProperty(DataSources.prototype, "dataSources", {
            get: /**
             * @return {?}
             */ function () {
                return this._dataSources;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @param {?} dataSource
         * @param {?=} unWrap
         * @return {?}
         */
        DataSources.prototype.registerDataSource = /**
         * @param {?} key
         * @param {?} dataSource
         * @param {?=} unWrap
         * @return {?}
         */
            function (key, dataSource, unWrap) {
                if (unWrap === void 0) {
                    unWrap = false;
                }
                if (unWrap) {
                    // tslint:disable-next-line:forin
                    for (var o in dataSource) {
                        console.log('registering', o, dataSource[o]);
                        this.registerDataSource(o, dataSource[o], false);
                    }
                }
                if (this.dataSources[key]) {
                    console.warn('Overriding registered data source', key);
                }
                this._dataSources[key] = dataSource;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        DataSources.prototype.clearDataSource = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                delete this._dataSources[key];
            };
        DataSources.decorators = [
            { type: core.Injectable },
        ];
        DataSources.ctorParameters = function () { return []; };
        return DataSources;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormRendererComponent = (function () {
        function FormRendererComponent(validationFactory, dataSources, formErrorsService, document) {
            this.validationFactory = validationFactory;
            this.dataSources = dataSources;
            this.formErrorsService = formErrorsService;
            this.document = document;
            this.childComponents = [];
            this.isCollapsed = false;
            this.activeTab = 0;
        }
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.setUpRemoteSelect();
                this.setUpFileUpload();
                if (this.node && this.node.form) {
                    /** @type {?} */
                    var tab = this.node.form.valueProcessingInfo.lastFormTab;
                    if (tab && tab !== this.activeTab) {
                        this.activeTab = tab;
                    }
                }
                if (this.node && this.node.question.renderingType === 'form') {
                    this.formErrorsService.announceErrorField$.subscribe(function (error) {
                        _this.scrollToControl(error);
                    });
                }
                if (this.node && this.node.question.renderingType === 'section') {
                    this.isCollapsed = !(((this.node.question))).isExpanded;
                }
                if (this.parentComponent) {
                    this.parentComponent.addChildComponent(this);
                }
            };
        /**
         * @param {?} child
         * @return {?}
         */
        FormRendererComponent.prototype.addChildComponent = /**
         * @param {?} child
         * @return {?}
         */
            function (child) {
                this.childComponents.push(child);
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.setUpRemoteSelect = /**
         * @return {?}
         */
            function () {
                if (this.node && this.node.question.extras &&
                    this.node.question.renderingType === 'remote-select') {
                    this.dataSource = this.dataSources.dataSources[this.node.question.dataSource];
                    if (this.dataSource && this.node.question.dataSourceOptions) {
                        this.dataSource.dataSourceOptions = this.node.question.dataSourceOptions;
                    }
                }
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.setUpFileUpload = /**
         * @return {?}
         */
            function () {
                if (this.node && this.node.question.extras && this.node.question.renderingType === 'file') {
                    this.dataSource = this.dataSources.dataSources[this.node.question.dataSource];
                    // console.log('Key', this.node.question);
                    // console.log('Data source', this.dataSource);
                }
            };
        /**
         * @param {?} node
         * @return {?}
         */
        FormRendererComponent.prototype.checkSection = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                if (node.question.renderingType === 'section') {
                    /** @type {?} */
                    var groupChildrenHidden_1 = false;
                    /** @type {?} */
                    var allSectionControlsHidden = Object.keys(node.children).every(function (k) {
                        /** @type {?} */
                        var innerNode = node.children[k];
                        if (innerNode instanceof GroupNode) {
                            groupChildrenHidden_1 = Object.keys(innerNode.children).every(function (i) { return innerNode.children[i].control.hidden; });
                        }
                        return node.children[k].control.hidden || groupChildrenHidden_1;
                    });
                    return !allSectionControlsHidden;
                }
                return true;
            };
        /**
         * @param {?} tabNumber
         * @return {?}
         */
        FormRendererComponent.prototype.clickTab = /**
         * @param {?} tabNumber
         * @return {?}
         */
            function (tabNumber) {
                this.activeTab = tabNumber;
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.loadPreviousTab = /**
         * @return {?}
         */
            function () {
                if (!this.isCurrentTabFirst()) {
                    this.clickTab(this.activeTab - 1);
                    document.body.scrollTop = 0;
                }
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.isCurrentTabFirst = /**
         * @return {?}
         */
            function () {
                return this.activeTab === 0;
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.isCurrentTabLast = /**
         * @return {?}
         */
            function () {
                return this.activeTab === this.node.question['questions'].length - 1;
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.loadNextTab = /**
         * @return {?}
         */
            function () {
                if (!this.isCurrentTabLast()) {
                    this.clickTab(this.activeTab + 1);
                    document.body.scrollTop = 0;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormRendererComponent.prototype.tabSelected = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.activeTab = $event;
                this.setPreviousTab();
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.setPreviousTab = /**
         * @return {?}
         */
            function () {
                if (this.node && this.node.form) {
                    this.node.form.valueProcessingInfo['lastFormTab'] = this.activeTab;
                }
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.hasErrors = /**
         * @return {?}
         */
            function () {
                return this.node.control.touched && !this.node.control.valid;
            };
        /**
         * @return {?}
         */
        FormRendererComponent.prototype.errors = /**
         * @return {?}
         */
            function () {
                return this.getErrors(this.node);
            };
        /**
         * @param {?} error
         * @return {?}
         */
        FormRendererComponent.prototype.scrollToControl = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                var _this = this;
                /** @type {?} */
                var tab = +error.split(',')[0];
                /** @type {?} */
                var elSelector = error.split(',')[1] + 'id';
                // the tab components
                /** @type {?} */
                var tabComponent = this.childComponents[tab];
                this.clickTab(tab);
                setTimeout(function () {
                    // expand all sections
                    tabComponent.childComponents.forEach(function (section) {
                        section.isCollapsed = false;
                        setTimeout(function () {
                            /** @type {?} */
                            var element = _this.document.getElementById(elSelector);
                            if (element !== null && element.focus) {
                                element.focus();
                                element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            }
                        }, 100);
                    });
                }, 200);
            };
        /**
         * @param {?} node
         * @return {?}
         */
        FormRendererComponent.prototype.onDateChanged = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                // console.log('Node', node);
                this.node = node;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FormRendererComponent.prototype.upload = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // console.log('Event', event);
                // console.log('Data', this.dataSource);
            };
        /**
         * @param {?} infoId
         * @return {?}
         */
        FormRendererComponent.prototype.toggleInformation = /**
         * @param {?} infoId
         * @return {?}
         */
            function (infoId) {
                /** @type {?} */
                var e = document.getElementById(infoId);
                if (e.style.display === 'block') {
                    e.style.display = 'none';
                }
                else {
                    e.style.display = 'block';
                }
                console.log('InfoId', infoId);
            };
        /**
         * @private
         * @param {?} node
         * @return {?}
         */
        FormRendererComponent.prototype.getErrors = /**
         * @private
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var errors = node.control.errors;
                if (errors) {
                    return this.validationFactory.errors(errors, node.question);
                }
                return [];
            };
        FormRendererComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'form-renderer',
                        template: "<!--CONTAINERS-->\n<div *ngIf=\"node.question.renderingType === 'form'\">\n  <div class=\"dropdown dropdown-tabs forms-dropdown\">\n    <a class=\"btn dropdown-toggle\" data-toggle=\"dropdown\">\n      <i class=\"fa fa-angle-double-down\"></i>\n    </a>\n    <ul class=\"dropdown-menu dropdown-menu-right forms-dropdown-menu\" role=\"menu\" aria-labelledby=\"dropdownMenu\">\n      <li *ngFor=\"let question of node.question.questions; let i = index;\" (click)=\"clickTab(i)\">\n        {{question.label}}\n      </li>\n    </ul>\n  </div>\n  <mat-tab-group (selectedIndexChange)='tabSelected($event)' [selectedIndex]='activeTab'>\n    <mat-tab [label]='question.label' *ngFor=\"let question of node.question.questions; let i = index;\">\n        <div (swipeLeft)='loadNextTab()' (swipeRight)='loadPreviousTab()'>\n          <form-renderer [node]=\"node.children[question.key]\" [parentComponent]=\"this\" [parentGroup]=\"node.control\"></form-renderer>\n        </div>\n    </mat-tab>\n  </mat-tab-group>\n\n  <div style=\"text-align: center;\">\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"loadPreviousTab()\" [ngClass]=\"{disabled: isCurrentTabFirst()}\">&lt;&lt;</button>\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"loadNextTab()\" [ngClass]=\"{disabled: isCurrentTabLast()}\">\n      &gt;&gt;</button>\n  </div>\n</div>\n<div *ngIf=\"node.question.renderingType === 'page'\">\n  <!--<h2>{{node.question.label}}</h2>-->\n  <form-renderer *ngFor=\"let question of node.question.questions\" [parentComponent]=\"this\" [node]=\"node.children[question.key]\"\n    [parentGroup]=\"parentGroup\"></form-renderer>\n</div>\n<div *ngIf=\"node.question.renderingType === 'section' && checkSection(node)\"> \n  <div class=\"panel  panel-primary\">\n    <div class=\"panel-heading\">\n      <button type=\"button\" class=\"btn btn-primary pull-right\" (click)=\"isCollapsed = !isCollapsed\">\n        {{isCollapsed ? 'Show' : 'Hide'}}\n      </button> {{node.question.label}}\n    </div>\n    <div class=\"panel-body\" [collapse]=\"isCollapsed\">\n      <form-renderer *ngFor=\"let question of node.question.questions\" [parentComponent]=\"this\" [node]=\"node.children[question.key]\"\n        [parentGroup]=\"parentGroup\"></form-renderer>\n    </div>\n  </div>\n</div>\n\n<!-- MESSAGES -->\n<div *ngIf=\"node.control && node.control.alert && node.control.alert !== ''\" class=\"alert alert-warning\">\n  <a class=\"close\" data-dismiss=\"alert\">&times;</a> {{node.control.alert}}\n</div>\n\n<!--CONTROLS-->\n\n<div *ngIf=\"node.question.controlType === 0\" class=\"form-group\" [formGroup]=\"parentGroup\" [hidden]=\"node.control.hidden\"\n  [ngClass]=\"{disabled: node.control.disabled}\">\n  <!--LEAF CONTROL-->\n  <div class=\"question-area\">\n    <a class=\"form-tooltip pull-right\" (click)=\"toggleInformation(node.question.extras.id)\" data-placement=\"right\" *ngIf=\"node.question && node.question.extras.questionInfo  && node.question.extras.questionInfo !== ''  && node.question.extras.questionInfo !== ' '\">\n      <i class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></i>\n    </a>\n\n    <label *ngIf=\"node.question.label\" [style.color]=\"hasErrors()? 'red' :''\" class=\"control-label\" [attr.for]=\"node.question.key\">\n      {{node.question.required === true ? '*':''}} {{node.question.label}}\n    </label>\n    <div [ngSwitch]=\"node.question.renderingType\">\n      <select class=\"form-control\" *ngSwitchCase=\"'select'\" [formControlName]=\"node.question.key\" [id]=\"node.question.key + 'id'\">\n        <option *ngFor=\"let o of node.question.options\" [ngValue]=\"o.value\">{{o.label}}\n        </option>\n      </select>\n      <remote-file-upload *ngSwitchCase=\"'file'\" [dataSource]=\"dataSource\" [formControlName]=\"node.question.key\" [id]=\"node.question.key + 'id'\"\n        (fileChanged)=\"upload($event)\">\n      </remote-file-upload>\n      <textarea [placeholder]=\"node.question.placeholder\" [rows]=\"node.question.rows\" class=\"form-control\" *ngSwitchCase=\"'textarea'\"\n        [formControlName]=\"node.question.key\" [id]=\"node.question.key + 'id'\">\n      </textarea>\n      <remote-select *ngSwitchCase=\"'remote-select'\" [placeholder]=\"node.question.placeholder\" tabindex=\"0\" [dataSource]=\"dataSource\"\n        [componentID]=\"node.question.key + 'id'\" [formControlName]=\"node.question.key\" [id]=\"node.question.key + 'id'\"></remote-select>\n  <!--  \n      <date-time-picker *ngSwitchCase=\"'date'\" [showTime]=\"node.question.showTime\" tabindex=\"0\" [weeks]='node.question.extras.questionOptions.weeksList'\n        (onDateChange)=\"onDateChanged(node)\" [showWeeks]=\"node.question.showWeeksAdder\" [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\"></date-time-picker>\n  -->\n\n      <ngx-date-time-picker *ngSwitchCase=\"'date'\" [showTime]=\"node.question.showTime\" [id]=\"node.question.key + 'id'\" \n            [formControlName]=\"node.question.key\" [weeks]='node.question.extras.questionOptions.weeksList'\n            (onDateChange)=\"onDateChanged(node)\" [showWeeks]=\"node.question.showWeeksAdder\" ></ngx-date-time-picker>\n      <ng-select *ngSwitchCase=\"'multi-select'\" [style.height]=\"'auto'\"  [style.overflow-x]=\"'hidden'\" tabindex=\"0\" [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\" [options]=\"node.question.options\" [multiple]=\"true\">\n      </ng-select>\n      <ng-select *ngSwitchCase=\"'single-select'\" [style.height]='auto' tabindex=\"0\" [formControlName]=\"node.question.key\"\n      [id]=\"node.question.key + 'id'\" [options]=\"node.question.options\" [multiple]=\"false\">\n      </ng-select>\n      <input class=\"form-control\" *ngSwitchCase=\"'number'\" [formControlName]=\"node.question.key \" [attr.placeholder]=\"node.question.placeholder \"\n        [type]=\"'number'\" [id]=\"node.question.key + 'id' \" [step]=\"'any'\" [min]=\"node.question.extras.questionOptions.min\"\n        [max]=\"node.question.extras.questionOptions.max\">\n      <input class=\"form-control\" *ngSwitchDefault [formControlName]=\"node.question.key \" [attr.placeholder]=\"node.question.placeholder \"\n        [type]=\"node.question.renderingType\" [id]=\"node.question.key + 'id' \">\n\n      <div *ngSwitchCase=\"'radio'\">\n        <div *ngFor=\"let o of node.question.options\">\n          <label class=\"form-control no-border\">\n            <input type=\"radio\" [formControlName]=\"node.question.key\" [id]=\"node.question.key + 'id'\" [value]=\"o.value\"> {{ o.label }}\n          </label>\n        </div>\n      </div>\n\n      <div *ngSwitchCase=\"'checkbox'\">\n        <checkbox [id]=\"node.question.key + 'id'\" [formControlName]=\"node.question.key\" [options]=\"node.question.options\"></checkbox>\n      </div>\n\n      <div *ngIf=\"node.question.enableHistoricalValue && node.question.historicalDisplay\">\n        <div class=\"container-fluid\">\n          <div class=\"row\">\n            <div class=\"col-xs-9\">\n              <span class=\"text-warning\">Previous Value: </span>\n              <strong>{{node.question.historicalDisplay?.text}}</strong>\n              <span *ngIf=\"node.question.showHistoricalValueDate\">\n                <span> | </span>\n                <strong class=\"text-primary\">{{node.question.historicalDisplay?._date}}</strong>\n              </span>\n\n            </div>\n            <button type=\"button\" [node]=\"node\" [name]=\"'historyValue'\" class=\"btn btn-primary btn-small col-xs-3\">Use Value\n            </button>\n          </div>\n        </div>\n      </div>\n      <appointments-overview [node]=\"node\"></appointments-overview>\n      <div *ngIf=\"hasErrors() \">\n        <p *ngFor=\"let e of errors() \">\n          <span class=\"text-danger \">{{e}}</span>\n        </p>\n      </div>\n    </div>\n\n    <div class=\"question-info col-md-12 col-lg-12 col-sm-12\" id=\"{{node.question.extras.id}}\" *ngIf=\"node.question && node.question.extras.questionInfo  && node.question.extras.questionInfo !== ''  && node.question.extras.questionInfo !== ' '\">\n      {{node.question.extras.questionInfo}}\n    </div>\n\n  </div>\n</div>\n<div *ngIf=\"node.question.controlType === 1\" [hidden]=\"node.control.hidden\" [ngClass]=\"{disabled: node.control.disabled}\">\n\n\n  <!--ARRAY CONTROL-->\n  <div [ngSwitch]=\"node.question.renderingType \">\n    <div class='well' style=\"padding: 2px; \" *ngSwitchCase=\" 'repeating' \">\n      <h4 style=\"margin: 2px; font-weight: bold;\">{{node.question.label}}</h4>\n      <hr style=\"margin-left:-2px; margin-right:-2px; margin-bottom:4px; margin-top:8px; border-width:2px;\" />\n      <div [ngSwitch]=\"node.question.extras.type\">\n        <div *ngSwitchCase=\"'testOrder'\">\n          <div *ngFor=\"let child of node.children; let i=index \">\n            <form-renderer *ngFor=\"let question of child.question.questions \" [parentComponent]=\"this\" [node]=\"child.children[question.key]\n            \" [parentGroup]=\"child.control \"></form-renderer>\n            <div>{{child.orderNumber}}</div>\n            <button type=\"button \" class='btn btn-sm btn-danger' (click)=\"node.removeAt(i) \">Remove</button>\n            <br/>\n            <hr style=\"margin-left:-2px; margin-right:-2px; margin-bottom:4px; margin-top:8px; border-width:1px;\" />\n          </div>\n        </div>\n\n        <div *ngSwitchCase=\"'obsGroup'\" style=\"margin-bottom:20px;\">\n          <div *ngFor=\"let child of node.children; let i=index \">\n            <form-renderer *ngFor=\"let question of child.question.questions \" [parentComponent]=\"this\" [node]=\"child.children[question.key]\n            \" [parentGroup]=\"child.control \"></form-renderer>\n            <button type=\"button \" class='btn btn-sm btn-danger' (click)=\"node.removeAt(i) \">Remove</button>\n            <br/>\n            <hr style=\"margin-left:-2px; margin-right:-2px; margin-bottom:4px; margin-top:8px; border-width:1px;\" />\n          </div>\n        </div>\n      </div>\n      <button type=\"button \" class='btn btn-primary' (click)=\"node.createChildNode() \">Add</button>\n    </div>\n  </div>\n\n</div>\n<div *ngIf=\"node.question.controlType === 2\" [hidden]=\"node.control.hidden\" [ngClass]=\"{disabled: node.control.disabled}\">\n\n  <!--GROUP-->\n  <div [ngSwitch]=\"node.question.renderingType \">\n    <div *ngSwitchCase=\" 'group' \">\n      <form-renderer *ngFor=\"let question of node.question.questions \" [parentComponent]=\"this\" [node]=\"node.children[question.key]\n            \" [parentGroup]=\"node.control \"></form-renderer>\n    </div>\n    <div *ngSwitchCase=\" 'field-set' \" style=\"border: 1px solid #eeeeee; padding: 2px; margin: 2px;\">\n      <form-renderer *ngFor=\"let question of node.question.questions \" [parentComponent]=\"this\" [node]=\"node.children[question.key]\n            \" [parentGroup]=\"node.control \"></form-renderer>\n    </div>\n  </div>\n\n</div>\n",
                        styles: ['../../style/app.css', DEFAULT_STYLES]
                    },] },
        ];
        FormRendererComponent.ctorParameters = function () {
            return [
                { type: ValidationFactory },
                { type: DataSources },
                { type: FormErrorsService },
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        FormRendererComponent.propDecorators = {
            parentComponent: [{ type: core.Input }],
            node: [{ type: core.Input }],
            parentGroup: [{ type: core.Input }]
        };
        return FormRendererComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ErrorRendererComponent = (function () {
        function ErrorRendererComponent(validationFactory, formErrorsService) {
            this.validationFactory = validationFactory;
            this.formErrorsService = formErrorsService;
        }
        /**
         * @return {?}
         */
        ErrorRendererComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ErrorRendererComponent.prototype.showErrors = /**
         * @return {?}
         */
            function () {
                return !this.form.valid && this.form.showErrors;
            };
        Object.defineProperty(ErrorRendererComponent.prototype, "errorNodes", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var invalidControls = this.form.markInvalidControls(this.form.rootNode, []);
                return invalidControls;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} node
         * @return {?}
         */
        ErrorRendererComponent.prototype.getControlError = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var errors = node.control.errors;
                if (errors) {
                    return this.validationFactory.errors(errors, node.question);
                }
                return [];
            };
        /**
         * @param {?} errorNode
         * @return {?}
         */
        ErrorRendererComponent.prototype.announceErrorField = /**
         * @param {?} errorNode
         * @return {?}
         */
            function (errorNode) {
                var _this = this;
                /** @type {?} */
                var nodes = this.form.searchNodeByQuestionId(errorNode.path.substring(0, errorNode.path.indexOf('.')));
                _.forEach(nodes, function (node) {
                    if (node.question.renderingType === 'page') {
                        /** @type {?} */
                        var pageIndex = _this.getPageIndex(node);
                        _this.formErrorsService.announceErrorField(pageIndex + ',' + errorNode.question.key);
                    }
                });
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ErrorRendererComponent.prototype.getPageIndex = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var questionGroup = ((this.form.rootNode.question));
                return questionGroup.questions.indexOf(node.question);
            };
        ErrorRendererComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'error-renderer',
                        template: "<div *ngIf=\"showErrors()\" class=\"container\">\n<ul class=\"list-group\">\n  <li class=\"list-group-item list-group-item-warning\" *ngFor=\"let errorNode of errorNodes\" (click)=announceErrorField(errorNode)>\n    <div class=\"error\" *ngIf=\"errorNode.control.valid == false\">\n      <h4>{{errorNode.question.label}}</h4>\n      <span class=\"text-danger\"> {{getControlError(errorNode)}}</span>\n    </div>\n  </li>\n</ul>\n</div>\n",
                        styles: ["ul{list-style:none}.list-group-item{padding:2px 15px;cursor:pointer}ul li:hover{background-color:#fff}h4{margin-top:7px;margin-bottom:7px}"]
                    },] },
        ];
        ErrorRendererComponent.ctorParameters = function () {
            return [
                { type: ValidationFactory },
                { type: FormErrorsService }
            ];
        };
        ErrorRendererComponent.propDecorators = {
            form: [{ type: core.Input }]
        };
        return ErrorRendererComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HistoricalFieldHelperService = (function () {
        function HistoricalFieldHelperService() {
        }
        /**
         * @param {?} question
         * @param {?} valueProperty
         * @param {?} displayProperty
         * @return {?}
         */
        HistoricalFieldHelperService.prototype.getDisplayTextFromOptions = /**
         * @param {?} question
         * @param {?} valueProperty
         * @param {?} displayProperty
         * @return {?}
         */
            function (question, valueProperty, displayProperty) {
                /** @type {?} */
                var displayText = '';
                /** @type {?} */
                var historicalValue = question.historicalDataValue;
                if (_.isArray(historicalValue.value)) {
                    /** @type {?} */
                    var valueConverted_1 = 0;
                    _.each(historicalValue.value, function (val) {
                        _.each(question.options, function (option) {
                            if (option[valueProperty] === val) {
                                if (valueConverted_1 === 0) {
                                    displayText = displayText + option[displayProperty];
                                }
                                else {
                                    displayText = displayText + ', ' + option[displayProperty];
                                }
                                valueConverted_1++;
                            }
                        });
                    });
                }
                else {
                    _.each(question.options, function (option) {
                        if (option[valueProperty] === historicalValue.value) {
                            displayText = option[displayProperty];
                        }
                    });
                }
                return displayText;
            };
        return HistoricalFieldHelperService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HistoricalValueDirective = (function () {
        function HistoricalValueDirective(historicalFieldHelper) {
            this.historicalFieldHelper = historicalFieldHelper;
            this._nodeChange = new core.EventEmitter();
        }
        /**
         * @param {?} e
         * @return {?}
         */
        HistoricalValueDirective.prototype.setValue = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.target.name === 'historyValue') {
                    if (this._node && (!this.compareString(this._node.question.renderingType, 'page')
                        || !this.compareString(this._node.question.renderingType, 'section'))) {
                        this._node.control.setValue(this._node.question.historicalDataValue.value);
                        this._node.question['historicalValue'] = this._node.question.historicalDataValue;
                        e.stopPropagation();
                        this._nodeChange.emit(this._node);
                    }
                }
            };
        /**
         * @private
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        HistoricalValueDirective.prototype.compareString = /**
         * @private
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                if (a === b) {
                    return true;
                }
                else {
                    return false;
                }
            };
        Object.defineProperty(HistoricalValueDirective.prototype, "node", {
            set: /**
             * @param {?} node
             * @return {?}
             */ function (node) {
                if (node) {
                    this._node = node;
                    if (this._node.question.enableHistoricalValue && !_.isUndefined(this._node.question.historicalDataValue)) {
                        /** @type {?} */
                        var display = { text: '', _date: '' };
                        if ((this._node.question.renderingType === 'select'
                            || this._node.question.renderingType === 'multi-select'
                            || this._node.question.renderingType === 'single-select')) {
                            display.text = this.historicalFieldHelper.getDisplayTextFromOptions(this._node.question, 'value', 'label');
                            display._date = this._node.question.historicalDataValue.valueDate;
                            this._node.question['historicalDisplay'] = display;
                        }
                        else if (!_.isUndefined(this._node.question.historicalDataValue)) {
                            display.text = this._node.question.historicalDataValue.value;
                            display._date = this._node.question.historicalDataValue.valueDate;
                            this._node.question['historicalDisplay'] = display;
                        }
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        HistoricalValueDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[node]"
                    },] },
        ];
        HistoricalValueDirective.ctorParameters = function () {
            return [
                { type: HistoricalFieldHelperService }
            ];
        };
        HistoricalValueDirective.propDecorators = {
            _node: [{ type: core.Input }],
            _nodeChange: [{ type: core.Output }],
            setValue: [{ type: core.HostListener, args: ['click', ['$event'],] }],
            node: [{ type: core.Input }]
        };
        return HistoricalValueDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var STYLE = "\nng-select {\n  display: inline-block;\n  margin: 0;\n  position: relative;\n  vertical-align: middle;\n  width: 100%;\n}\nng-select * {\n  box-sizing: border-box;\n  font-family: Sans-Serif;\n}\nng-select > div {\n  border: 1px solid #ddd;\n  box-sizing: border-box;\n  cursor: pointer;\n  user-select: none;\n  width: 100%;\n}\nng-select > div.disabled {\n  background-color: #eee;\n  color: #aaa;\n  cursor: default;\n  pointer-events: none;\n}\nng-select > div > div.single {\n  display: flex;\n  height: 30px;\n  width: 100%;\n}\nng-select > div > div.single > div.value,\nng-select > div > div.single > div.placeholder {\n  flex: 1;\n  line-height: 30px;\n  overflow: hidden;\n  padding: 0 10px;\n  white-space: nowrap;\n}\nng-select > div > div.single > div.placeholder {\n  color: #a9a9a9;\n}\nng-select > div > div.single > div.clear,\nng-select > div > div.single > div.toggle {\n  color: #aaa;\n  line-height: 30px;\n  text-align: center;\n  width: 30px;\n}\nng-select > div > div.single > div.clear:hover,\nng-select > div > div.single > div.toggle:hover {\n  background-color: #ececec;\n}\nng-select > div > div.single > div.clear {\n  font-size: 18px;\n}\nng-select > div > div.single > div.toggle {\n  font-size: 14px;\n}\nng-select > div > div.multiple {\n  display: flex;\n  flex-flow: row wrap;\n  height: 100%;\n  min-height: 30px;\n  padding: 0 10px;\n  width: 100%;\n}\nng-select > div > div.multiple > div.option {\n  background-color: #eee;\n  border: 1px solid #aaa;\n  border-radius: 4px;\n  color: #333;\n  cursor: default;\n  display: inline-block;\n  flex-shrink: 0;\n  font-size: 14px;\n  line-height: 22px;\n  margin: 3px 5px 3px 0;\n  padding: 0 4px;\n}\nng-select > div > div.multiple > div.option span.deselect-option {\n  color: #aaa;\n  cursor: pointer;\n  font-size: 14px;\n  height: 20px;\n  line-height: 20px;\n}\nng-select > div > div.multiple > div.option span.deselect-option:hover {\n  color: #555;\n}\nng-select > div > div.multiple input {\n  background-color: transparent;\n  border: none;\n  height: 30px;\n  line-height: 30px;\n  padding: 0;\n}\nng-select > div > div.multiple input:focus {\n  outline: none;\n}\n";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Option = (function () {
        function Option(value, label) {
            this.value = value;
            this.label = label;
            this.disabled = false;
            this.highlighted = false;
            this.selected = false;
            this.shown = true;
        }
        /**
         * @return {?}
         */
        Option.prototype.show = /**
         * @return {?}
         */
            function () {
                this.shown = true;
            };
        /**
         * @return {?}
         */
        Option.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.shown = false;
            };
        /**
         * @return {?}
         */
        Option.prototype.disable = /**
         * @return {?}
         */
            function () {
                this.disabled = true;
            };
        /**
         * @return {?}
         */
        Option.prototype.enable = /**
         * @return {?}
         */
            function () {
                this.disabled = false;
            };
        /**
         * @return {?}
         */
        Option.prototype.undecoratedCopy = /**
         * @return {?}
         */
            function () {
                return {
                    label: this.label,
                    value: this.value
                };
            };
        return Option;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Diacritics = (function () {
        function Diacritics() {
        }
        /**
         * @param {?} text
         * @return {?}
         */
        Diacritics.strip = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                var _this = this;
                /** @type {?} */
                var match = function (a) {
                    return _this.DIACRITICS[a] || a;
                };
                if (text) {
                    return text.replace(/[^\u0000-\u007E]/g, match);
                }
                else {
                    return '';
                }
            };
        Diacritics.DIACRITICS = {
            '\u24B6': 'A',
            '\uFF21': 'A',
            '\u00C0': 'A',
            '\u00C1': 'A',
            '\u00C2': 'A',
            '\u1EA6': 'A',
            '\u1EA4': 'A',
            '\u1EAA': 'A',
            '\u1EA8': 'A',
            '\u00C3': 'A',
            '\u0100': 'A',
            '\u0102': 'A',
            '\u1EB0': 'A',
            '\u1EAE': 'A',
            '\u1EB4': 'A',
            '\u1EB2': 'A',
            '\u0226': 'A',
            '\u01E0': 'A',
            '\u00C4': 'A',
            '\u01DE': 'A',
            '\u1EA2': 'A',
            '\u00C5': 'A',
            '\u01FA': 'A',
            '\u01CD': 'A',
            '\u0200': 'A',
            '\u0202': 'A',
            '\u1EA0': 'A',
            '\u1EAC': 'A',
            '\u1EB6': 'A',
            '\u1E00': 'A',
            '\u0104': 'A',
            '\u023A': 'A',
            '\u2C6F': 'A',
            '\uA732': 'AA',
            '\u00C6': 'AE',
            '\u01FC': 'AE',
            '\u01E2': 'AE',
            '\uA734': 'AO',
            '\uA736': 'AU',
            '\uA738': 'AV',
            '\uA73A': 'AV',
            '\uA73C': 'AY',
            '\u24B7': 'B',
            '\uFF22': 'B',
            '\u1E02': 'B',
            '\u1E04': 'B',
            '\u1E06': 'B',
            '\u0243': 'B',
            '\u0182': 'B',
            '\u0181': 'B',
            '\u24B8': 'C',
            '\uFF23': 'C',
            '\u0106': 'C',
            '\u0108': 'C',
            '\u010A': 'C',
            '\u010C': 'C',
            '\u00C7': 'C',
            '\u1E08': 'C',
            '\u0187': 'C',
            '\u023B': 'C',
            '\uA73E': 'C',
            '\u24B9': 'D',
            '\uFF24': 'D',
            '\u1E0A': 'D',
            '\u010E': 'D',
            '\u1E0C': 'D',
            '\u1E10': 'D',
            '\u1E12': 'D',
            '\u1E0E': 'D',
            '\u0110': 'D',
            '\u018B': 'D',
            '\u018A': 'D',
            '\u0189': 'D',
            '\uA779': 'D',
            '\u01F1': 'DZ',
            '\u01C4': 'DZ',
            '\u01F2': 'Dz',
            '\u01C5': 'Dz',
            '\u24BA': 'E',
            '\uFF25': 'E',
            '\u00C8': 'E',
            '\u00C9': 'E',
            '\u00CA': 'E',
            '\u1EC0': 'E',
            '\u1EBE': 'E',
            '\u1EC4': 'E',
            '\u1EC2': 'E',
            '\u1EBC': 'E',
            '\u0112': 'E',
            '\u1E14': 'E',
            '\u1E16': 'E',
            '\u0114': 'E',
            '\u0116': 'E',
            '\u00CB': 'E',
            '\u1EBA': 'E',
            '\u011A': 'E',
            '\u0204': 'E',
            '\u0206': 'E',
            '\u1EB8': 'E',
            '\u1EC6': 'E',
            '\u0228': 'E',
            '\u1E1C': 'E',
            '\u0118': 'E',
            '\u1E18': 'E',
            '\u1E1A': 'E',
            '\u0190': 'E',
            '\u018E': 'E',
            '\u24BB': 'F',
            '\uFF26': 'F',
            '\u1E1E': 'F',
            '\u0191': 'F',
            '\uA77B': 'F',
            '\u24BC': 'G',
            '\uFF27': 'G',
            '\u01F4': 'G',
            '\u011C': 'G',
            '\u1E20': 'G',
            '\u011E': 'G',
            '\u0120': 'G',
            '\u01E6': 'G',
            '\u0122': 'G',
            '\u01E4': 'G',
            '\u0193': 'G',
            '\uA7A0': 'G',
            '\uA77D': 'G',
            '\uA77E': 'G',
            '\u24BD': 'H',
            '\uFF28': 'H',
            '\u0124': 'H',
            '\u1E22': 'H',
            '\u1E26': 'H',
            '\u021E': 'H',
            '\u1E24': 'H',
            '\u1E28': 'H',
            '\u1E2A': 'H',
            '\u0126': 'H',
            '\u2C67': 'H',
            '\u2C75': 'H',
            '\uA78D': 'H',
            '\u24BE': 'I',
            '\uFF29': 'I',
            '\u00CC': 'I',
            '\u00CD': 'I',
            '\u00CE': 'I',
            '\u0128': 'I',
            '\u012A': 'I',
            '\u012C': 'I',
            '\u0130': 'I',
            '\u00CF': 'I',
            '\u1E2E': 'I',
            '\u1EC8': 'I',
            '\u01CF': 'I',
            '\u0208': 'I',
            '\u020A': 'I',
            '\u1ECA': 'I',
            '\u012E': 'I',
            '\u1E2C': 'I',
            '\u0197': 'I',
            '\u24BF': 'J',
            '\uFF2A': 'J',
            '\u0134': 'J',
            '\u0248': 'J',
            '\u24C0': 'K',
            '\uFF2B': 'K',
            '\u1E30': 'K',
            '\u01E8': 'K',
            '\u1E32': 'K',
            '\u0136': 'K',
            '\u1E34': 'K',
            '\u0198': 'K',
            '\u2C69': 'K',
            '\uA740': 'K',
            '\uA742': 'K',
            '\uA744': 'K',
            '\uA7A2': 'K',
            '\u24C1': 'L',
            '\uFF2C': 'L',
            '\u013F': 'L',
            '\u0139': 'L',
            '\u013D': 'L',
            '\u1E36': 'L',
            '\u1E38': 'L',
            '\u013B': 'L',
            '\u1E3C': 'L',
            '\u1E3A': 'L',
            '\u0141': 'L',
            '\u023D': 'L',
            '\u2C62': 'L',
            '\u2C60': 'L',
            '\uA748': 'L',
            '\uA746': 'L',
            '\uA780': 'L',
            '\u01C7': 'LJ',
            '\u01C8': 'Lj',
            '\u24C2': 'M',
            '\uFF2D': 'M',
            '\u1E3E': 'M',
            '\u1E40': 'M',
            '\u1E42': 'M',
            '\u2C6E': 'M',
            '\u019C': 'M',
            '\u24C3': 'N',
            '\uFF2E': 'N',
            '\u01F8': 'N',
            '\u0143': 'N',
            '\u00D1': 'N',
            '\u1E44': 'N',
            '\u0147': 'N',
            '\u1E46': 'N',
            '\u0145': 'N',
            '\u1E4A': 'N',
            '\u1E48': 'N',
            '\u0220': 'N',
            '\u019D': 'N',
            '\uA790': 'N',
            '\uA7A4': 'N',
            '\u01CA': 'NJ',
            '\u01CB': 'Nj',
            '\u24C4': 'O',
            '\uFF2F': 'O',
            '\u00D2': 'O',
            '\u00D3': 'O',
            '\u00D4': 'O',
            '\u1ED2': 'O',
            '\u1ED0': 'O',
            '\u1ED6': 'O',
            '\u1ED4': 'O',
            '\u00D5': 'O',
            '\u1E4C': 'O',
            '\u022C': 'O',
            '\u1E4E': 'O',
            '\u014C': 'O',
            '\u1E50': 'O',
            '\u1E52': 'O',
            '\u014E': 'O',
            '\u022E': 'O',
            '\u0230': 'O',
            '\u00D6': 'O',
            '\u022A': 'O',
            '\u1ECE': 'O',
            '\u0150': 'O',
            '\u01D1': 'O',
            '\u020C': 'O',
            '\u020E': 'O',
            '\u01A0': 'O',
            '\u1EDC': 'O',
            '\u1EDA': 'O',
            '\u1EE0': 'O',
            '\u1EDE': 'O',
            '\u1EE2': 'O',
            '\u1ECC': 'O',
            '\u1ED8': 'O',
            '\u01EA': 'O',
            '\u01EC': 'O',
            '\u00D8': 'O',
            '\u01FE': 'O',
            '\u0186': 'O',
            '\u019F': 'O',
            '\uA74A': 'O',
            '\uA74C': 'O',
            '\u01A2': 'OI',
            '\uA74E': 'OO',
            '\u0222': 'OU',
            '\u24C5': 'P',
            '\uFF30': 'P',
            '\u1E54': 'P',
            '\u1E56': 'P',
            '\u01A4': 'P',
            '\u2C63': 'P',
            '\uA750': 'P',
            '\uA752': 'P',
            '\uA754': 'P',
            '\u24C6': 'Q',
            '\uFF31': 'Q',
            '\uA756': 'Q',
            '\uA758': 'Q',
            '\u024A': 'Q',
            '\u24C7': 'R',
            '\uFF32': 'R',
            '\u0154': 'R',
            '\u1E58': 'R',
            '\u0158': 'R',
            '\u0210': 'R',
            '\u0212': 'R',
            '\u1E5A': 'R',
            '\u1E5C': 'R',
            '\u0156': 'R',
            '\u1E5E': 'R',
            '\u024C': 'R',
            '\u2C64': 'R',
            '\uA75A': 'R',
            '\uA7A6': 'R',
            '\uA782': 'R',
            '\u24C8': 'S',
            '\uFF33': 'S',
            '\u1E9E': 'S',
            '\u015A': 'S',
            '\u1E64': 'S',
            '\u015C': 'S',
            '\u1E60': 'S',
            '\u0160': 'S',
            '\u1E66': 'S',
            '\u1E62': 'S',
            '\u1E68': 'S',
            '\u0218': 'S',
            '\u015E': 'S',
            '\u2C7E': 'S',
            '\uA7A8': 'S',
            '\uA784': 'S',
            '\u24C9': 'T',
            '\uFF34': 'T',
            '\u1E6A': 'T',
            '\u0164': 'T',
            '\u1E6C': 'T',
            '\u021A': 'T',
            '\u0162': 'T',
            '\u1E70': 'T',
            '\u1E6E': 'T',
            '\u0166': 'T',
            '\u01AC': 'T',
            '\u01AE': 'T',
            '\u023E': 'T',
            '\uA786': 'T',
            '\uA728': 'TZ',
            '\u24CA': 'U',
            '\uFF35': 'U',
            '\u00D9': 'U',
            '\u00DA': 'U',
            '\u00DB': 'U',
            '\u0168': 'U',
            '\u1E78': 'U',
            '\u016A': 'U',
            '\u1E7A': 'U',
            '\u016C': 'U',
            '\u00DC': 'U',
            '\u01DB': 'U',
            '\u01D7': 'U',
            '\u01D5': 'U',
            '\u01D9': 'U',
            '\u1EE6': 'U',
            '\u016E': 'U',
            '\u0170': 'U',
            '\u01D3': 'U',
            '\u0214': 'U',
            '\u0216': 'U',
            '\u01AF': 'U',
            '\u1EEA': 'U',
            '\u1EE8': 'U',
            '\u1EEE': 'U',
            '\u1EEC': 'U',
            '\u1EF0': 'U',
            '\u1EE4': 'U',
            '\u1E72': 'U',
            '\u0172': 'U',
            '\u1E76': 'U',
            '\u1E74': 'U',
            '\u0244': 'U',
            '\u24CB': 'V',
            '\uFF36': 'V',
            '\u1E7C': 'V',
            '\u1E7E': 'V',
            '\u01B2': 'V',
            '\uA75E': 'V',
            '\u0245': 'V',
            '\uA760': 'VY',
            '\u24CC': 'W',
            '\uFF37': 'W',
            '\u1E80': 'W',
            '\u1E82': 'W',
            '\u0174': 'W',
            '\u1E86': 'W',
            '\u1E84': 'W',
            '\u1E88': 'W',
            '\u2C72': 'W',
            '\u24CD': 'X',
            '\uFF38': 'X',
            '\u1E8A': 'X',
            '\u1E8C': 'X',
            '\u24CE': 'Y',
            '\uFF39': 'Y',
            '\u1EF2': 'Y',
            '\u00DD': 'Y',
            '\u0176': 'Y',
            '\u1EF8': 'Y',
            '\u0232': 'Y',
            '\u1E8E': 'Y',
            '\u0178': 'Y',
            '\u1EF6': 'Y',
            '\u1EF4': 'Y',
            '\u01B3': 'Y',
            '\u024E': 'Y',
            '\u1EFE': 'Y',
            '\u24CF': 'Z',
            '\uFF3A': 'Z',
            '\u0179': 'Z',
            '\u1E90': 'Z',
            '\u017B': 'Z',
            '\u017D': 'Z',
            '\u1E92': 'Z',
            '\u1E94': 'Z',
            '\u01B5': 'Z',
            '\u0224': 'Z',
            '\u2C7F': 'Z',
            '\u2C6B': 'Z',
            '\uA762': 'Z',
            '\u24D0': 'a',
            '\uFF41': 'a',
            '\u1E9A': 'a',
            '\u00E0': 'a',
            '\u00E1': 'a',
            '\u00E2': 'a',
            '\u1EA7': 'a',
            '\u1EA5': 'a',
            '\u1EAB': 'a',
            '\u1EA9': 'a',
            '\u00E3': 'a',
            '\u0101': 'a',
            '\u0103': 'a',
            '\u1EB1': 'a',
            '\u1EAF': 'a',
            '\u1EB5': 'a',
            '\u1EB3': 'a',
            '\u0227': 'a',
            '\u01E1': 'a',
            '\u00E4': 'a',
            '\u01DF': 'a',
            '\u1EA3': 'a',
            '\u00E5': 'a',
            '\u01FB': 'a',
            '\u01CE': 'a',
            '\u0201': 'a',
            '\u0203': 'a',
            '\u1EA1': 'a',
            '\u1EAD': 'a',
            '\u1EB7': 'a',
            '\u1E01': 'a',
            '\u0105': 'a',
            '\u2C65': 'a',
            '\u0250': 'a',
            '\uA733': 'aa',
            '\u00E6': 'ae',
            '\u01FD': 'ae',
            '\u01E3': 'ae',
            '\uA735': 'ao',
            '\uA737': 'au',
            '\uA739': 'av',
            '\uA73B': 'av',
            '\uA73D': 'ay',
            '\u24D1': 'b',
            '\uFF42': 'b',
            '\u1E03': 'b',
            '\u1E05': 'b',
            '\u1E07': 'b',
            '\u0180': 'b',
            '\u0183': 'b',
            '\u0253': 'b',
            '\u24D2': 'c',
            '\uFF43': 'c',
            '\u0107': 'c',
            '\u0109': 'c',
            '\u010B': 'c',
            '\u010D': 'c',
            '\u00E7': 'c',
            '\u1E09': 'c',
            '\u0188': 'c',
            '\u023C': 'c',
            '\uA73F': 'c',
            '\u2184': 'c',
            '\u24D3': 'd',
            '\uFF44': 'd',
            '\u1E0B': 'd',
            '\u010F': 'd',
            '\u1E0D': 'd',
            '\u1E11': 'd',
            '\u1E13': 'd',
            '\u1E0F': 'd',
            '\u0111': 'd',
            '\u018C': 'd',
            '\u0256': 'd',
            '\u0257': 'd',
            '\uA77A': 'd',
            '\u01F3': 'dz',
            '\u01C6': 'dz',
            '\u24D4': 'e',
            '\uFF45': 'e',
            '\u00E8': 'e',
            '\u00E9': 'e',
            '\u00EA': 'e',
            '\u1EC1': 'e',
            '\u1EBF': 'e',
            '\u1EC5': 'e',
            '\u1EC3': 'e',
            '\u1EBD': 'e',
            '\u0113': 'e',
            '\u1E15': 'e',
            '\u1E17': 'e',
            '\u0115': 'e',
            '\u0117': 'e',
            '\u00EB': 'e',
            '\u1EBB': 'e',
            '\u011B': 'e',
            '\u0205': 'e',
            '\u0207': 'e',
            '\u1EB9': 'e',
            '\u1EC7': 'e',
            '\u0229': 'e',
            '\u1E1D': 'e',
            '\u0119': 'e',
            '\u1E19': 'e',
            '\u1E1B': 'e',
            '\u0247': 'e',
            '\u025B': 'e',
            '\u01DD': 'e',
            '\u24D5': 'f',
            '\uFF46': 'f',
            '\u1E1F': 'f',
            '\u0192': 'f',
            '\uA77C': 'f',
            '\u24D6': 'g',
            '\uFF47': 'g',
            '\u01F5': 'g',
            '\u011D': 'g',
            '\u1E21': 'g',
            '\u011F': 'g',
            '\u0121': 'g',
            '\u01E7': 'g',
            '\u0123': 'g',
            '\u01E5': 'g',
            '\u0260': 'g',
            '\uA7A1': 'g',
            '\u1D79': 'g',
            '\uA77F': 'g',
            '\u24D7': 'h',
            '\uFF48': 'h',
            '\u0125': 'h',
            '\u1E23': 'h',
            '\u1E27': 'h',
            '\u021F': 'h',
            '\u1E25': 'h',
            '\u1E29': 'h',
            '\u1E2B': 'h',
            '\u1E96': 'h',
            '\u0127': 'h',
            '\u2C68': 'h',
            '\u2C76': 'h',
            '\u0265': 'h',
            '\u0195': 'hv',
            '\u24D8': 'i',
            '\uFF49': 'i',
            '\u00EC': 'i',
            '\u00ED': 'i',
            '\u00EE': 'i',
            '\u0129': 'i',
            '\u012B': 'i',
            '\u012D': 'i',
            '\u00EF': 'i',
            '\u1E2F': 'i',
            '\u1EC9': 'i',
            '\u01D0': 'i',
            '\u0209': 'i',
            '\u020B': 'i',
            '\u1ECB': 'i',
            '\u012F': 'i',
            '\u1E2D': 'i',
            '\u0268': 'i',
            '\u0131': 'i',
            '\u24D9': 'j',
            '\uFF4A': 'j',
            '\u0135': 'j',
            '\u01F0': 'j',
            '\u0249': 'j',
            '\u24DA': 'k',
            '\uFF4B': 'k',
            '\u1E31': 'k',
            '\u01E9': 'k',
            '\u1E33': 'k',
            '\u0137': 'k',
            '\u1E35': 'k',
            '\u0199': 'k',
            '\u2C6A': 'k',
            '\uA741': 'k',
            '\uA743': 'k',
            '\uA745': 'k',
            '\uA7A3': 'k',
            '\u24DB': 'l',
            '\uFF4C': 'l',
            '\u0140': 'l',
            '\u013A': 'l',
            '\u013E': 'l',
            '\u1E37': 'l',
            '\u1E39': 'l',
            '\u013C': 'l',
            '\u1E3D': 'l',
            '\u1E3B': 'l',
            '\u017F': 'l',
            '\u0142': 'l',
            '\u019A': 'l',
            '\u026B': 'l',
            '\u2C61': 'l',
            '\uA749': 'l',
            '\uA781': 'l',
            '\uA747': 'l',
            '\u01C9': 'lj',
            '\u24DC': 'm',
            '\uFF4D': 'm',
            '\u1E3F': 'm',
            '\u1E41': 'm',
            '\u1E43': 'm',
            '\u0271': 'm',
            '\u026F': 'm',
            '\u24DD': 'n',
            '\uFF4E': 'n',
            '\u01F9': 'n',
            '\u0144': 'n',
            '\u00F1': 'n',
            '\u1E45': 'n',
            '\u0148': 'n',
            '\u1E47': 'n',
            '\u0146': 'n',
            '\u1E4B': 'n',
            '\u1E49': 'n',
            '\u019E': 'n',
            '\u0272': 'n',
            '\u0149': 'n',
            '\uA791': 'n',
            '\uA7A5': 'n',
            '\u01CC': 'nj',
            '\u24DE': 'o',
            '\uFF4F': 'o',
            '\u00F2': 'o',
            '\u00F3': 'o',
            '\u00F4': 'o',
            '\u1ED3': 'o',
            '\u1ED1': 'o',
            '\u1ED7': 'o',
            '\u1ED5': 'o',
            '\u00F5': 'o',
            '\u1E4D': 'o',
            '\u022D': 'o',
            '\u1E4F': 'o',
            '\u014D': 'o',
            '\u1E51': 'o',
            '\u1E53': 'o',
            '\u014F': 'o',
            '\u022F': 'o',
            '\u0231': 'o',
            '\u00F6': 'o',
            '\u022B': 'o',
            '\u1ECF': 'o',
            '\u0151': 'o',
            '\u01D2': 'o',
            '\u020D': 'o',
            '\u020F': 'o',
            '\u01A1': 'o',
            '\u1EDD': 'o',
            '\u1EDB': 'o',
            '\u1EE1': 'o',
            '\u1EDF': 'o',
            '\u1EE3': 'o',
            '\u1ECD': 'o',
            '\u1ED9': 'o',
            '\u01EB': 'o',
            '\u01ED': 'o',
            '\u00F8': 'o',
            '\u01FF': 'o',
            '\u0254': 'o',
            '\uA74B': 'o',
            '\uA74D': 'o',
            '\u0275': 'o',
            '\u01A3': 'oi',
            '\u0223': 'ou',
            '\uA74F': 'oo',
            '\u24DF': 'p',
            '\uFF50': 'p',
            '\u1E55': 'p',
            '\u1E57': 'p',
            '\u01A5': 'p',
            '\u1D7D': 'p',
            '\uA751': 'p',
            '\uA753': 'p',
            '\uA755': 'p',
            '\u24E0': 'q',
            '\uFF51': 'q',
            '\u024B': 'q',
            '\uA757': 'q',
            '\uA759': 'q',
            '\u24E1': 'r',
            '\uFF52': 'r',
            '\u0155': 'r',
            '\u1E59': 'r',
            '\u0159': 'r',
            '\u0211': 'r',
            '\u0213': 'r',
            '\u1E5B': 'r',
            '\u1E5D': 'r',
            '\u0157': 'r',
            '\u1E5F': 'r',
            '\u024D': 'r',
            '\u027D': 'r',
            '\uA75B': 'r',
            '\uA7A7': 'r',
            '\uA783': 'r',
            '\u24E2': 's',
            '\uFF53': 's',
            '\u00DF': 's',
            '\u015B': 's',
            '\u1E65': 's',
            '\u015D': 's',
            '\u1E61': 's',
            '\u0161': 's',
            '\u1E67': 's',
            '\u1E63': 's',
            '\u1E69': 's',
            '\u0219': 's',
            '\u015F': 's',
            '\u023F': 's',
            '\uA7A9': 's',
            '\uA785': 's',
            '\u1E9B': 's',
            '\u24E3': 't',
            '\uFF54': 't',
            '\u1E6B': 't',
            '\u1E97': 't',
            '\u0165': 't',
            '\u1E6D': 't',
            '\u021B': 't',
            '\u0163': 't',
            '\u1E71': 't',
            '\u1E6F': 't',
            '\u0167': 't',
            '\u01AD': 't',
            '\u0288': 't',
            '\u2C66': 't',
            '\uA787': 't',
            '\uA729': 'tz',
            '\u24E4': 'u',
            '\uFF55': 'u',
            '\u00F9': 'u',
            '\u00FA': 'u',
            '\u00FB': 'u',
            '\u0169': 'u',
            '\u1E79': 'u',
            '\u016B': 'u',
            '\u1E7B': 'u',
            '\u016D': 'u',
            '\u00FC': 'u',
            '\u01DC': 'u',
            '\u01D8': 'u',
            '\u01D6': 'u',
            '\u01DA': 'u',
            '\u1EE7': 'u',
            '\u016F': 'u',
            '\u0171': 'u',
            '\u01D4': 'u',
            '\u0215': 'u',
            '\u0217': 'u',
            '\u01B0': 'u',
            '\u1EEB': 'u',
            '\u1EE9': 'u',
            '\u1EEF': 'u',
            '\u1EED': 'u',
            '\u1EF1': 'u',
            '\u1EE5': 'u',
            '\u1E73': 'u',
            '\u0173': 'u',
            '\u1E77': 'u',
            '\u1E75': 'u',
            '\u0289': 'u',
            '\u24E5': 'v',
            '\uFF56': 'v',
            '\u1E7D': 'v',
            '\u1E7F': 'v',
            '\u028B': 'v',
            '\uA75F': 'v',
            '\u028C': 'v',
            '\uA761': 'vy',
            '\u24E6': 'w',
            '\uFF57': 'w',
            '\u1E81': 'w',
            '\u1E83': 'w',
            '\u0175': 'w',
            '\u1E87': 'w',
            '\u1E85': 'w',
            '\u1E98': 'w',
            '\u1E89': 'w',
            '\u2C73': 'w',
            '\u24E7': 'x',
            '\uFF58': 'x',
            '\u1E8B': 'x',
            '\u1E8D': 'x',
            '\u24E8': 'y',
            '\uFF59': 'y',
            '\u1EF3': 'y',
            '\u00FD': 'y',
            '\u0177': 'y',
            '\u1EF9': 'y',
            '\u0233': 'y',
            '\u1E8F': 'y',
            '\u00FF': 'y',
            '\u1EF7': 'y',
            '\u1E99': 'y',
            '\u1EF5': 'y',
            '\u01B4': 'y',
            '\u024F': 'y',
            '\u1EFF': 'y',
            '\u24E9': 'z',
            '\uFF5A': 'z',
            '\u017A': 'z',
            '\u1E91': 'z',
            '\u017C': 'z',
            '\u017E': 'z',
            '\u1E93': 'z',
            '\u1E95': 'z',
            '\u01B6': 'z',
            '\u0225': 'z',
            '\u0240': 'z',
            '\u2C6C': 'z',
            '\uA763': 'z',
            '\u0386': '\u0391',
            '\u0388': '\u0395',
            '\u0389': '\u0397',
            '\u038A': '\u0399',
            '\u03AA': '\u0399',
            '\u038C': '\u039F',
            '\u038E': '\u03A5',
            '\u03AB': '\u03A5',
            '\u038F': '\u03A9',
            '\u03AC': '\u03B1',
            '\u03AD': '\u03B5',
            '\u03AE': '\u03B7',
            '\u03AF': '\u03B9',
            '\u03CA': '\u03B9',
            '\u0390': '\u03B9',
            '\u03CC': '\u03BF',
            '\u03CD': '\u03C5',
            '\u03CB': '\u03C5',
            '\u03B0': '\u03C5',
            '\u03C9': '\u03C9',
            '\u03C2': '\u03C3'
        };
        return Diacritics;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OptionList = (function () {
        function OptionList(options) {
            /* Consider using these for performance improvement. */
            // private _selection: Array<Option>;
            // private _filtered: Array<Option>;
            // private _value: Array<string>;
            this._highlightedOption = null;
            if (typeof options === 'undefined' || options === null) {
                options = [];
            }
            this._options = options.map(function (option) {
                /** @type {?} */
                var o = new Option(option.value, option.label);
                if (option.disabled) {
                    o.disable();
                }
                return o;
            });
            this.highlight();
        }
        // v0 and v1 are assumed not to be undefined or null.
        // v0 and v1 are assumed not to be undefined or null.
        /**
         * @param {?} v0
         * @param {?} v1
         * @return {?}
         */
        OptionList.equalValues =
            // v0 and v1 are assumed not to be undefined or null.
            /**
             * @param {?} v0
             * @param {?} v1
             * @return {?}
             */
            function (v0, v1) {
                if (v0.length !== v1.length) {
                    return false;
                }
                /** @type {?} */
                var a = v0.slice().sort();
                /** @type {?} */
                var b = v1.slice().sort();
                return a.every(function (v, i) {
                    return v === b[i];
                });
            };
        Object.defineProperty(OptionList.prototype, "options", {
            /** Options. **/
            get: /**
             * Options. *
             * @return {?}
             */ function () {
                return this._options;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        OptionList.prototype.getOptionsByValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return this.options.filter(function (option) {
                    return option.value === value;
                });
            };
        Object.defineProperty(OptionList.prototype, "value", {
            /** Value. **/
            get: /**
             * Value. *
             * @return {?}
             */ function () {
                return this.selection.map(function (selectedOption) {
                    return selectedOption.value;
                });
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                v = typeof v === 'undefined' || v === null ? [] : v;
                this.options.forEach(function (option) {
                    option.selected = v.indexOf(option.value) > -1;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OptionList.prototype, "selection", {
            /** Selection. **/
            get: /**
             * Selection. *
             * @return {?}
             */ function () {
                return this.options.filter(function (option) {
                    return option.selected;
                });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} option
         * @param {?} multiple
         * @return {?}
         */
        OptionList.prototype.select = /**
         * @param {?} option
         * @param {?} multiple
         * @return {?}
         */
            function (option, multiple) {
                if (!multiple) {
                    this.clearSelection();
                }
                option.selected = true;
            };
        /**
         * @param {?} option
         * @return {?}
         */
        OptionList.prototype.deselect = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                option.selected = false;
            };
        /**
         * @return {?}
         */
        OptionList.prototype.clearSelection = /**
         * @return {?}
         */
            function () {
                this.options.forEach(function (option) {
                    option.selected = false;
                });
            };
        Object.defineProperty(OptionList.prototype, "filtered", {
            /** Filter. **/
            get: /**
             * Filter. *
             * @return {?}
             */ function () {
                return this.options.filter(function (option) {
                    return option.shown;
                });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} term
         * @return {?}
         */
        OptionList.prototype.filter = /**
         * @param {?} term
         * @return {?}
         */
            function (term) {
                if (term.trim() === '') {
                    this.resetFilter();
                }
                else {
                    this.options.forEach(function (option) {
                        /** @type {?} */
                        var l = Diacritics.strip(option.label).toUpperCase();
                        /** @type {?} */
                        var t = Diacritics.strip(term).toUpperCase();
                        option.shown = l.indexOf(t) > -1;
                    });
                }
                this.highlight();
            };
        /**
         * @return {?}
         */
        OptionList.prototype.resetFilter = /**
         * @return {?}
         */
            function () {
                this.options.forEach(function (option) {
                    option.shown = true;
                });
            };
        Object.defineProperty(OptionList.prototype, "highlightedOption", {
            /** Highlight. **/
            get: /**
             * Highlight. *
             * @return {?}
             */ function () {
                return this._highlightedOption;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        OptionList.prototype.highlight = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var option = this.hasShownSelected() ?
                    this.getFirstShownSelected() : this.getFirstShown();
                this.highlightOption(option);
            };
        /**
         * @param {?} option
         * @return {?}
         */
        OptionList.prototype.highlightOption = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                this.clearHighlightedOption();
                if (option !== null) {
                    option.highlighted = true;
                    this._highlightedOption = option;
                }
            };
        /**
         * @return {?}
         */
        OptionList.prototype.highlightNextOption = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var shownOptions = this.filtered;
                /** @type {?} */
                var index = this.getHighlightedIndexFromList(shownOptions);
                if (index > -1 && index < shownOptions.length - 1) {
                    this.highlightOption(shownOptions[index + 1]);
                }
            };
        /**
         * @return {?}
         */
        OptionList.prototype.highlightPreviousOption = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var shownOptions = this.filtered;
                /** @type {?} */
                var index = this.getHighlightedIndexFromList(shownOptions);
                if (index > 0) {
                    this.highlightOption(shownOptions[index - 1]);
                }
            };
        /**
         * @private
         * @return {?}
         */
        OptionList.prototype.clearHighlightedOption = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.highlightedOption !== null) {
                    this.highlightedOption.highlighted = false;
                    this._highlightedOption = null;
                }
            };
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        OptionList.prototype.getHighlightedIndexFromList = /**
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                for (var i = 0; i < options.length; i++) {
                    if (options[i].highlighted) {
                        return i;
                    }
                }
                return -1;
            };
        /**
         * @return {?}
         */
        OptionList.prototype.getHighlightedIndex = /**
         * @return {?}
         */
            function () {
                return this.getHighlightedIndexFromList(this.filtered);
            };
        /** Util. **/
        /**
         * Util. *
         * @return {?}
         */
        OptionList.prototype.hasShown = /**
         * Util. *
         * @return {?}
         */
            function () {
                return this.options.some(function (option) {
                    return option.shown;
                });
            };
        /**
         * @return {?}
         */
        OptionList.prototype.hasSelected = /**
         * @return {?}
         */
            function () {
                return this.options.some(function (option) {
                    return option.selected;
                });
            };
        /**
         * @return {?}
         */
        OptionList.prototype.hasShownSelected = /**
         * @return {?}
         */
            function () {
                return this.options.some(function (option) {
                    return option.shown && option.selected;
                });
            };
        /**
         * @private
         * @return {?}
         */
        OptionList.prototype.getFirstShown = /**
         * @private
         * @return {?}
         */
            function () {
                try {
                    for (var _a = __values(this.options), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var option = _b.value;
                        if (option.shown) {
                            return option;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return null;
                var e_1, _c;
            };
        /**
         * @private
         * @return {?}
         */
        OptionList.prototype.getFirstShownSelected = /**
         * @private
         * @return {?}
         */
            function () {
                try {
                    for (var _a = __values(this.options), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var option = _b.value;
                        if (option.shown && option.selected) {
                            return option;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return null;
                var e_2, _c;
            };
        return OptionList;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SELECT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return SelectComponent; }),
        multi: true
    };
    var SelectComponent = (function () {
        function SelectComponent() {
            /** Keys. **/
            this.KEYS = {
                BACKSPACE: 8,
                TAB: 9,
                ENTER: 13,
                ESC: 27,
                SPACE: 32,
                UP: 38,
                DOWN: 40
            };
            this.allowClear = false;
            this.disabled = false;
            this.highlightColor = '#2196f3';
            this.highlightTextColor = '#fff';
            this.multiple = false;
            this.noFilter = 0;
            this.notFoundMsg = 'No results found';
            this.placeholder = '';
            this.opened = new core.EventEmitter();
            this.closed = new core.EventEmitter();
            this.selected = new core.EventEmitter();
            this.deselected = new core.EventEmitter();
            this.typed = new core.EventEmitter();
            this._value = [];
            // Selection state variables.
            this.hasSelected = false;
            // View state variables.
            this.filterEnabled = true;
            this.filterInputWidth = 1;
            this.hasFocus = false;
            this.isBelow = true;
            this.isDisabled = false;
            this.isOpen = false;
            this.placeholderView = '';
            this.clearClicked = false;
            this.selectContainerClicked = false;
            this.onChange = function (_$$1) { };
            this.onTouched = function () { };
        }
        /** Event handlers. **/
        // Angular lifecycle hooks.
        /**
         * Event handlers. *
         * @return {?}
         */
        // Angular lifecycle hooks.
        SelectComponent.prototype.ngOnInit = /**
         * Event handlers. *
         * @return {?}
         */
            // Angular lifecycle hooks.
            function () {
                this.placeholderView = this.placeholder;
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.updateFilterWidth();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        SelectComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.hasOwnProperty('options')) {
                    this.updateOptionsList(changes['options'].isFirstChange());
                }
                if (changes.hasOwnProperty('noFilter')) {
                    /** @type {?} */
                    var numOptions = this.optionList.options.length;
                    /** @type {?} */
                    var minNumOptions = changes['noFilter'].currentValue;
                    this.filterEnabled = numOptions >= minNumOptions;
                }
            };
        // Window.
        // Window.
        /**
         * @return {?}
         */
        SelectComponent.prototype.onWindowClick =
            // Window.
            /**
             * @return {?}
             */
            function () {
                if (!this.selectContainerClicked) {
                    this.closeDropdown();
                }
                this.clearClicked = false;
                this.selectContainerClicked = false;
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.onWindowResize = /**
         * @return {?}
         */
            function () {
                this.updateWidth();
            };
        // Select container.
        // Select container.
        /**
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.onSelectContainerClick =
            // Select container.
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.selectContainerClicked = true;
                if (!this.clearClicked) {
                    this.toggleDropdown();
                }
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.onSelectContainerFocus = /**
         * @return {?}
         */
            function () {
                this.onTouched();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.onSelectContainerKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.handleSelectContainerKeydown(event);
            };
        // Dropdown container.
        // Dropdown container.
        /**
         * @param {?} option
         * @return {?}
         */
        SelectComponent.prototype.onDropdownOptionClicked =
            // Dropdown container.
            /**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                this.multiple ?
                    this.toggleSelectOption(option) : this.selectOption(option);
            };
        /**
         * @param {?} focus
         * @return {?}
         */
        SelectComponent.prototype.onDropdownClose = /**
         * @param {?} focus
         * @return {?}
         */
            function (focus) {
                this.closeDropdown(focus);
            };
        // Single filter input.
        // Single filter input.
        /**
         * @return {?}
         */
        SelectComponent.prototype.onSingleFilterClick =
            // Single filter input.
            /**
             * @return {?}
             */
            function () {
                this.selectContainerClicked = true;
            };
        /**
         * @param {?} term
         * @return {?}
         */
        SelectComponent.prototype.onSingleFilterInput = /**
         * @param {?} term
         * @return {?}
         */
            function (term) {
                var _this = this;
                setTimeout(function () {
                    if (term.length > 2) {
                        _this.typed.emit(term);
                    }
                }, 500);
                this.optionList.filter(term);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.onSingleFilterKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.handleSingleFilterKeydown(event);
            };
        // Multiple filter input.
        // Multiple filter input.
        /**
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.onMultipleFilterInput =
            // Multiple filter input.
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var _this = this;
                if (!this.isOpen) {
                    this.openDropdown();
                }
                this.updateFilterWidth();
                setTimeout(function () {
                    _this.optionList.filter(event.target.value);
                });
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.onMultipleFilterKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.handleMultipleFilterKeydown(event);
            };
        // Single clear select.
        // Single clear select.
        /**
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.onClearSelectionClick =
            // Single clear select.
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.clearClicked = true;
                this.clearSelection();
                this.closeDropdown(true);
            };
        // Multiple deselect option.
        // Multiple deselect option.
        /**
         * @param {?} option
         * @return {?}
         */
        SelectComponent.prototype.onDeselectOptionClick =
            // Multiple deselect option.
            /**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                this.clearClicked = true;
                this.deselectOption(option);
            };
        /** API. **/
        // TODO fix issues with global click/key handler that closes the dropdown.
        /**
         * API. *
         * @return {?}
         */
        // TODO fix issues with global click/key handler that closes the dropdown.
        SelectComponent.prototype.open = /**
         * API. *
         * @return {?}
         */
            // TODO fix issues with global click/key handler that closes the dropdown.
            function () {
                this.openDropdown();
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.closeDropdown();
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.clearSelection();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        SelectComponent.prototype.select = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                this.optionList.getOptionsByValue(value).forEach(function (option) {
                    _this.selectOption(option);
                });
                this.valueChanged();
            };
        /** ControlValueAccessor interface methods. **/
        /**
         * ControlValueAccessor interface methods. *
         * @param {?} value
         * @return {?}
         */
        SelectComponent.prototype.writeValue = /**
         * ControlValueAccessor interface methods. *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        SelectComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        SelectComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        SelectComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        Object.defineProperty(SelectComponent.prototype, "value", {
            /** Value. **/
            get: /**
             * Value. *
             * @return {?}
             */ function () {
                if (this._value.length === 0) {
                    return '';
                }
                else {
                    return this.multiple ? this._value : this._value[0];
                }
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                if (typeof v === 'undefined' || v === null || v === '') {
                    v = [];
                }
                else if (typeof v === 'string') {
                    v = [v];
                }
                else if (!Array.isArray(v)) {
                    throw new TypeError('Value must be a string or an array.');
                }
                if (!OptionList.equalValues(v, this._value)) {
                    this.optionList.value = v;
                    this.valueChanged();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @return {?}
         */
        SelectComponent.prototype.valueChanged = /**
         * @private
         * @return {?}
         */
            function () {
                this._value = this.optionList.value;
                this.hasSelected = this._value.length > 0;
                this.placeholderView = this.hasSelected ? '' : this.placeholder;
                this.updateFilterWidth();
                this.onChange(this.value);
            };
        /** Initialization. **/
        /**
         * Initialization. *
         * @private
         * @param {?} firstTime
         * @return {?}
         */
        SelectComponent.prototype.updateOptionsList = /**
         * Initialization. *
         * @private
         * @param {?} firstTime
         * @return {?}
         */
            function (firstTime) {
                /** @type {?} */
                var v;
                if (!firstTime) {
                    v = this.optionList.value;
                }
                this.optionList = new OptionList(this.options);
                if (!firstTime) {
                    this.optionList.value = v;
                    this.valueChanged();
                }
            };
        /** Dropdown. **/
        /**
         * Dropdown. *
         * @private
         * @return {?}
         */
        SelectComponent.prototype.toggleDropdown = /**
         * Dropdown. *
         * @private
         * @return {?}
         */
            function () {
                if (!this.isDisabled) {
                    this.isOpen ? this.closeDropdown(true) : this.openDropdown();
                }
            };
        /**
         * @private
         * @return {?}
         */
        SelectComponent.prototype.openDropdown = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.isOpen) {
                    this.updateWidth();
                    this.updatePosition();
                    this.isOpen = true;
                    if (this.multiple && this.filterEnabled) {
                        this.filterInput.nativeElement.focus();
                    }
                    this.opened.emit(null);
                }
            };
        /* tslint:disable */
        /* tslint:disable */
        /**
         * @private
         * @param {?=} focus
         * @return {?}
         */
        SelectComponent.prototype.closeDropdown = /* tslint:disable */
            /**
             * @private
             * @param {?=} focus
             * @return {?}
             */
            function (focus) {
                if (focus === void 0) {
                    focus = false;
                }
                if (this.isOpen) {
                    this.clearFilterInput();
                    this.isOpen = false;
                    if (focus) {
                        this.focus();
                    }
                    this.closed.emit(null);
                }
            };
        /* tslint:enable */
        /** Select. **/
        /* tslint:enable */
        /**
         * Select. *
         * @private
         * @param {?} option
         * @return {?}
         */
        SelectComponent.prototype.selectOption = /* tslint:enable */
            /**
             * Select. *
             * @private
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (!option.selected) {
                    this.optionList.select(option, this.multiple);
                    this.valueChanged();
                    this.selected.emit(option.undecoratedCopy());
                    // Is this not allready done when setting the value??
                    /*setTimeout(() => {
                        if (this.multiple) {
                            this.updateFilterWidth();
                        }
                    });*/
                }
            };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        SelectComponent.prototype.deselectOption = /**
         * @private
         * @param {?} option
         * @return {?}
         */
            function (option) {
                var _this = this;
                if (option.selected) {
                    this.optionList.deselect(option);
                    this.valueChanged();
                    this.deselected.emit(option.undecoratedCopy());
                    setTimeout(function () {
                        if (_this.multiple) {
                            // this.updateFilterWidth();
                            _this.updatePosition();
                            _this.optionList.highlight();
                            if (_this.isOpen) {
                                _this.dropdown.moveHighlightedIntoView();
                            }
                        }
                    });
                }
            };
        /**
         * @private
         * @return {?}
         */
        SelectComponent.prototype.clearSelection = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selection = this.optionList.selection;
                if (selection.length > 0) {
                    this.optionList.clearSelection();
                    this.valueChanged();
                    if (selection.length === 1) {
                        this.deselected.emit(selection[0].undecoratedCopy());
                    }
                    else {
                        this.deselected.emit(selection.map(function (option) {
                            return option.undecoratedCopy();
                        }));
                    }
                }
            };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        SelectComponent.prototype.toggleSelectOption = /**
         * @private
         * @param {?} option
         * @return {?}
         */
            function (option) {
                option.selected ?
                    this.deselectOption(option) : this.selectOption(option);
            };
        /**
         * @private
         * @return {?}
         */
        SelectComponent.prototype.selectHighlightedOption = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var option = this.optionList.highlightedOption;
                if (option !== null) {
                    this.selectOption(option);
                    this.closeDropdown(true);
                }
            };
        /**
         * @private
         * @return {?}
         */
        SelectComponent.prototype.deselectLast = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sel = this.optionList.selection;
                if (sel.length > 0) {
                    /** @type {?} */
                    var option = sel[sel.length - 1];
                    this.deselectOption(option);
                    this.setMultipleFilterInput(option.label + ' ');
                }
            };
        /** Filter. **/
        /**
         * Filter. *
         * @private
         * @return {?}
         */
        SelectComponent.prototype.clearFilterInput = /**
         * Filter. *
         * @private
         * @return {?}
         */
            function () {
                if (this.multiple && this.filterEnabled) {
                    this.filterInput.nativeElement.value = '';
                }
                else {
                    this.dropdown.clearFilterInput();
                }
            };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        SelectComponent.prototype.setMultipleFilterInput = /**
         * @private
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.filterEnabled) {
                    this.filterInput.nativeElement.value = value;
                }
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.handleSelectContainerKeydown = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                /** @type {?} */
                var key = event.which;
                if (this.isOpen) {
                    if (key === this.KEYS.ESC ||
                        (key === this.KEYS.UP && event.altKey)) {
                        this.closeDropdown(true);
                    }
                    else if (key === this.KEYS.TAB) {
                        this.closeDropdown();
                    }
                    else if (key === this.KEYS.ENTER) {
                        this.selectHighlightedOption();
                    }
                    else if (key === this.KEYS.UP) {
                        this.optionList.highlightPreviousOption();
                        this.dropdown.moveHighlightedIntoView();
                        if (!this.filterEnabled) {
                            event.preventDefault();
                        }
                    }
                    else if (key === this.KEYS.DOWN) {
                        this.optionList.highlightNextOption();
                        this.dropdown.moveHighlightedIntoView();
                        if (!this.filterEnabled) {
                            event.preventDefault();
                        }
                    }
                }
                else {
                    if (key === this.KEYS.ENTER || key === this.KEYS.SPACE ||
                        (key === this.KEYS.DOWN && event.altKey)) {
                        /* FIREFOX HACK:
                         *
                         * The setTimeout is added to prevent the enter keydown event
                         * to be triggered for the filter input field, which causes
                         * the dropdown to be closed again.
                         */
                        setTimeout(function () { _this.openDropdown(); });
                    }
                }
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.handleMultipleFilterKeydown = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var key = event.which;
                if (key === this.KEYS.BACKSPACE) {
                    if (this.hasSelected && this.filterEnabled &&
                        this.filterInput.nativeElement.value === '') {
                        this.deselectLast();
                    }
                }
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.handleSingleFilterKeydown = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var key = event.which;
                if (key === this.KEYS.ESC || key === this.KEYS.TAB
                    || key === this.KEYS.UP || key === this.KEYS.DOWN
                    || key === this.KEYS.ENTER) {
                    this.handleSelectContainerKeydown(event);
                }
            };
        /** View. **/
        /**
         * View. *
         * @return {?}
         */
        SelectComponent.prototype.focus = /**
         * View. *
         * @return {?}
         */
            function () {
                this.hasFocus = true;
                if (this.multiple && this.filterEnabled) {
                    this.filterInput.nativeElement.focus();
                }
                else {
                    this.selectionSpan.nativeElement.focus();
                }
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                this.hasFocus = false;
                this.selectionSpan.nativeElement.blur();
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.updateWidth = /**
         * @return {?}
         */
            function () {
                this.width = this.selectionSpan.nativeElement.offsetWidth;
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.updatePosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var e = this.selectionSpan.nativeElement;
                this.left = e.offsetLeft;
                this.top = e.offsetTop + e.offsetHeight;
            };
        /**
         * @return {?}
         */
        SelectComponent.prototype.updateFilterWidth = /**
         * @return {?}
         */
            function () {
                if (typeof this.filterInput !== 'undefined') {
                    /** @type {?} */
                    var value = this.filterInput.nativeElement.value;
                    this.filterInputWidth = value.length === 0 ?
                        1 + this.placeholderView.length * 10 : 1 + value.length * 10;
                }
            };
        SelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-select',
                        template: "<div\n    #selection\n    [attr.tabindex]=\"disabled ? null : 0\"\n    [ngClass]=\"{'open': isOpen, 'focus': hasFocus, 'below': isBelow, 'disabled': disabled}\"\n    (click)=\"onSelectContainerClick($event)\"\n    (focus)=\"onSelectContainerFocus()\"\n    (keydown)=\"onSelectContainerKeydown($event)\"\n    (window:click)=\"onWindowClick()\"\n    (window:resize)=\"onWindowResize()\">\n\n    <div class=\"single\"\n        *ngIf=\"!multiple\">\n        <div class=\"value\"\n            *ngIf=\"optionList.hasSelected()\">\n            {{optionList.selection[0].label}}\n        </div>\n        <div class=\"placeholder\"\n            *ngIf=\"!optionList.hasSelected()\">\n            {{placeholderView}}\n        </div>\n        <div class=\"clear\"\n            *ngIf=\"allowClear\"\n            (click)=\"onClearSelectionClick($event)\">\n            &#x2715;\n        </div>\n        <div class=\"toggle\"\n            *ngIf=\"isOpen\">\n            &#x25B2;\n        </div>\n        <div class=\"toggle\"\n            *ngIf=\"!isOpen\">\n            &#x25BC;\n        </div>\n    </div>\n\n    <div class=\"multiple\"\n        *ngIf=\"multiple\">\n        <div class=\"option\"\n            *ngFor=\"let option of optionList.selection\">\n            <span class=\"deselect-option\"\n                (click)=onDeselectOptionClick(option)>\n                &#x2715;\n            </span>\n            {{option.label}}\n        </div>\n        <input\n            *ngIf=\"filterEnabled\"\n            #filterInput\n            tabindex=\"-1\"\n            [placeholder]=\"placeholderView\"\n            [ngStyle]=\"{'width.px': filterInputWidth}\"\n            (input)=\"onMultipleFilterInput($event)\"\n            (keydown)=\"onMultipleFilterKeydown($event)\"/>\n    </div>\n\n</div>\n<select-dropdown\n    *ngIf=\"isOpen\"\n    #dropdown\n    [multiple]=\"multiple\"\n    [optionList]=\"optionList\"\n    [notFoundMsg]=\"notFoundMsg\"\n    [highlightColor]=\"highlightColor\"\n    [highlightTextColor]=\"highlightTextColor\"\n    [filterEnabled]=\"filterEnabled\"\n    [width]=\"width\"\n    [top]=\"top\"\n    [left]=\"left\"\n    (close)=\"onDropdownClose($event)\"\n    (optionClicked)=\"onDropdownOptionClicked($event)\"\n    (singleFilterClick)=\"onSingleFilterClick()\"\n    (singleFilterInput)=\"onSingleFilterInput($event)\"\n    (singleFilterKeydown)=\"onSingleFilterKeydown($event)\">\n</select-dropdown>\n",
                        styles: [STYLE],
                        providers: [SELECT_VALUE_ACCESSOR],
                        encapsulation: core.ViewEncapsulation.None
                    },] },
        ];
        SelectComponent.propDecorators = {
            options: [{ type: core.Input }],
            allowClear: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            highlightColor: [{ type: core.Input }],
            highlightTextColor: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            noFilter: [{ type: core.Input }],
            notFoundMsg: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            opened: [{ type: core.Output }],
            closed: [{ type: core.Output }],
            selected: [{ type: core.Output }],
            deselected: [{ type: core.Output }],
            typed: [{ type: core.Output }],
            selectionSpan: [{ type: core.ViewChild, args: ['selection',] }],
            dropdown: [{ type: core.ViewChild, args: ['dropdown',] }],
            filterInput: [{ type: core.ViewChild, args: ['filterInput',] }]
        };
        return SelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var STYLE$1 = "select-dropdown {\n  box-sizing: border-box;\n  font-family: Sans-Serif;\n}\nselect-dropdown * {\n  box-sizing: border-box;\n  font-family: Sans-Serif;\n}\nselect-dropdown > div {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border-top: none;\n  box-sizing: border-box;\n  position: absolute;\n  z-index: 1;\n}\nselect-dropdown > div .filter {\n  padding: 3px;\n  width: 100%;\n}\nselect-dropdown > div .filter input {\n  border: 1px solid #eee;\n  box-sizing: border-box;\n  padding: 4px;\n  width: 100%;\n}\nselect-dropdown > div .options {\n  max-height: 200px;\n  overflow-y: auto;\n}\nselect-dropdown > div .options ul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\nselect-dropdown > div .options ul li {\n  padding: 4px 8px;\n  cursor: pointer;\n  user-select: none;\n}\nselect-dropdown .selected {\n  background-color: #e0e0e0;\n}\nselect-dropdown .selected.highlighted {\n  background-color: #2196F3;\n  color: #fff;\n}\nselect-dropdown .highlighted {\n  background-color: #2196F3;\n  color: #fff;\n}\nselect-dropdown .disabled {\n  background-color: #fff;\n  color: #9e9e9e;\n  cursor: default;\n  pointer-events: none;\n}";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectDropdownComponent = (function () {
        function SelectDropdownComponent() {
            this.close = new core.EventEmitter();
            this.optionClicked = new core.EventEmitter();
            this.singleFilterClick = new core.EventEmitter();
            this.singleFilterInput = new core.EventEmitter();
            this.singleFilterKeydown = new core.EventEmitter();
            this.disabledColor = '#fff';
            this.disabledTextColor = '9e9e9e';
        }
        /** Event handlers. **/
        // Angular life cycle hooks.
        /**
         * Event handlers. *
         * @return {?}
         */
        // Angular life cycle hooks.
        SelectDropdownComponent.prototype.ngOnInit = /**
         * Event handlers. *
         * @return {?}
         */
            // Angular life cycle hooks.
            function () {
                this.optionsReset();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        SelectDropdownComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.hasOwnProperty('optionList')) {
                    this.optionsReset();
                }
            };
        /**
         * @return {?}
         */
        SelectDropdownComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.moveHighlightedIntoView();
                if (!this.multiple && this.filterEnabled) {
                    this.filterInput.nativeElement.focus();
                }
            };
        // Filter input (single select).
        // Filter input (single select).
        /**
         * @param {?} event
         * @return {?}
         */
        SelectDropdownComponent.prototype.onSingleFilterClick =
            // Filter input (single select).
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.singleFilterClick.emit(null);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SelectDropdownComponent.prototype.onSingleFilterInput = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.singleFilterInput.emit(event.target.value);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SelectDropdownComponent.prototype.onSingleFilterKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.singleFilterKeydown.emit(event);
            };
        // Options list.
        // Options list.
        /**
         * @param {?} event
         * @return {?}
         */
        SelectDropdownComponent.prototype.onOptionsWheel =
            // Options list.
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.handleOptionsWheel(event);
            };
        /**
         * @param {?} option
         * @return {?}
         */
        SelectDropdownComponent.prototype.onOptionMouseover = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                this.optionList.highlightOption(option);
            };
        /**
         * @param {?} option
         * @return {?}
         */
        SelectDropdownComponent.prototype.onOptionClick = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                this.optionClicked.emit(option);
            };
        /** Initialization. **/
        /**
         * Initialization. *
         * @private
         * @return {?}
         */
        SelectDropdownComponent.prototype.optionsReset = /**
         * Initialization. *
         * @private
         * @return {?}
         */
            function () {
                this.optionList.resetFilter();
                this.optionList.highlight();
            };
        /** View. **/
        /**
         * View. *
         * @param {?} option
         * @return {?}
         */
        SelectDropdownComponent.prototype.getOptionStyle = /**
         * View. *
         * @param {?} option
         * @return {?}
         */
            function (option) {
                if (option.highlighted) {
                    return {
                        'background-color': this.highlightColor,
                        'color': this.highlightTextColor
                    };
                }
                else {
                    return {};
                }
            };
        /**
         * @return {?}
         */
        SelectDropdownComponent.prototype.clearFilterInput = /**
         * @return {?}
         */
            function () {
                if (this.filterEnabled) {
                    this.filterInput.nativeElement.value = '';
                }
            };
        /**
         * @return {?}
         */
        SelectDropdownComponent.prototype.moveHighlightedIntoView = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var list = this.optionsList.nativeElement;
                /** @type {?} */
                var listHeight = list.offsetHeight;
                /** @type {?} */
                var itemIndex = this.optionList.getHighlightedIndex();
                if (itemIndex > -1) {
                    /** @type {?} */
                    var item = list.children[0].children[itemIndex];
                    /** @type {?} */
                    var itemHeight = item.offsetHeight;
                    /** @type {?} */
                    var itemTop = itemIndex * itemHeight;
                    /** @type {?} */
                    var itemBottom = itemTop + itemHeight;
                    /** @type {?} */
                    var viewTop = list.scrollTop;
                    /** @type {?} */
                    var viewBottom = viewTop + listHeight;
                    if (itemBottom > viewBottom) {
                        list.scrollTop = itemBottom - listHeight;
                    }
                    else if (itemTop < viewTop) {
                        list.scrollTop = itemTop;
                    }
                }
            };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        SelectDropdownComponent.prototype.handleOptionsWheel = /**
         * @private
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var div = this.optionsList.nativeElement;
                /** @type {?} */
                var atTop = div.scrollTop === 0;
                /** @type {?} */
                var atBottom = div.offsetHeight + div.scrollTop === div.scrollHeight;
                if (atTop && e.deltaY < 0) {
                    e.preventDefault();
                }
                else if (atBottom && e.deltaY > 0) {
                    e.preventDefault();
                }
            };
        SelectDropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'select-dropdown',
                        template: "<div\n    [ngStyle]=\"{'top.px': top, 'left.px': left, 'width.px': width}\">\n\n    <div class=\"filter\"\n        *ngIf=\"!multiple\">\n        <input\n            *ngIf=\"filterEnabled\"\n            #filterInput\n            (click)=\"onSingleFilterClick($event)\"\n            (input)=\"onSingleFilterInput($event)\"\n            (keydown)=\"onSingleFilterKeydown($event)\">\n    </div>\n\n    <div class=\"options\"\n        #optionsList>\n        <ul\n            (wheel)=\"onOptionsWheel($event)\">\n            <li *ngFor=\"let option of optionList.filtered\"\n                [ngClass]=\"{'highlighted': option.highlighted, 'selected': option.selected, 'disabled': option.disabled}\"\n                [ngStyle]=\"getOptionStyle(option)\"\n                (click)=\"onOptionClick(option)\"\n                (mouseover)=\"onOptionMouseover(option)\">\n                {{option.label}}\n            </li>\n            <li\n                *ngIf=\"!optionList.hasShown()\"\n                class=\"message\">\n                {{notFoundMsg}}\n            </li>\n        </ul>\n    </div>\n</div>\n",
                        styles: [STYLE$1],
                        encapsulation: core.ViewEncapsulation.None
                    },] },
        ];
        SelectDropdownComponent.propDecorators = {
            filterEnabled: [{ type: core.Input }],
            highlightColor: [{ type: core.Input }],
            highlightTextColor: [{ type: core.Input }],
            left: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            notFoundMsg: [{ type: core.Input }],
            optionList: [{ type: core.Input }],
            top: [{ type: core.Input }],
            width: [{ type: core.Input }],
            close: [{ type: core.Output }],
            optionClicked: [{ type: core.Output }],
            singleFilterClick: [{ type: core.Output }],
            singleFilterInput: [{ type: core.Output }],
            singleFilterKeydown: [{ type: core.Output }],
            filterInput: [{ type: core.ViewChild, args: ['filterInput',] }],
            optionsList: [{ type: core.ViewChild, args: ['optionsList',] }]
        };
        return SelectDropdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectModule = (function () {
        function SelectModule() {
        }
        SelectModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SelectComponent,
                            SelectDropdownComponent
                        ],
                        exports: [
                            SelectComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule
                        ]
                    },] },
        ];
        return SelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { FileUploadResourceService } from '../../etl-api/file-upload-resource.service';
    // Using similarity from AsyncPipe to avoid having to pipe |secure|async in HTML.
    // tslint:disable-next-line:use-pipe-transform-interface
    var SecurePipe = (function () {
        function SecurePipe(_ref, sanitizer) {
            this._ref = _ref;
            this.sanitizer = sanitizer;
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
            this._result = new rxjs.BehaviorSubject(null);
            this.result = this._result.asObservable();
            this._internalSubscription = null;
        }
        /**
         * @return {?}
         */
        SecurePipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._subscription) {
                    this._dispose();
                }
            };
        /**
         * @param {?} url
         * @param {?} getfile
         * @return {?}
         */
        SecurePipe.prototype.transform = /**
         * @param {?} url
         * @param {?} getfile
         * @return {?}
         */
            function (url, getfile) {
                this.getfile = getfile;
                /** @type {?} */
                var obj = this.internalTransform(url);
                return this.asyncTrasnform(obj);
            };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        SecurePipe.prototype.internalTransform = /**
         * @private
         * @param {?} url
         * @return {?}
         */
            function (url) {
                var _this = this;
                if (!url) {
                    return this.result;
                }
                if (this.previousUrl !== url) {
                    this.previousUrl = url;
                    this._internalSubscription = this.getfile(url)
                        .subscribe(function (m) {
                        /** @type {?} */
                        var sanitized = _this.sanitizer.bypassSecurityTrustUrl(m);
                        _this._result.next(sanitized);
                    });
                }
                return this.result;
            };
        /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        SecurePipe.prototype.asyncTrasnform = /**
         * @private
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (!this._obj) {
                    if (obj) {
                        this._subscribe(obj);
                    }
                    this._latestReturnedValue = this._latestValue;
                    return this._latestValue;
                }
                if (obj !== this._obj) {
                    this._dispose();
                    return this.asyncTrasnform(obj);
                }
                if (this._latestValue === this._latestReturnedValue) {
                    return this._latestReturnedValue;
                }
                this._latestReturnedValue = this._latestValue;
                return core.WrappedValue.wrap(this._latestValue);
            };
        /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        SecurePipe.prototype._subscribe = /**
         * @private
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var _this = this;
                this._obj = obj;
                this._subscription = obj.subscribe({
                    next: function (value) {
                        return _this._updateLatestValue(obj, value);
                    }, error: function (e) { throw e; }
                });
            };
        /**
         * @private
         * @return {?}
         */
        SecurePipe.prototype._dispose = /**
         * @private
         * @return {?}
         */
            function () {
                if (this._subscription) {
                    this._subscription.unsubscribe();
                }
                if (this._internalSubscription) {
                    this._internalSubscription.unsubscribe();
                }
                this._internalSubscription = null;
                this._latestValue = null;
                this._latestReturnedValue = null;
                this._subscription = null;
                this._obj = null;
            };
        /**
         * @private
         * @param {?} async
         * @param {?} value
         * @return {?}
         */
        SecurePipe.prototype._updateLatestValue = /**
         * @private
         * @param {?} async
         * @param {?} value
         * @return {?}
         */
            function (async, value) {
                if (async === this._obj) {
                    this._latestValue = value;
                    this._ref.markForCheck();
                }
            };
        SecurePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'secure',
                        pure: false
                    },] },
        ];
        SecurePipe.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return SecurePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SharedModule = (function () {
        function SharedModule() {
        }
        SharedModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SecurePipe
                        ],
                        imports: [common.CommonModule],
                        exports: [
                            SecurePipe
                        ],
                        providers: [
                            DataSources
                        ],
                    },] },
        ];
        return SharedModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RemoteFileUploadComponent = (function () {
        function RemoteFileUploadComponent(renderer) {
            this.renderer = renderer;
            this.uploading = false;
            this.innerValue = null;
            // the method set in registerOnChange, it is just
            // a placeholder for a method that takes one parameter,
            // we use it to emit changes back to the form
            this.propagateChange = function (_$$1) { };
        }
        Object.defineProperty(RemoteFileUploadComponent.prototype, "dataSource", {
            get: /**
             * @return {?}
             */ function () {
                return this._dataSource;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._dataSource = v;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        RemoteFileUploadComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} data
         * @return {?}
         */
        RemoteFileUploadComponent.prototype.upload = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                if (this.dataSource) {
                    this.uploading = true;
                    this.dataSource.fileUpload(data).subscribe(function (result) {
                        // console.log('Result', result);
                        _this.innerValue = result.image;
                        _this.propagateChange(_this.innerValue);
                        _this.uploading = false;
                    }, function (error) {
                        _this.uploading = false;
                    });
                }
            };
        // this is the initial value set to the component
        // this is the initial value set to the component
        /**
         * @param {?} value
         * @return {?}
         */
        RemoteFileUploadComponent.prototype.writeValue =
            // this is the initial value set to the component
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value !== this.innerValue) {
                    this.innerValue = value;
                }
            };
        // registers 'fn' that will be fired when changes are made
        // this is how we emit the changes back to the form
        // registers 'fn' that will be fired when changes are made
        // this is how we emit the changes back to the form
        /**
         * @param {?} fn
         * @return {?}
         */
        RemoteFileUploadComponent.prototype.registerOnChange =
            // registers 'fn' that will be fired when changes are made
            // this is how we emit the changes back to the form
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.propagateChange = fn;
            };
        // not used, used for touch input
        // not used, used for touch input
        /**
         * @return {?}
         */
        RemoteFileUploadComponent.prototype.registerOnTouched =
            // not used, used for touch input
            /**
             * @return {?}
             */
            function () { };
        // change events from the textarea
        // change events from the textarea
        /**
         * @param {?} event
         * @return {?}
         */
        RemoteFileUploadComponent.prototype.onChange =
            // change events from the textarea
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.propagateChange(event.id);
                // .....
                // update the form
                // this.propagateChange(this.data);
            };
        /**
         * @return {?}
         */
        RemoteFileUploadComponent.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.innerValue = null;
                this.propagateChange(this.innerValue);
            };
        RemoteFileUploadComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'remote-file-upload',
                        template: "<div>\n    <file-uploader [(ngModel)]=\"innerValue\" (onClear)=\"clearValue()\" (fileChanged)=\"upload($event)\">\n    </file-uploader>\n    <img *ngIf=\"innerValue\" class=\"img-responsive\" [src]=\"innerValue | secure:this.dataSource.fetchFile\" alt=\"\" />\n</div>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return RemoteFileUploadComponent; }),
                                multi: true,
                            }
                        ],
                        styles: ["img {\n        margin-left: auto;margin-right: auto;display: block;\n    }"
                        ]
                    },] },
        ];
        RemoteFileUploadComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 }
            ];
        };
        RemoteFileUploadComponent.propDecorators = {
            dataSource: [{ type: core.Input }]
        };
        return RemoteFileUploadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RemoteFileUploadModule = (function () {
        function RemoteFileUploadModule() {
        }
        RemoteFileUploadModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, SelectModule, forms.FormsModule, ngxFileUploaderAmpath.NgxFileUploaderModule, SharedModule],
                        exports: [RemoteFileUploadComponent],
                        declarations: [RemoteFileUploadComponent],
                        providers: [],
                    },] },
        ];
        return RemoteFileUploadModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$1 = moment_;
    // const myDpStyles: string = require('./date-picker.component.css');
    // const myDpTpl: string = require('./date-picker.component.html');
    // webpack2_
    var DatePickerComponent = (function () {
        function DatePickerComponent() {
            this.locale = 'en';
            this.viewFormat = 'll';
            this.returnObject = 'js';
            this.onDatePickerCancel = new core.EventEmitter();
            this.onSelectDate = new core.EventEmitter();
            this.onDisplayMonths = false;
            this.onDisplayYears = false;
            this.displayYearsIndex = 0;
            this.monthsShort = moment$1.monthsShort();
        }
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.initValue();
                // default to current year range
                _.each(this.fullYearRange, function (v, i) {
                    _this.currentYear = _this.calendarDate.clone().startOf('year').year();
                    if (v.indexOf(_this.currentYear) !== -1) {
                        _this.displayYearsIndex = i;
                    }
                });
                this.displayYearRange = this.fullYearRange[this.displayYearsIndex];
                this.generateCalendar();
            };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.prev = /**
         * @return {?}
         */
            function () {
                if (this.onDisplayYears) {
                    this.displayYearsIndex--;
                    if (this.displayYearsIndex < 0) {
                        this.displayYearsIndex = 0;
                    }
                    this.displayYearRange = this.fullYearRange[this.displayYearsIndex];
                }
                else {
                    this.calendarDate = this.calendarDate.clone().subtract(1, 'M');
                }
                this.generateCalendar();
            };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.showMonthSelection = /**
         * @return {?}
         */
            function () {
                this.onDisplayMonths = true;
                this.onDisplayYears = false;
            };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.showYearSelection = /**
         * @return {?}
         */
            function () {
                this.onDisplayYears = true;
                this.onDisplayMonths = false;
            };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.next = /**
         * @return {?}
         */
            function () {
                if (this.onDisplayYears) {
                    this.displayYearsIndex++;
                    if (this.displayYearsIndex >= this.fullYearRange.length) {
                        this.displayYearsIndex = this.fullYearRange.length - 1;
                    }
                    this.displayYearRange = this.fullYearRange[this.displayYearsIndex++];
                }
                else {
                    this.calendarDate = this.calendarDate.clone().add(1, 'M');
                }
                this.generateCalendar();
            };
        /**
         * @param {?} day
         * @return {?}
         */
        DatePickerComponent.prototype.selectDay = /**
         * @param {?} day
         * @return {?}
         */
            function (day) {
                /** @type {?} */
                var daysDifference = day.diff(this.calendarDate.clone().startOf('date'), 'days');
                day = this.calendarDate.clone().add(daysDifference, 'd');
                /** @type {?} */
                var selectedDay = this.parseToReturnObjectType(day);
                this.onSelectDate.emit(selectedDay);
                this.cancelDatePicker();
                return;
            };
        /**
         * @param {?} month
         * @return {?}
         */
        DatePickerComponent.prototype.selectMonth = /**
         * @param {?} month
         * @return {?}
         */
            function (month) {
                this.calendarDate = this.calendarDate.clone().month(month);
                this.onDisplayMonths = false;
                this.generateCalendar();
            };
        /**
         * @param {?} year
         * @return {?}
         */
        DatePickerComponent.prototype.selectYear = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                this.calendarDate = this.calendarDate.clone().year(year);
                this.onDisplayYears = false;
                this.generateCalendar();
            };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.selectToday = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var today = this.parseToReturnObjectType(moment$1());
                this.onSelectDate.emit(today);
                this.cancelDatePicker();
                return;
            };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.clearPickDate = /**
         * @return {?}
         */
            function () {
                this.onSelectDate.emit(null);
                this.cancelDatePicker();
                return;
            };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.cancelDatePicker = /**
         * @return {?}
         */
            function () {
                this.onDatePickerCancel.emit(false);
                return;
            };
        /**
         * @protected
         * @return {?}
         */
        DatePickerComponent.prototype.generateYears = /**
         * @protected
         * @return {?}
         */
            function () {
                /** @type {?} */
                var currentYear = moment$1().year();
                /** @type {?} */
                var startYr = this.calendarDate.clone().subtract(100, 'y').year();
                // const endYr = this.calendarDate.clone().add(10, 'y').year();
                /** @type {?} */
                var years = [];
                for (var year = startYr; year <= currentYear; year++) {
                    years.push(year);
                }
                this.fullYearRange = _.chunk(years, 14);
            };
        /**
         * @protected
         * @return {?}
         */
        DatePickerComponent.prototype.initValue = /**
         * @protected
         * @return {?}
         */
            function () {
                // set moment locale (default is en)
                moment$1.locale(this.locale);
                // set today value
                this.today = moment$1().startOf('date');
                this.currentMonth = this.monthsShort[moment$1().month()];
                this.currentYear = moment$1().year();
                // set week days name array
                this.dayNames = moment$1.weekdaysShort(true);
                // check if the input initDate has value
                if (this.initDate) {
                    this.calendarDate = this.returnObject === 'string' ? moment$1(this.initDate, this.viewFormat) :
                        moment$1(this.initDate);
                    this.selectedDate = this.calendarDate.clone().startOf('date');
                }
                else {
                    this.calendarDate = moment$1();
                }
                this.generateYears();
            };
        /**
         * @protected
         * @return {?}
         */
        DatePickerComponent.prototype.generateCalendar = /**
         * @protected
         * @return {?}
         */
            function () {
                this.calendarDays = [];
                /** @type {?} */
                var start = 0 - (this.calendarDate.clone().startOf('month').day() +
                    (7 - moment$1.localeData().firstDayOfWeek())) % 7;
                /** @type {?} */
                var end = 41 + start;
                for (var i = start; i <= end; i += 1) {
                    /** @type {?} */
                    var day = this.calendarDate.clone().startOf('month').add(i, 'days');
                    this.calendarDays.push(day);
                }
            };
        /**
         * @protected
         * @param {?} day
         * @return {?}
         */
        DatePickerComponent.prototype.parseToReturnObjectType = /**
         * @protected
         * @param {?} day
         * @return {?}
         */
            function (day) {
                switch (this.returnObject) {
                    case 'js':
                        return day.toDate();
                    case 'string':
                        return day.format(this.viewFormat);
                    case 'moment':
                        return day;
                    case 'json':
                        return day.toJSON();
                    case 'array':
                        return day.toArray();
                    case 'iso':
                        return day.toISOString();
                    case 'object':
                        return day.toObject();
                    default:
                        return day;
                }
            };
        DatePickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'date-picker',
                        template: "<picker-modal (onOverlayClick)=\"cancelDatePicker()\">\n  <div class=\"picker-wrap\">\n    <div class=\"picker-box\">\n      <div class=\"picker-header\">\n        <div class=\"picker-header-nav\">\n          <span class=\"nav-prev\" (click)=\"prev()\"></span>\n        </div>\n        <div class=\"picker-header-content\">\n          <div class=\"content\">\n            <span (click)=\"showMonthSelection()\" class=\"month\">{{calendarDate | moment: \"MMMM\"}}</span>\n            <span class=\"seperator\">|</span>\n            <span (click)=\"showYearSelection()\" class=\"year\">{{calendarDate | moment: \"YYYY\"}}</span>\n          </div>\n        </div>\n        <div class=\"picker-header-nav\">\n          <span class=\"nav-next\" (click)=\"next()\"></span>\n        </div>\n      </div>\n      <div class=\"picker-calendar\">\n        <div class=\"picker-calendar-row\" *ngIf=\"!onDisplayMonths && !onDisplayYears\">\n          <span class=\"picker-weekday\" *ngFor=\"let day of dayNames\">{{ day }}</span>\n        </div>\n        <div class=\"picker-calendar-row\" *ngIf=\"!onDisplayMonths && !onDisplayYears\">\n                    <span class=\"picker-day\" (click)=\"selectDay(day)\" [ngClass]=\"{\n                       'out-focus': day.month() != calendarDate.month(),\n                       'today': day.isSame(today),\n                       'selected': day.isSame(selectedDate)\n                      }\" *ngFor=\"let day of calendarDays\">\n                    {{ day | moment: 'D'}}\n                </span>\n        </div>\n        <div class=\"picker-calendar-row\" *ngIf=\"onDisplayMonths\">\n                    <span class=\"picker-month\" *ngFor=\"let month of monthsShort\"\n                          (click)=\"selectMonth(month)\"\n                          [ngClass]=\"{\n                       'selected': month === currentMonth\n                      }\">\n                    {{ month }}\n                </span>\n        </div>\n        <div class=\"picker-calendar-row\" *ngIf=\"onDisplayYears\">\n                    <span class=\"picker-year\" *ngFor=\"let year of displayYearRange\"\n                          (click)=\"selectYear(year)\"\n                          [ngClass]=\"{\n                       'selected': year === currentYear\n                      }\">\n                    {{ year }}\n                </span>\n        </div>\n      </div>\n      <div class=\"picker-footer\">\n        <div class=\"picker-action action-today\" (click)=\"selectToday()\"><span class=\"text\">Today</span></div>\n        <div class=\"picker-action action-clear\" (click)=\"clearPickDate()\"><span class=\"text\">Clear</span></div>\n        <div class=\"picker-action action-close\" (click)=\"cancelDatePicker()\"><span class=\"text\">Close</span></div>\n      </div>\n    </div>\n  </div>\n</picker-modal>\n",
                        styles: ["*,::after,::before{box-sizing:border-box}.picker-wrap{width:95vw;max-width:666px}.picker-box{font-family:'Open Sans';min-width:400px!important;padding:.625rem 1rem;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.picker-footer,.picker-header{font-size:1.333rem;line-height:2.5rem;display:flex;height:2.5rem;width:100%}.picker-header-nav{position:relative;cursor:pointer;width:calc(100% / 8)}.picker-header-nav>*{position:absolute;top:50%;right:auto;bottom:auto;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.picker-header-nav .nav-next::before,.picker-header-nav .nav-prev::before{content:\" \";border-top:.5em solid transparent;border-bottom:.5em solid transparent;border-right:.75em solid #000;width:0;height:0;display:block;margin:0 auto}.picker-header-nav .nav-next::before{border-right:0;border-left:.75em solid #000}.picker-header-content{width:calc(100% * 6 / 8);text-align:center}.picker-header-content .month{font-size:1.778rem;line-height:2.5rem;margin-right:.5rem;font-weight:700}.picker-header-content .year{font-style:italic;color:#999}.picker-calendar{width:100%}.picker-calendar .picker-calendar-row{display:flex;flex-wrap:wrap;width:100%;margin-bottom:.625rem}.picker-calendar .picker-weekday{font-weight:700;text-align:left;color:#999;width:calc(100% / 7)}.picker-calendar .picker-day,.picker-calendar .picker-month,.picker-calendar .picker-year{font-size:1.333rem;line-height:2.5rem;position:relative;height:2.5rem;text-align:center;cursor:pointer;width:calc(100% / 7)}.picker-calendar .picker-day:hover,.picker-calendar .picker-month:hover,.picker-calendar .picker-year:hover{background:#b1dcfb}.picker-calendar .out-focus{color:#ddd}.picker-calendar .out-focus:hover{color:#000}.picker-calendar .selected{background:#0089ec;color:#fff}.picker-calendar .selected:hover{background:#0089ec}.picker-calendar .today::before{content:\" \";position:absolute;top:2px;right:2px;width:0;height:0;border-top:.5em solid #0059bc;border-left:.5em solid transparent}.picker-footer{cursor:pointer}.picker-footer .picker-action{text-align:center;width:calc(100% / 3)}.picker-footer .picker-action:hover{background-color:#b1dcfb}.picker-footer .picker-action .text{padding-left:.8rem}.picker-footer .action-clear::before,.picker-footer .action-close::before,.picker-footer .action-today::before{content:\" \";position:relative;display:inline-block;height:0;width:0}.picker-footer .action-today::before{border-top:.66em solid #0059bc;border-left:.66em solid transparent}.picker-footer .action-clear::before{top:-.5rem;width:1rem;border-top:3px solid #e20}.picker-footer .action-close::before{width:1rem;height:1rem;background:linear-gradient(to bottom,transparent 35%,#777 35%,#777 65%,transparent 65%),linear-gradient(to right,transparent 35%,#777 35%,#777 65%,transparent 65%);-webkit-transform:rotate(45deg);transform:rotate(45deg)}"],
                    },] },
        ];
        DatePickerComponent.ctorParameters = function () { return []; };
        DatePickerComponent.propDecorators = {
            initDate: [{ type: core.Input }],
            locale: [{ type: core.Input }],
            viewFormat: [{ type: core.Input }],
            returnObject: [{ type: core.Input }],
            onDatePickerCancel: [{ type: core.Output }],
            onSelectDate: [{ type: core.Output }]
        };
        return DatePickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$2 = moment_;
    // const myDpStyles: string = require('./time-picker.component.css');
    // const myDpTpl: string = require('./time-picker.component.html');
    // webpack2_
    var TimePickerComponent = (function () {
        function TimePickerComponent() {
            this.showSecond = true;
            this.viewFormat = 'hh:mm A';
            this.use12Hour = false;
            this.returnObject = 'js';
            this.onSelectTime = new core.EventEmitter();
            this.onTimePickerCancel = new core.EventEmitter();
            this.hourFormat = 'HH';
        }
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.use12Hour) {
                    this.hourFormat = 'hh';
                }
                this.time = this.initTime ? moment$2(this.initTime, this.viewFormat) : moment$2();
                // check if the input initDate has value
                if (this.initTime) {
                    this.time = this.returnObject === 'string' ? moment$2(this.initTime, this.viewFormat) :
                        moment$2(this.initTime);
                }
                else {
                    this.time = moment$2();
                }
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.increaseHour = /**
         * @return {?}
         */
            function () {
                this.time = this.time.clone().add(1, 'h');
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.decreaseHour = /**
         * @return {?}
         */
            function () {
                this.time = this.time.clone().subtract(1, 'h');
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.increaseMinute = /**
         * @return {?}
         */
            function () {
                this.time = this.time.clone().add(1, 'm');
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.decreaseMinute = /**
         * @return {?}
         */
            function () {
                this.time = this.time.clone().subtract(1, 'm');
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.increaseSecond = /**
         * @return {?}
         */
            function () {
                this.time = this.time.clone().add(1, 's');
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.decreaseSecond = /**
         * @return {?}
         */
            function () {
                this.time = this.time.clone().subtract(1, 's');
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.selectTime = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selectTime = this.parseToReturnObjectType(this.time);
                this.onSelectTime.emit(selectTime);
                this.cancelTimePicker();
                return;
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.selectNow = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selectTime = this.parseToReturnObjectType(moment$2());
                this.onSelectTime.emit(selectTime);
                this.cancelTimePicker();
                return;
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.clearTime = /**
         * @return {?}
         */
            function () {
                this.onSelectTime.emit(null);
                this.cancelTimePicker();
                return;
            };
        /**
         * @return {?}
         */
        TimePickerComponent.prototype.cancelTimePicker = /**
         * @return {?}
         */
            function () {
                this.onTimePickerCancel.emit(false);
                return;
            };
        /**
         * @protected
         * @param {?} time
         * @return {?}
         */
        TimePickerComponent.prototype.parseToReturnObjectType = /**
         * @protected
         * @param {?} time
         * @return {?}
         */
            function (time) {
                switch (this.returnObject) {
                    case 'js':
                        return time.toDate();
                    case 'string':
                        return time.format(this.viewFormat);
                    case 'moment':
                        return time;
                    case 'json':
                        return time.toJSON();
                    case 'array':
                        return time.toArray();
                    case 'iso':
                        return time.toISOString();
                    case 'object':
                        return time.toObject();
                    default:
                        return time;
                }
            };
        TimePickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'time-picker',
                        template: "<picker-modal (onOverlayClick)=\"cancelTimePicker()\">\n    <div class=\"picker-wrap\">\n        <div class=\"picker-box\">\n            <div class=\"picker-header\">Time Picker</div>\n            <div class=\"picker-table\">\n                <ul class=\"picker-table-time\">\n                    <li class=\"picker-table-number hour\">\n                        <span class=\"arrow up\" (click)=\"increaseHour()\"></span>\n                        {{time | moment: hourFormat}}\n                        <span class=\"arrow down\" (click)=\"decreaseHour()\"></span>\n                    </li>\n                    <li class=\"picker-table-separator\">:</li>\n                    <li class=\"picker-table-number minute\">\n                        <span class=\"arrow up\" (click)=\"increaseMinute()\"></span>\n                        {{time | moment: 'mm'}}\n                        <span class=\"arrow down\" (click)=\"decreaseMinute()\"></span>\n                    </li>\n                    <li *ngIf=\"showSecond\" class=\"picker-table-separator\">:</li>\n                    <li *ngIf=\"showSecond\" class=\"picker-table-number second\">\n                        <span class=\"arrow up\" (click)=\"increaseSecond()\"></span>\n                        {{time | moment: 'ss'}}\n                        <span class=\"arrow down\" (click)=\"decreaseSecond()\"></span>\n                    </li>\n                    <li *ngIf=\"use12Hour\" class=\"picker-table-meridiem meridiem\">\n                        {{time | moment: 'A'}}\n                    </li>\n                </ul>\n            </div>\n            <div class=\"picker-footer\">\n                <div class=\"picker-action action-now\" (click)=\"selectNow()\"><span class=\"text\">Now</span></div>\n                <div class=\"picker-action action-confirm\" (click)=\"selectTime()\"><span class=\"text\">Confirm</span></div>\n                <div class=\"picker-action action-clear\" (click)=\"clearTime()\"><span class=\"text\">Clear</span></div>\n                <div class=\"picker-action action-close\" (click)=\"cancelTimePicker()\"><span class=\"text\">Close</span></div>\n            </div>\n        </div>\n    </div>\n</picker-modal>\n",
                        styles: ["*,::after,::before{box-sizing:border-box}.picker-wrap{width:95vw;max-width:40rem;font-family:'Open Sans'}.picker-box{width:100%;padding:.625rem 1rem;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.picker-footer,.picker-header{font-size:1.333rem;line-height:2.5rem;height:2.5rem;width:100%}.picker-header{text-align:center}.picker-table{width:100%;margin:2.5rem 0}.picker-table-time{font-size:2.37rem;line-height:2.5rem;list-style:none;margin:0;padding:0;display:flex;justify-content:center;width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.picker-table-meridiem,.picker-table-number,.picker-table-separator{text-align:center}.picker-table-meridiem,.picker-table-number{position:relative;width:20%}.arrow{position:absolute;left:50%;border:solid #777;border-width:0 .2rem .2rem 0;display:inline-block;padding:.25rem;cursor:pointer}.arrow.up{top:-1rem;-webkit-transform:translateX(-50%) rotate(-135deg);transform:translateX(-50%) rotate(-135deg)}.arrow.down{bottom:-1rem;-webkit-transform:translateX(-50%) rotate(45deg);transform:translateX(-50%) rotate(45deg)}.arrow:hover{border-color:#1975d2}.picker-table-separator{width:calc(20% / 3)}.picker-footer{display:flex;justify-content:center;width:100%;cursor:pointer}.picker-footer .picker-action{width:25%;text-align:center}.picker-footer .picker-action:hover{background-color:#b1dcfb}.picker-footer .picker-action .text{padding-left:.8rem}.picker-footer .action-clear::before,.picker-footer .action-close::before,.picker-footer .action-confirm::before,.picker-footer .action-now::before{content:\" \";position:relative;display:inline-block;height:0;width:0}.picker-footer .action-now::before{border-top:.66em solid #0059bc;border-left:.66em solid transparent}.picker-footer .action-confirm::before{width:1rem;height:1rem;border-radius:100%;background-color:#00b5ad}.picker-footer .action-clear::before{top:-.5rem;width:1rem;border-top:3px solid #e20}.picker-footer .action-close::before{width:1rem;height:1rem;background:linear-gradient(to bottom,transparent 35%,#777 35%,#777 65%,transparent 65%),linear-gradient(to right,transparent 35%,#777 35%,#777 65%,transparent 65%);-webkit-transform:rotate(45deg);transform:rotate(45deg)}"],
                    },] },
        ];
        TimePickerComponent.ctorParameters = function () { return []; };
        TimePickerComponent.propDecorators = {
            initTime: [{ type: core.Input }],
            showSecond: [{ type: core.Input }],
            viewFormat: [{ type: core.Input }],
            use12Hour: [{ type: core.Input }],
            returnObject: [{ type: core.Input }],
            onSelectTime: [{ type: core.Output }],
            onTimePickerCancel: [{ type: core.Output }]
        };
        return TimePickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // const myDpStyles: string = require('./modal.component.css');
    // const myDpTpl: string = require('./modal.component.html');
    // webpack2_
    var ModalComponent = (function () {
        function ModalComponent() {
            this.onOverlayClick = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ModalComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ModalComponent.prototype.closeModal = /**
         * @return {?}
         */
            function () {
                this.onOverlayClick.emit(false);
            };
        ModalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'picker-modal',
                        template: "<section class=\"x-modal\">\n    <section class=\"modal-overlay\" (click)=\"closeModal()\"></section>\n    <section class=\"modal-main\" id=\"section-modal-main\">\n        <ng-content></ng-content>\n    </section>\n</section>\n",
                        styles: [":host{z-index:9999999999}*,::after,::before{box-sizing:border-box}.modal-main{position:absolute;left:19.6%;right:auto;top:auto;z-index:111;background-color:#fff;border:1px solid #d7dad7;border-radius:6px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);box-shadow:0 5px 15px rgba(0,0,0,.3)}"],
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        animations: [],
                    },] },
        ];
        ModalComponent.ctorParameters = function () { return []; };
        ModalComponent.propDecorators = {
            onOverlayClick: [{ type: core.Output }]
        };
        return ModalComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MomentPipe = (function () {
        function MomentPipe() {
        }
        /**
         * @param {?} moment
         * @param {?=} format
         * @return {?}
         */
        MomentPipe.prototype.transform = /**
         * @param {?} moment
         * @param {?=} format
         * @return {?}
         */
            function (moment, format) {
                return format ? moment.format(format) : moment.format('MMM DD, YYYY');
            };
        MomentPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'moment' },] },
        ];
        return MomentPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var Moment = moment_;
    var DateTimePickerComponent = (function () {
        function DateTimePickerComponent() {
            this.showDate = true;
            this.showTime = false;
            this.showWeeks = false;
            this.weeks = [2, 4, 6, 8, 12, 16, 24];
            this.onDateChange = new core.EventEmitter();
            this.showDatePicker = false;
            this.showTimePicker = false;
            this.onChange = function () { };
            this.onTouched = function () { };
        }
        /**
         * @return {?}
         */
        DateTimePickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} count
         * @return {?}
         */
        DateTimePickerComponent.prototype.weeksSelected = /**
         * @param {?} count
         * @return {?}
         */
            function (count) {
                /** @type {?} */
                var now = new Date();
                /** @type {?} */
                var nextDate = now.setDate(now.getDate() + count * 7);
                this.value = Moment(nextDate).format();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateTimePickerComponent.prototype.setDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                if (date && date !== '') {
                    this.value = Moment(date).format();
                }
                else {
                    this.value = date;
                }
            };
        /**
         * @param {?} time
         * @return {?}
         */
        DateTimePickerComponent.prototype.setTime = /**
         * @param {?} time
         * @return {?}
         */
            function (time) {
                if (time && time !== '') {
                    this.value = Moment(time).format();
                }
                else {
                    this.value = time;
                }
                return;
            };
        /**
         * @param {?} status
         * @return {?}
         */
        DateTimePickerComponent.prototype.toggleDatePicker = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                this.showDatePicker = status;
                /*setTimeout(function() {
                  let _body = document.getElementById('content-wrapper').getBoundingClientRect(),
                    elem = document.getElementById('section-modal-main');
                  if (elem) {
                    let elemBox = elem.getBoundingClientRect();
                    if (elemBox.bottom > _body.bottom) {
                      elem.style.bottom = '36px';
                    }
                  }
                }, 0);*/
                return;
            };
        /**
         * @param {?} status
         * @return {?}
         */
        DateTimePickerComponent.prototype.toggleTimePicker = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                this.showTimePicker = status;
                return;
            };
        Object.defineProperty(DateTimePickerComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this.modelValue;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this.modelValue = val;
                this.onDateChange.emit(val);
                this.onChange(val);
                this.onTouched();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} fn
         * @return {?}
         */
        DateTimePickerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        DateTimePickerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateTimePickerComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value instanceof Date) {
                    this.value = Moment(value).format();
                }
                else {
                    this.value = value;
                }
            };
        DateTimePickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'date-time-picker',
                        template: "<div class='row'>\n    <div *ngIf=\"!showTime\" class='col-xs-12 col-md-12'>\n        <input *ngIf=\"!showWeeks\" type=\"text\" class=\"form-control\" [value]=\"value | date: 'mediumDate'\" (focus)=\"toggleDatePicker(true)\"\n            readonly placeholder=\"Select Date\" />\n        <div *ngIf=\"showWeeks\" class=\"input-group\">\n            <input type=\"text\" class=\"form-control\" class=\"form-control\" [value]=\"value | date: 'mediumDate'\" (focus)=\"toggleDatePicker(true)\"\n                readonly placeholder=\"Select Date\">\n            <div class=\"input-group-btn\">\n                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Weeks <span class=\"caret\"></span></button>\n                <ul class=\"dropdown-menu up\">\n                    <li (click)=\"weeksSelected(count)\" *ngFor=\"let count of weeks\"><span> {{count}} Weeks</span></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"showTime\" class='col-xs-8 col-md-8'>\n        <input *ngIf=\"!showWeeks\" type=\"text\" class=\"form-control\" [value]=\"value | date: 'mediumDate'\" (focus)=\"toggleDatePicker(true)\"\n            readonly placeholder=\"Select Date\" />\n        <div *ngIf=\"showWeeks\" class=\"input-group\">\n            <input type=\"text\" class=\"form-control\" class=\"form-control\" [value]=\"value | date: 'mediumDate'\" (focus)=\"toggleDatePicker(true)\"\n                readonly placeholder=\"Select Date\">\n            <div class=\"input-group-btn\">\n                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Weeks <span class=\"caret\"></span></button>\n                <ul class=\"dropdown-menu up\">\n                    <li (click)=\"weeksSelected(count)\" *ngFor=\"let count of weeks\"><span> {{count}} Weeks</span></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"showTime\" class='col-xs-4 col-md-4'>\n        <input type=\"text\" class=\"form-control\" [value]=\"value | date: 'shortTime'\" (focus)=\"toggleTimePicker(true)\" readonly placeholder=\"Select Time\"\n        />\n    </div>\n</div>\n<date-picker *ngIf=\"showDatePicker\" [initDate]=\"value\" (onSelectDate)=\"setDate($event)\" (onDatePickerCancel)=\"toggleDatePicker($event)\"></date-picker>\n\n<time-picker *ngIf=\"showTimePicker\" [initTime]=\"value\" [use12Hour]=\"true\" (onSelectTime)=\"setTime($event)\" (onTimePickerCancel)=\"toggleTimePicker($event)\"></time-picker>\n",
                        styles: ["input[readonly]{background-color:#fff}.up{bottom:100%!important;top:auto!important}.glyphicon{top:1px}"],
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return DateTimePickerComponent; }),
                                multi: true
                            }
                        ]
                    },] },
        ];
        DateTimePickerComponent.ctorParameters = function () { return []; };
        DateTimePickerComponent.propDecorators = {
            modelValue: [{ type: core.Input }],
            showDate: [{ type: core.Input }],
            showTime: [{ type: core.Input }],
            showWeeks: [{ type: core.Input }],
            weeks: [{ type: core.Input }],
            onDateChange: [{ type: core.Output }]
        };
        return DateTimePickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateTimePickerModule = (function () {
        function DateTimePickerModule() {
        }
        DateTimePickerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule],
                        declarations: [
                            DatePickerComponent,
                            TimePickerComponent,
                            ModalComponent,
                            MomentPipe,
                            DateTimePickerComponent
                        ],
                        exports: [
                            DatePickerComponent,
                            TimePickerComponent,
                            ModalComponent,
                            MomentPipe,
                            DateTimePickerComponent
                        ],
                        providers: []
                    },] },
        ];
        return DateTimePickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$3 = moment_;
    /** @type {?} */
    var MY_FORMATS = {
        parse: {
            dateInput: 'LL',
        },
        display: {
            dateInput: 'LL',
            monthYearLabel: 'MMM YYYY',
            dateA11yLabel: 'LL',
            monthYearA11yLabel: 'MMMM YYYY',
        },
    };
    var NgxDateTimePickerComponent = (function () {
        function NgxDateTimePickerComponent() {
            // public date = new FormControl(moment());
            this.selectedTime = moment$3().format();
            this.selectedDate = moment$3().format();
            this.loadInitial = false;
            this.showTimePicker = false;
            this.weeks = [0, 2, 4, 6, 8, 12, 16, 24];
            this.showTime = false;
            this.showWeeks = true;
            this.onDateChange = new core.EventEmitter();
            this.onChange = function () { };
            this.onTouched = function () { };
        }
        /**
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.onTimeSelect = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var setDate = moment$3(this.selectedDate);
                /** @type {?} */
                var setTime = $event;
                this.setDateTime(setDate, setTime);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.onDateSelect = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var setDate = moment$3($event.value);
                /** @type {?} */
                var setTime = this.selectedTime;
                /** @type {?} */
                var dateString = this.setDateTime(setDate, setTime);
                /** @type {?} */
                var selectedDate = $event.value;
                this.value = dateString;
            };
        /**
         * @param {?} status
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.toggleTimePicker = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                this.showTimePicker = status;
                return;
            };
        /**
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.setCurrentTime = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var setDate = moment$3(this.selectedDate);
                /** @type {?} */
                var currentTime = moment$3().format('HH:mm:ss');
                this.setDateTime(setDate, currentTime);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.weekSelect = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var dateToUse;
                if (this.value === '' || typeof this.value === 'undefined') {
                    dateToUse = moment$3().format();
                }
                else {
                    dateToUse = moment$3(this.value).format();
                }
                /** @type {?} */
                var nextWeekDate = moment$3(dateToUse).add($event.value, 'weeks');
                /** @type {?} */
                var nextWeekTime = dateToUse;
                this.setDateTime(nextWeekDate, nextWeekTime);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.selectionChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                console.log('Week selected', $event);
            };
        /**
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.getWeekPickerCssClass = /**
         * @return {?}
         */
            function () {
                if (this.showTime) {
                    return 'col-sm-2 form-group';
                }
                return 'col-sm-3 form-group';
            };
        /**
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.getDatePickerCssClass = /**
         * @return {?}
         */
            function () {
                if (this.showTime && this.showWeeks) {
                    return 'col-sm-5 form-group';
                }
                if (this.showWeeks === true) {
                    return 'col-sm-9 form-group';
                }
                if (this.showTime === true) {
                    return 'col-sm-8 form-group';
                }
                return 'col-sm-12 form-group';
            };
        /**
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.getTimePickerCssClass = /**
         * @return {?}
         */
            function () {
                if (this.showTime && this.showWeeks) {
                    return 'col-sm-5 form-group';
                }
                if (this.showWeeks === true) {
                    return 'col-sm-9 form-group';
                }
                return 'col-sm-4 form-group';
            };
        /**
         * @param {?} setDate
         * @param {?} setTime
         * @return {?}
         */
        NgxDateTimePickerComponent.prototype.setDateTime = /**
         * @param {?} setDate
         * @param {?} setTime
         * @return {?}
         */
            function (setDate, setTime) {
                /** @type {?} */
                var newDate = moment$3(setDate).format('DD-MM-YYYY');
                /** @type {?} */
                var newTime;
                if (this.showTime) {
                    newTime = moment$3(setTime).format('HH:mm:ss');
                }
                else {
                    newTime = '00:00:00';
                }
                /** @type {?} */
                var newDateTime = moment$3(newDate + '' + newTime, 'DD-MM-YYYY HH:mm:ss');
                /** @type {?} */
                var dateTimeString = moment$3(newDateTime).format();
                this.selectedDate = dateTimeString;
                this.selectedTime = dateTimeString;
                this.value = dateTimeString;
                this.onChange(this.value);
                return dateTimeString;
            };
        NgxDateTimePickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-date-time-picker',
                        template: "<div>\n  <div class=\"row\">\n    <div [class]=\"getDatePickerCssClass()\">\n      <div class=\"input-group\">\n        <input matInput \n              [matDatepicker]=\"picker\" \n              class=\"form-control\" \n              [value]=\"value\" \n              placeholder=\"Choose a date\" \n              (dateChange)=\"onDateSelect($event)\"\n              (click)=\"picker.open()\"\n              readonly\n        >\n        <mat-datepicker #picker disabled=\"false\"></mat-datepicker>\n        <mat-datepicker-toggle matSuffix [for]=\"picker\" class=\"input-group-btn\"></mat-datepicker-toggle>\n      </div>\n    </div>\n    <div [class]=\"getWeekPickerCssClass()\" *ngIf=\"showWeeks\">\n      <mat-select placeholder=\"Select Weeks\"  class=\"form-control\" name=\"weeks\" (selectionChange) =\"weekSelect($event)\">\n        <mat-option *ngFor=\"let count of weeks\" [value]=\"count\">\n          {{count}} Weeks\n        </mat-option>\n      </mat-select>\n    </div>\n    <div [class]=\"getTimePickerCssClass()\" *ngIf=\"showTime\">\n          <input type=\"text\" class=\"form-control\" [value]=\"value | date: 'shortTime'\" (focus)=\"toggleTimePicker(true)\" readonly placeholder=\"Select Time\"\n          />\n          <time-picker *ngIf=\"showTimePicker\" [initTime]=\"value\" [use12Hour]=\"true\" (onSelectTime)=\"onTimeSelect($event)\" (onTimePickerCancel)=\"toggleTimePicker($event)\"></time-picker>\n    </div>\n  </div>\n</div>\n\n",
                        styles: ["#time-section{display:inline-block}#ngx-atp-time-picker,#ngx-mat-form-field{width:100%}.up{bottom:100%!important;top:auto!important}.time-btn{margin-top:-20px}"],
                        providers: [
                            { provide: core$1.MAT_DATE_FORMATS, useValue: MY_FORMATS },
                            { provide: core$1.DateAdapter, useClass: materialMomentAdapter.MomentDateAdapter },
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return NgxDateTimePickerComponent; }),
                                multi: true
                            }
                        ]
                    },] },
        ];
        NgxDateTimePickerComponent.propDecorators = {
            weeks: [{ type: core.Input }],
            modelValue: [{ type: core.Input }],
            showTime: [{ type: core.Input }],
            showWeeks: [{ type: core.Input }],
            onDateChange: [{ type: core.Output }]
        };
        return NgxDateTimePickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxDateTimePickerModule = (function () {
        function NgxDateTimePickerModule() {
        }
        NgxDateTimePickerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            datepicker.MatDatepickerModule,
                            formField.MatFormFieldModule,
                            material.MatNativeDateModule,
                            material.MatInputModule,
                            DateTimePickerModule,
                            // AmazingTimePickerModule,
                            select.MatSelectModule
                        ],
                        declarations: [
                            NgxDateTimePickerComponent
                        ],
                        exports: [
                            datepicker.MatDatepickerModule,
                            formField.MatFormFieldModule,
                            material.MatNativeDateModule,
                            material.MatInputModule,
                            NgxDateTimePickerComponent
                        ],
                        providers: []
                    },] },
        ];
        return NgxDateTimePickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Option$1 = (function () {
        function Option(options) {
            this.label = options.label;
            this.value = options.value;
        }
        return Option;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AfeNgSelectComponent = (function () {
        function AfeNgSelectComponent() {
            this.question_options = [];
            this.errors = [];
            this.propagateChange = function (_$$1) { };
        }
        /**
         * @param {?} event
         * @return {?}
         */
        AfeNgSelectComponent.prototype.getChangingText = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                // console.log(event);
                this.getData(event).subscribe(function (options) {
                    _this.question_options = options;
                });
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        AfeNgSelectComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        AfeNgSelectComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.propagateChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        AfeNgSelectComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) { };
        /**
         * @param {?} changes
         * @return {?}
         */
        AfeNgSelectComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) { };
        /**
         * @return {?}
         */
        AfeNgSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.extras) {
                    if (this.extras.originalValue) {
                        this.resolveSelectedOption(this.extras.originalValue).subscribe(function (option) {
                            _this.selected_question_option = option;
                        });
                    }
                }
            };
        /**
         * @param {?} searchText
         * @return {?}
         */
        AfeNgSelectComponent.prototype.getData = /**
         * @param {?} searchText
         * @return {?}
         */
            function (searchText) {
                var _this = this;
                this.subject = new rxjs.BehaviorSubject([]);
                /** @type {?} */
                var OptionsObservable = this.dataSource.searchOptions(searchText);
                OptionsObservable.subscribe(function (options) {
                    // console.log('options', options);
                    /** @type {?} */
                    var mappedOptions = new Array();
                    for (var i = 0; i < options.length; i++) {
                        mappedOptions.push(new Option$1(options[i]));
                    }
                    _this.subject.next(mappedOptions);
                }, function (error) {
                    _this.subject.error(error);
                });
                return this.subject.asObservable();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AfeNgSelectComponent.prototype.onValueChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) { };
        /**
         * @param {?} value
         * @return {?}
         */
        AfeNgSelectComponent.prototype.resolveSelectedOption = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                this.subjectOption = new rxjs.BehaviorSubject(null);
                /** @type {?} */
                var OptionObservable = this.dataSource.resolveSelectedValue(value);
                OptionObservable.subscribe(function (option) {
                    // console.log('option', option);
                    _this.subjectOption.next(option);
                }, function (error) {
                    _this.subjectOption.error(error);
                });
                return this.subjectOption.asObservable();
            };
        /**
         * @return {?}
         */
        AfeNgSelectComponent.prototype.resetOptions = /**
         * @return {?}
         */
            function () {
                this.subject.next(new Array());
            };
        AfeNgSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'afe-ng-select',
                        template: "<ng-select\n                   (searchInputText)=\"getChangingText($event)\"\n                    (ngModelChange)=\"onValueChange($event)\"\n                    [options]=\"question_options\"\n                    [multiple]=\"multiple\" >\n            </ng-select>\n  ",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return AfeNgSelectComponent; }),
                                multi: true
                            }
                        ]
                    },] },
        ];
        AfeNgSelectComponent.propDecorators = {
            dataSource: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            extras: [{ type: core.Input }]
        };
        return AfeNgSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormSchemaCompiler = (function () {
        function FormSchemaCompiler() {
        }
        /**
         * @param {?} formSchema
         * @param {?} referencedComponents
         * @return {?}
         */
        FormSchemaCompiler.prototype.compileFormSchema = /**
         * @param {?} formSchema
         * @param {?} referencedComponents
         * @return {?}
         */
            function (formSchema, referencedComponents) {
                // get all referenced forms
                /** @type {?} */
                var refForms = this.getReferencedForms(formSchema, referencedComponents);
                if (_.isEmpty(refForms)) {
                    return formSchema;
                }
                // get all place-holders from the form schema
                /** @type {?} */
                var placeHolders = this.getAllPlaceholderObjects(formSchema);
                if (_.isEmpty(placeHolders)) {
                    return formSchema;
                }
                // replace all placeHolders
                this.replaceAllPlaceholdersWithActualObjects(refForms, placeHolders);
                return formSchema;
            };
        /**
         * @private
         * @param {?} schemaArray
         * @param {?} nameOfSchema
         * @return {?}
         */
        FormSchemaCompiler.prototype.findSchemaByName = /**
         * @private
         * @param {?} schemaArray
         * @param {?} nameOfSchema
         * @return {?}
         */
            function (schemaArray, nameOfSchema) {
                if (_.isEmpty(schemaArray) || _.isEmpty(nameOfSchema)) {
                    return;
                }
                /** @type {?} */
                var foundSchema = {};
                _.each(schemaArray, function (schema) {
                    if (schema.name === nameOfSchema) {
                        foundSchema = schema;
                    }
                });
                return foundSchema;
            };
        /**
         * @private
         * @param {?} schema
         * @param {?} pageLabel
         * @return {?}
         */
        FormSchemaCompiler.prototype.getPageInSchemaByLabel = /**
         * @private
         * @param {?} schema
         * @param {?} pageLabel
         * @return {?}
         */
            function (schema, pageLabel) {
                if (_.isEmpty(schema) || _.isEmpty(pageLabel)) {
                    return;
                }
                /** @type {?} */
                var foundPage = {};
                _.each(schema.pages, function (page) {
                    if (page.label === pageLabel) {
                        foundPage = page;
                    }
                });
                return foundPage;
            };
        /**
         * @private
         * @param {?} schema
         * @param {?} pageLabel
         * @param {?} sectionLabel
         * @return {?}
         */
        FormSchemaCompiler.prototype.getSectionInSchemaByPageLabelBySectionLabel = /**
         * @private
         * @param {?} schema
         * @param {?} pageLabel
         * @param {?} sectionLabel
         * @return {?}
         */
            function (schema, pageLabel, sectionLabel) {
                if (_.isEmpty(schema) || _.isEmpty(pageLabel) || _.isEmpty(sectionLabel)) {
                    return;
                }
                /** @type {?} */
                var foundPage = this.getPageInSchemaByLabel(schema, pageLabel);
                if (_.isEmpty(foundPage)) {
                    return;
                }
                /** @type {?} */
                var foundSection = {};
                _.each(foundPage.sections, function (section) {
                    if (section.label === sectionLabel) {
                        foundSection = section;
                    }
                });
                return foundSection;
            };
        /**
         * @private
         * @param {?} schema
         * @param {?} questionId
         * @return {?}
         */
        FormSchemaCompiler.prototype.getQuestionByIdInSchema = /**
         * @private
         * @param {?} schema
         * @param {?} questionId
         * @return {?}
         */
            function (schema, questionId) {
                if (_.isEmpty(schema) || _.isEmpty(questionId)) {
                    return;
                }
                if (Array.isArray(schema)) {
                    /** @type {?} */
                    var question = void 0;
                    for (var i = 0; i < schema.length; i++) {
                        if (!_.isEmpty(schema[i])) {
                            question = this.getQuestionByIdInSchema(schema[i], questionId);
                        }
                        if (!_.isEmpty(question)) {
                            break;
                        }
                    }
                    return question;
                }
                else if (typeof schema === 'object') {
                    if (this.isQuestionObjectWithId(schema, questionId)) {
                        return schema;
                    }
                    else if (this.isSchemaSubObjectExpandable(schema)) {
                        /** @type {?} */
                        var toExpand = (schema.pages || schema.sections || schema.questions);
                        return this.getQuestionByIdInSchema(toExpand, questionId);
                    }
                    else {
                        return;
                    }
                }
                else {
                    return;
                }
            };
        /**
         * @private
         * @param {?} schema
         * @param {?} questionId
         * @return {?}
         */
        FormSchemaCompiler.prototype.getQuestionsArrayByQuestionIdInSchema = /**
         * @private
         * @param {?} schema
         * @param {?} questionId
         * @return {?}
         */
            function (schema, questionId) {
                if (_.isEmpty(schema) || _.isEmpty(questionId)) {
                    return;
                }
                return this.getQuestionsArrayByQuestionId(schema, schema, questionId);
            };
        /**
         * @private
         * @param {?} parent
         * @param {?} object
         * @param {?} questionId
         * @return {?}
         */
        FormSchemaCompiler.prototype.getQuestionsArrayByQuestionId = /**
         * @private
         * @param {?} parent
         * @param {?} object
         * @param {?} questionId
         * @return {?}
         */
            function (parent, object, questionId) {
                if (Array.isArray(object)) {
                    /** @type {?} */
                    var returnedValue = void 0;
                    for (var i = 0; i < object.length; i++) {
                        if (!_.isEmpty(object[i])) {
                            returnedValue = this.getQuestionsArrayByQuestionId(object, object[i], questionId);
                        }
                        if (!_.isEmpty(returnedValue)) {
                            break;
                        }
                    }
                    return returnedValue;
                }
                else if (typeof object === 'object') {
                    if (this.isQuestionObjectWithId(object, questionId)) {
                        return parent;
                    }
                    else if (this.isSchemaSubObjectExpandable(object)) {
                        /** @type {?} */
                        var toExpand = (object.pages || object.sections || object.questions);
                        return this.getQuestionsArrayByQuestionId(toExpand, toExpand, questionId);
                    }
                    else {
                        return;
                    }
                }
                else {
                    return;
                }
            };
        // object is page or section or question
        // object is page or section or question
        /**
         * @private
         * @param {?} object
         * @return {?}
         */
        FormSchemaCompiler.prototype.isSchemaSubObjectExpandable =
            // object is page or section or question
            /**
             * @private
             * @param {?} object
             * @return {?}
             */
            function (object) {
                if (typeof object === 'object') {
                    /** @type {?} */
                    var objectKeys = Object.keys(object);
                    if (_.includes(objectKeys, 'pages') ||
                        _.includes(objectKeys, 'sections') ||
                        _.includes(objectKeys, 'questions')) {
                        return true;
                    }
                }
                return false;
            };
        /**
         * @private
         * @param {?} object
         * @param {?} id
         * @return {?}
         */
        FormSchemaCompiler.prototype.isQuestionObjectWithId = /**
         * @private
         * @param {?} object
         * @param {?} id
         * @return {?}
         */
            function (object, id) {
                return object['id'] === id;
            };
        /**
         * @private
         * @param {?} schema
         * @return {?}
         */
        FormSchemaCompiler.prototype.getAllPlaceholderObjects = /**
         * @private
         * @param {?} schema
         * @return {?}
         */
            function (schema) {
                /** @type {?} */
                var referencedObjects = [];
                this.extractPlaceholderObjects(schema, referencedObjects);
                return referencedObjects;
            };
        /**
         * @private
         * @param {?} subSchema
         * @param {?} objectsArray
         * @return {?}
         */
        FormSchemaCompiler.prototype.extractPlaceholderObjects = /**
         * @private
         * @param {?} subSchema
         * @param {?} objectsArray
         * @return {?}
         */
            function (subSchema, objectsArray) {
                if (_.isEmpty(subSchema)) {
                    return;
                }
                if (Array.isArray(subSchema)) {
                    for (var i = 0; i < subSchema.length; i++) {
                        if (!_.isEmpty(subSchema[i])) {
                            this.extractPlaceholderObjects(subSchema[i], objectsArray);
                        }
                    }
                }
                else if (typeof subSchema === 'object') {
                    if (!_.isEmpty(subSchema.reference)) {
                        objectsArray.push(subSchema);
                    }
                    else if (this.isSchemaSubObjectExpandable(subSchema)) {
                        /** @type {?} */
                        var toExpand = (subSchema.pages || subSchema.sections || subSchema.questions);
                        this.extractPlaceholderObjects(toExpand, objectsArray);
                    }
                }
            };
        /**
         * @private
         * @param {?} placeHolderObject
         * @param {?} referenceObject
         * @return {?}
         */
        FormSchemaCompiler.prototype.fillPlaceholderObject = /**
         * @private
         * @param {?} placeHolderObject
         * @param {?} referenceObject
         * @return {?}
         */
            function (placeHolderObject, referenceObject) {
                for (var member in referenceObject) {
                    if (_.isEmpty(placeHolderObject[member])) {
                        placeHolderObject[member] = referenceObject[member];
                    }
                }
                return placeHolderObject;
            };
        /**
         * @private
         * @param {?} keyValReferencedForms
         * @param {?} placeHoldersArray
         * @return {?}
         */
        FormSchemaCompiler.prototype.replaceAllPlaceholdersWithActualObjects = /**
         * @private
         * @param {?} keyValReferencedForms
         * @param {?} placeHoldersArray
         * @return {?}
         */
            function (keyValReferencedForms, placeHoldersArray) {
                var _this = this;
                _.each(placeHoldersArray, function (placeHolder) {
                    /** @type {?} */
                    var referencedObject = _this.getReferencedObject(placeHolder.reference, keyValReferencedForms);
                    if (_.isEmpty(referencedObject)) {
                        console.error('Form compile: Error finding referenced object', placeHolder.reference);
                    }
                    else {
                        placeHolder = _this.fillPlaceholderObject(placeHolder, referencedObject);
                        placeHolder = _this.removeExcludedQuestionsFromPlaceholder(placeHolder);
                        delete placeHolder['reference'];
                    }
                });
                return placeHoldersArray;
            };
        /**
         * @private
         * @param {?} array
         * @param {?} object
         * @return {?}
         */
        FormSchemaCompiler.prototype.removeObjectFromArray = /**
         * @private
         * @param {?} array
         * @param {?} object
         * @return {?}
         */
            function (array, object) {
                /** @type {?} */
                var indexOfObject = array.indexOf(object);
                if (indexOfObject === -1) {
                    return;
                }
                array.splice(indexOfObject, 1);
            };
        /**
         * @private
         * @param {?} placeHolder
         * @return {?}
         */
        FormSchemaCompiler.prototype.removeExcludedQuestionsFromPlaceholder = /**
         * @private
         * @param {?} placeHolder
         * @return {?}
         */
            function (placeHolder) {
                var _this = this;
                if (Array.isArray(placeHolder.reference.excludeQuestions)) {
                    _.each(placeHolder.reference.excludeQuestions, function (excludedQuestionId) {
                        /** @type {?} */
                        var questionsArray = _this.getQuestionsArrayByQuestionIdInSchema(placeHolder, excludedQuestionId);
                        if (!Array.isArray(questionsArray)) {
                            return;
                        }
                        /** @type {?} */
                        var question = _this.getQuestionByIdInSchema(questionsArray, excludedQuestionId);
                        _this.removeObjectFromArray(questionsArray, question);
                    });
                }
                return placeHolder;
            };
        /**
         * @private
         * @param {?} referenceData
         * @param {?} keyValReferencedForms
         * @return {?}
         */
        FormSchemaCompiler.prototype.getReferencedObject = /**
         * @private
         * @param {?} referenceData
         * @param {?} keyValReferencedForms
         * @return {?}
         */
            function (referenceData, keyValReferencedForms) {
                if (_.isEmpty(referenceData.form)) {
                    console.error('Form compile: reference missing form attribute', referenceData);
                    return;
                }
                if (_.isEmpty(keyValReferencedForms[referenceData.form])) {
                    console.error('Form compile: referenced form alias not found', referenceData);
                    return;
                }
                if (!_.isEmpty(referenceData.questionId)) {
                    return this.getQuestionByIdInSchema(keyValReferencedForms[referenceData.form], referenceData.questionId);
                }
                if (!_.isEmpty(referenceData.page) && !_.isEmpty(referenceData.section)) {
                    return this.getSectionInSchemaByPageLabelBySectionLabel(keyValReferencedForms[referenceData.form], referenceData.page, referenceData.section);
                }
                if (!_.isEmpty(referenceData.page)) {
                    return this.getPageInSchemaByLabel(keyValReferencedForms[referenceData.form], referenceData.page);
                }
                console.error('Form compile: Unsupported reference type', referenceData.reference);
            };
        /**
         * @private
         * @param {?} formSchema
         * @param {?} formSchemasLookupArray
         * @return {?}
         */
        FormSchemaCompiler.prototype.getReferencedForms = /**
         * @private
         * @param {?} formSchema
         * @param {?} formSchemasLookupArray
         * @return {?}
         */
            function (formSchema, formSchemasLookupArray) {
                var _this = this;
                /** @type {?} */
                var referencedForms = formSchema.referencedForms;
                if (_.isEmpty(referencedForms)) {
                    return;
                }
                /** @type {?} */
                var keyValReferencedForms = {};
                _.each(referencedForms, function (reference) {
                    keyValReferencedForms[reference.alias] =
                        _this.findSchemaByName(formSchemasLookupArray, reference.formName);
                });
                return keyValReferencedForms;
            };
        FormSchemaCompiler.decorators = [
            { type: core.Injectable },
        ];
        FormSchemaCompiler.ctorParameters = function () { return []; };
        return FormSchemaCompiler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextInputQuestion = (function (_super) {
        __extends(TextInputQuestion, _super);
        function TextInputQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.placeholder = options.placeholder || '';
            _this.controlType = AfeControlType.AfeFormControl;
            return _this;
        }
        return TextInputQuestion;
    }(QuestionBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextAreaInputQuestion = (function (_super) {
        __extends(TextAreaInputQuestion, _super);
        function TextAreaInputQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.placeholder = options.placeholder || '';
            _this.isExpanded = options.isExpanded || false;
            _this.rows = options.rows || 18;
            _this.renderingType = 'textarea';
            _this.controlType = AfeControlType.AfeFormControl;
            return _this;
        }
        return TextAreaInputQuestion;
    }(TextInputQuestion));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectQuestion = (function (_super) {
        __extends(SelectQuestion, _super);
        function SelectQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.renderingType = 'select';
            _this.options = options.options || [];
            _this.controlType = AfeControlType.AfeFormControl;
            _this.dataSource = options.dataSource || '';
            return _this;
        }
        return SelectQuestion;
    }(QuestionBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UiSelectQuestion = (function (_super) {
        __extends(UiSelectQuestion, _super);
        function UiSelectQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.renderingType = 'ui-select';
            _this.options = options.options || [];
            _this.controlType = AfeControlType.AfeFormControl;
            return _this;
        }
        return UiSelectQuestion;
    }(QuestionBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateQuestion = (function (_super) {
        __extends(DateQuestion, _super);
        function DateQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.showTime = true;
            _this.showWeeksAdder = false;
            _this.renderingType = 'date';
            _this.controlType = AfeControlType.AfeFormControl;
            return _this;
        }
        return DateQuestion;
    }(QuestionBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MultiSelectQuestion = (function (_super) {
        __extends(MultiSelectQuestion, _super);
        function MultiSelectQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.renderingType = 'multi-select';
            _this.options = options.options || [];
            _this.controlType = AfeControlType.AfeFormControl;
            return _this;
        }
        return MultiSelectQuestion;
    }(SelectQuestion));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ NestedQuestion = (function (_super) {
        __extends(NestedQuestion, _super);
        function NestedQuestion(options) {
            return _super.call(this, options) || this;
        }
        return NestedQuestion;
    }(QuestionBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QuestionGroup = (function (_super) {
        __extends(QuestionGroup, _super);
        function QuestionGroup(options) {
            var _this = _super.call(this, options) || this;
            _this.isExpanded = true;
            _this.renderingType = 'group';
            _this.questions = options.questions || [];
            _this.controlType = AfeControlType.AfeFormGroup;
            return _this;
        }
        return QuestionGroup;
    }(NestedQuestion));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RepeatingQuestion = (function (_super) {
        __extends(RepeatingQuestion, _super);
        function RepeatingQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.renderingType = 'repeating';
            _this.questions = options.questions || [];
            _this.controlType = AfeControlType.AfeFormArray;
            return _this;
        }
        return RepeatingQuestion;
    }(NestedQuestion));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckBoxQuestion = (function (_super) {
        __extends(CheckBoxQuestion, _super);
        function CheckBoxQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.renderingType = 'checkbox';
            _this.options = options.options || [];
            _this.controlType = AfeControlType.AfeFormControl;
            return _this;
        }
        return CheckBoxQuestion;
    }(QuestionBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileUploadQuestion = (function (_super) {
        __extends(FileUploadQuestion, _super);
        function FileUploadQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.showTime = true;
            _this.showWeeksAdder = false;
            _this.renderingType = 'file';
            _this.dataSource = options.dataSource;
            _this.controlType = AfeControlType.AfeFormControl;
            return _this;
        }
        return FileUploadQuestion;
    }(QuestionBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TestOrderQuestion = (function (_super) {
        __extends(TestOrderQuestion, _super);
        function TestOrderQuestion(options) {
            var _this = _super.call(this, options) || this;
            _this.renderingType = 'select';
            _this.orderType = options.orderType;
            _this.selectableOrders = options.selectableOrders;
            _this.options = options.options;
            _this.orderSettingUuid = options.orderSettingUuid;
            _this.rendering = options.orderSettingUuid;
            _this.controlType = AfeControlType.AfeFormControl;
            return _this;
        }
        return TestOrderQuestion;
    }(QuestionBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateValidationModel = (function (_super) {
        __extends(DateValidationModel, _super);
        function DateValidationModel(validations) {
            var _this = _super.call(this, validations) || this;
            _this.allowFutureDates = false;
            _this.allowFutureDates = validations.allowFutureDates === 'true' ? true : false;
            return _this;
        }
        return DateValidationModel;
    }(ValidationModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaxValidationModel = (function (_super) {
        __extends(MaxValidationModel, _super);
        function MaxValidationModel(validations) {
            var _this = _super.call(this, validations) || this;
            /** @type {?} */
            var max = validations.max;
            _this.max = +max;
            return _this;
        }
        return MaxValidationModel;
    }(ValidationModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MinValidationModel = (function (_super) {
        __extends(MinValidationModel, _super);
        function MinValidationModel(validations) {
            var _this = _super.call(this, validations) || this;
            /** @type {?} */
            var min = validations.min;
            _this.min = +min;
            return _this;
        }
        return MinValidationModel;
    }(ValidationModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DummyDataSource = (function () {
        function DummyDataSource() {
            this.returnErrorOnNext = false;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        DummyDataSource.prototype.resolveSelectedValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var selectOptions = this.sampleData();
                selectOptions = selectOptions.map(function (obj) {
                    /** @type {?} */
                    var option = new Option$1({
                        label: obj.label,
                        value: obj.concept
                    });
                    return option;
                });
                selectOptions = selectOptions.filter(function (option) { return option.value === value; });
                /** @type {?} */
                var test = new rxjs.BehaviorSubject([]);
                if (!this.returnErrorOnNext) {
                    test.next(selectOptions[0]);
                }
                else {
                    test.error(new Error('Error loading Options'));
                }
                return test.asObservable();
            };
        /**
         * @param {?} url
         * @return {?}
         */
        DummyDataSource.prototype.fileUpload = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                return rxjs.of({ image: '' });
            };
        /**
         * @param {?} url
         * @return {?}
         */
        DummyDataSource.prototype.fetchFile = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                return rxjs.of({ image: '' });
            };
        /**
         * @param {?} searchText
         * @return {?}
         */
        DummyDataSource.prototype.searchOptions = /**
         * @param {?} searchText
         * @return {?}
         */
            function (searchText) {
                /** @type {?} */
                var selectOptions = this.sampleData();
                selectOptions = selectOptions.map(function (obj) {
                    /** @type {?} */
                    var option = new Option$1({
                        label: obj.label,
                        value: obj.concept
                    });
                    return option;
                });
                selectOptions = selectOptions.filter(function (option) { return option.label.indexOf(searchText) !== -1; });
                /** @type {?} */
                var test = new rxjs.BehaviorSubject([]);
                if (!this.returnErrorOnNext) {
                    test.next(selectOptions);
                }
                else {
                    test.error(new Error('Error loading Options'));
                }
                return test.asObservable();
            };
        /**
         * @return {?}
         */
        DummyDataSource.prototype.sampleData = /**
         * @return {?}
         */
            function () {
                return [
                    {
                        concept: 'a899e0ac-1350-11df-a1f1-0026b9348838',
                        label: 'None'
                    },
                    {
                        concept: 'a8ad1276-1350-11df-a1f1-0026b9348838',
                        label: 'Breathlessness'
                    },
                    {
                        concept: 'a892e4b4-1350-11df-a1f1-0026b9348838',
                        label: 'Chest pain'
                    },
                    {
                        concept: 'a8afc8b8-1350-11df-a1f1-0026b9348838',
                        label: 'Cough = 2 weeks'
                    },
                    {
                        concept: 'd7adae14-c386-49cc-8f7c-765d8ceec566',
                        label: 'Fever for = 2 weeks'
                    },
                    {
                        concept: '3f57aafc-7162-41da-a51b-6a804cb6f5e8',
                        label: 'New exposure to household contact with TB'
                    },
                    {
                        concept: 'a89807f0-1350-11df-a1f1-0026b9348838',
                        label: 'Noticeable Weight loss'
                    },
                    {
                        concept: 'e1862fef-68ed-4df4-90dd-a00152f719aa',
                        label: 'Night sweats = 2 weeks'
                    },
                    {
                        concept: 'a8ad462e-1350-11df-a1f1-0026b9348838',
                        label: 'Abdomen'
                    },
                    {
                        concept: 'f218c60e-4b54-475a-a4fa-facab9216da8',
                        label: 'Groin'
                    },
                    {
                        concept: 'a8a774b0-1350-11df-a1f1-0026b9348838',
                        label: 'Joints'
                    },
                    {
                        concept: '4639388c-ee31-4dcf-abb4-ad71253493bb',
                        label: 'Neck Kw'
                    }
                ];
            };
        return DummyDataSource;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$4 = moment_;
    var HistoricalEncounterDataService = (function () {
        function HistoricalEncounterDataService() {
            this.dataSources = {};
        }
        /**
         * @param {?} name
         * @param {?} encounters
         * @return {?}
         */
        HistoricalEncounterDataService.prototype.registerEncounters = /**
         * @param {?} name
         * @param {?} encounters
         * @return {?}
         */
            function (name, encounters) {
                var _this = this;
                /** @type {?} */
                var encStore = {
                    data: [],
                    getValue: function (key, index) {
                        if (index === void 0) {
                            index = 0;
                        }
                        /** @type {?} */
                        var pathArray = key.split('.');
                        if (pathArray.length > 0) {
                            return _this.getFirstValue(pathArray, encStore.data[index]);
                        }
                        return encStore.data[index][key];
                    },
                    getAllObjects: function () {
                        return encStore.data;
                    },
                    getSingleObject: function (index) {
                        if (index === void 0) {
                            index = 0;
                        }
                        return encStore.data[index];
                    }
                };
                if (_.isArray(encounters)) {
                    /** @type {?} */
                    var group_1 = [];
                    _.each(encounters, function (encounter) {
                        group_1.push(_this._transformEncounter(encounter));
                    });
                    // Sort them in reverse chronological order
                    encStore.data = _.sortBy(group_1, 'encounterDatetime').reverse();
                }
                else {
                    // Assume a single openmrs rest encounter object.
                    encStore.data.push(this._transformEncounter(encounters));
                }
                this.putObject(name, encStore);
            };
        /**
         * @param {?} name
         * @param {?} object
         * @return {?}
         */
        HistoricalEncounterDataService.prototype.putObject = /**
         * @param {?} name
         * @param {?} object
         * @return {?}
         */
            function (name, object) {
                this.dataSources[name] = object;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        HistoricalEncounterDataService.prototype.getObject = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.dataSources[name] || null;
            };
        /**
         * @param {?} path
         * @param {?} object
         * @return {?}
         */
        HistoricalEncounterDataService.prototype.getFirstValue = /**
         * @param {?} path
         * @param {?} object
         * @return {?}
         */
            function (path, object) {
                /** @type {?} */
                var answers = [];
                this.getAllValues(path, object, answers);
                if (answers.length > 0) {
                    return {
                        value: answers[0],
                        valueDate: moment$4(object.encounterDatetime).format('ll')
                    };
                }
            };
        /**
         * @param {?} path
         * @param {?} object
         * @param {?} answers
         * @return {?}
         */
        HistoricalEncounterDataService.prototype.getAllValues = /**
         * @param {?} path
         * @param {?} object
         * @param {?} answers
         * @return {?}
         */
            function (path, object, answers) {
                var _this = this;
                if (_.isNil(object)) {
                    return;
                }
                if (path.length <= 1) {
                    if (!_.isNil(object[path[0]])) {
                        answers.push(object[path[0]]);
                    }
                    return;
                }
                /** @type {?} */
                var newpath = path.splice(1);
                /** @type {?} */
                var key = path[0];
                if (_.isArray(object[key]) && object[key].length > 0) {
                    _.each(object[key], function (childObject) {
                        _this.getAllValues(newpath.slice(0), childObject, answers);
                    });
                }
                else {
                    this.getAllValues(newpath.slice(0), object[key], answers);
                }
            };
        /**
         * @private
         * @param {?} encounter
         * @return {?}
         */
        HistoricalEncounterDataService.prototype._transformEncounter = /**
         * @private
         * @param {?} encounter
         * @return {?}
         */
            function (encounter) {
                if (_.isNil(encounter)) {
                    return;
                }
                // Transform encounter Level details to key value pairs.
                /** @type {?} */
                var prevEncounter = {
                    encounterDatetime: encounter.encounterDatetime
                };
                if (encounter.location && encounter.location.uuid) {
                    prevEncounter.location = encounter.location.uuid;
                }
                if (encounter.patient && encounter.patient.uuid) {
                    prevEncounter.patient = encounter.patient.uuid;
                }
                if (encounter.form && encounter.form.uuid) {
                    prevEncounter.form = encounter.form.uuid;
                }
                if (encounter.encounterType && encounter.encounterType.uuid) {
                    prevEncounter.encounterType = encounter.encounterType.uuid;
                }
                if (encounter.provider) {
                    /** @type {?} */
                    var provider = encounter.provider;
                    prevEncounter.provider = provider.uuid;
                }
                // Deal with obs.
                if (encounter.obs) {
                    /** @type {?} */
                    var processedObs = this._transformObs(encounter.obs);
                    // add in individual processed obs to prevEncounter
                    _.extend(prevEncounter, processedObs);
                }
                return prevEncounter;
            };
        /**
         * @private
         * @param {?} obs
         * @return {?}
         */
        HistoricalEncounterDataService.prototype._transformObs = /**
         * @private
         * @param {?} obs
         * @return {?}
         */
            function (obs) {
                var _this = this;
                if (!obs) {
                    return null;
                }
                /** @type {?} */
                var obsRep = {};
                if (_.isArray(obs)) {
                    _.each(obs, function (singleObs) {
                        _this._augumentObs(obsRep, _this._transformObs(singleObs));
                    });
                    return obsRep;
                }
                else if (obs.groupMembers) {
                    /** @type {?} */
                    var group_2 = {};
                    _.each(obs.groupMembers, function (member) {
                        _this._augumentObs(group_2, _this._transformObs(member));
                    });
                    // Handle already existing data
                    if (obsRep[obs.concept.uuid] && _.isArray(obsRep[obs.concept.uuid])) {
                        obsRep[obs.concept.uuid].push(group_2);
                    }
                    else {
                        obsRep[obs.concept.uuid] = [group_2];
                    }
                    return obsRep;
                }
                else {
                    if (obs.value instanceof Object) {
                        obsRep[obs.concept.uuid] = obs.value.uuid;
                    }
                    else {
                        obsRep[obs.concept.uuid] = obs.value;
                    }
                    return obsRep;
                }
            };
        /**
         * @private
         * @param {?} existing
         * @param {?} toAdd
         * @return {?}
         */
        HistoricalEncounterDataService.prototype._augumentObs = /**
         * @private
         * @param {?} existing
         * @param {?} toAdd
         * @return {?}
         */
            function (existing, toAdd) {
                for (var key in toAdd) {
                    if (_.has(existing, key)) {
                        // check if not an array yet
                        if (!_.isArray(existing[key])) {
                            /** @type {?} */
                            var temp = existing[key];
                            existing[key] = [temp];
                        }
                        // Check whether the incoming is array (for group members)
                        if (_.isArray(toAdd[key])) {
                            Array.prototype.push.apply(existing[key], toAdd[key]);
                        }
                        else {
                            existing[key].push(toAdd[key]);
                        }
                    }
                    else {
                        existing[key] = toAdd[key];
                    }
                }
                return existing;
            };
        HistoricalEncounterDataService.decorators = [
            { type: core.Injectable },
        ];
        HistoricalEncounterDataService.ctorParameters = function () { return []; };
        return HistoricalEncounterDataService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HistoricalHelperService = (function () {
        function HistoricalHelperService() {
        }
        /**
         * @param {?} expr
         * @param {?} dataSources
         * @return {?}
         */
        HistoricalHelperService.prototype.evaluate = /**
         * @param {?} expr
         * @param {?} dataSources
         * @return {?}
         */
            function (expr, dataSources) {
                /** @type {?} */
                var HD = new HistoricalEncounterDataService();
                HD.registerEncounters('prevEnc', dataSources['rawPrevEnc']);
                /** @type {?} */
                var deps = {
                    HD: HD
                };
                /** @type {?} */
                var helper = new JsExpressionHelper();
                /** @type {?} */
                var control = new AfeFormControl();
                /** @type {?} */
                var runner = new ExpressionRunner();
                /** @type {?} */
                var runnable = runner.getRunnable(expr, control, helper.helperFunctions, deps);
                return runnable.run();
            };
        HistoricalHelperService.decorators = [
            { type: core.Injectable },
        ];
        HistoricalHelperService.ctorParameters = function () { return []; };
        return HistoricalHelperService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QuestionFactory = (function () {
        function QuestionFactory() {
            this.dataSources = {};
            this.historicalHelperService = new HistoricalHelperService();
        }
        /**
         * @param {?} formSchema
         * @param {?=} form
         * @return {?}
         */
        QuestionFactory.prototype.createQuestionModel = /**
         * @param {?} formSchema
         * @param {?=} form
         * @return {?}
         */
            function (formSchema, form) {
                if (form) {
                    /** @type {?} */
                    var dataSources = form.dataSourcesContainer.dataSources;
                    this.dataSources = dataSources;
                }
                return this.toFormQuestionModel(formSchema);
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toSelectQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new SelectQuestion({ options: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.options = schemaQuestion.questionOptions.answers.map(function (obj) {
                    return {
                        label: obj.label,
                        value: obj.concept
                    };
                });
                /** @type {?} */
                var options = question.options;
                options.splice(0, 0, {
                    label: '',
                    value: ''
                });
                question.renderingType = schemaQuestion.questionOptions.rendering;
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toNumericQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new TextInputQuestion({ placeholder: '', type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'number';
                question.placeholder = schemaQuestion.questionOptions.placeholder;
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.placeholder = schemaQuestion.questionOptions.placeholder || '';
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toNumberQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new TextInputQuestion({ placeholder: '', type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'number';
                question.placeholder = schemaQuestion.questionOptions.placeholder || '';
                question.extras = schemaQuestion;
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                question.validators = this.addValidators(schemaQuestion);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toDateQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                if (schemaQuestion.type === 'encounterDatetime') {
                    return this.toEncounterDatetimeQuestion(schemaQuestion);
                }
                /** @type {?} */
                var question = new DateQuestion({ type: '', key: '' });
                question.renderingType = 'date';
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.showTime = ((schemaQuestion.questionOptions.showTime));
                question.showWeeksAdder = schemaQuestion.questionOptions.weeksList ? true : false;
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toEncounterDatetimeQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new DateQuestion({ type: '', key: '' });
                question.label = schemaQuestion.label;
                question.renderingType = 'date';
                question.key = schemaQuestion.id;
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.showWeeksAdder = schemaQuestion.questionOptions.weeksList ? true : false;
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                question.showTime = true;
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toCheckBoxQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new CheckBoxQuestion({ options: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.extras = schemaQuestion;
                question.options = schemaQuestion.questionOptions.answers.map(function (obj) {
                    return {
                        label: obj.label,
                        value: obj.concept
                    };
                });
                question.options.splice(0, 0);
                question.renderingType = schemaQuestion.questionOptions.rendering;
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toMultiCheckboxQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new MultiSelectQuestion({ renderType: '', options: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.options = schemaQuestion.questionOptions.answers.map(function (obj) {
                    return {
                        label: obj.label,
                        value: obj.concept
                    };
                });
                question.validators = this.addValidators(schemaQuestion);
                question.dataSource = new DummyDataSource();
                question.extras = schemaQuestion;
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toTextAreaQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new TextAreaInputQuestion({
                    isExpanded: false, rows: 18,
                    placeholder: '', type: '', key: ''
                });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.placeholder = schemaQuestion.questionOptions.placeholder;
                question.isExpanded = schemaQuestion.isExpanded;
                question.rows = schemaQuestion.questionOptions.rows;
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.placeholder = schemaQuestion.questionOptions.placeholder || '';
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toTextQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new TextInputQuestion({ placeholder: '', type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'text';
                question.placeholder = schemaQuestion.questionOptions.placeholder;
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.placeholder = schemaQuestion.questionOptions.placeholder || '';
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toFileUploadQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new FileUploadQuestion({ type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'file';
                question.dataSource = 'file';
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toDrugQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new SelectQuestion({ options: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'remote-select';
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.dataSource = 'drug';
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toProblemQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new SelectQuestion({ options: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'remote-select';
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.dataSource = 'problem';
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toConceptAnswerSelect = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new SelectQuestion({ options: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'remote-select';
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.dataSource = schemaQuestion.questionOptions.dataSource || 'conceptAnswers';
                question.dataSourceOptions = {
                    concept: schemaQuestion.questionOptions.concept
                };
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toRepeatingQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new RepeatingQuestion({ questions: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.questions = this.getChildrenQuestionModels(schemaQuestion.questions);
                question.key = schemaQuestion.id;
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                if (schemaQuestion.type === 'testOrder') {
                    /** @type {?} */
                    var testOrder = this.toTestOrderQuestion(schemaQuestion);
                    /** @type {?} */
                    var orders = [];
                    orders.push(testOrder);
                    question.questions = orders;
                }
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toGroupQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new QuestionGroup({ questions: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.questions = this.getChildrenQuestionModels(schemaQuestion.questions);
                question.key = schemaQuestion.id;
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toPageQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                var _this = this;
                /** @type {?} */
                var question = new QuestionGroup({ questions: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.label;
                question.renderingType = 'page';
                question.controlType = AfeControlType.None;
                question.questions = [];
                schemaQuestion.sections.forEach(function (element) {
                    question.questions.push(_this.toSectionQuestion(element));
                });
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toFormQuestionModel = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                var _this = this;
                /** @type {?} */
                var question = new QuestionGroup({ questions: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.label;
                question.renderingType = 'form';
                question.controlType = AfeControlType.AfeFormGroup;
                question.extras = schemaQuestion;
                question.questions = [];
                schemaQuestion.pages.forEach(function (element) {
                    question.questions.push(_this.toPageQuestion(element));
                });
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toSectionQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new QuestionGroup({ questions: [], type: '', key: '' });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.label;
                question.renderingType = 'section';
                question.controlType = AfeControlType.None;
                question.isExpanded = schemaQuestion.isExpanded === 'true' ? true : false;
                question.questions = this.getSchemaQuestions(schemaQuestion.questions);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toPersonAttributeQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new UiSelectQuestion({
                    options: [], type: '', key: '', searchFunction: function () { },
                    resolveFunction: function () {
                    }
                });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'remote-select';
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.dataSource = 'personAttribute';
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toEncounterProviderQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new UiSelectQuestion({
                    options: [], type: '', key: '', searchFunction: function () { },
                    resolveFunction: function () {
                    }
                });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = 'remote-select';
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.dataSource = 'provider';
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toFieldSetQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var toReturn = this.toGroupQuestion(schemaQuestion);
                toReturn.renderingType = 'field-set';
                return toReturn;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toEncounterLocationQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new UiSelectQuestion({
                    options: [], type: '', key: '', searchFunction: function () { },
                    resolveFunction: function () {
                    }
                });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.renderingType = schemaQuestion.type;
                question.renderingType = 'remote-select';
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.dataSource = 'location';
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                this.addDisableOrHideProperty(schemaQuestion, question);
                this.addAlertProperty(schemaQuestion, question);
                this.addHistoricalExpressions(schemaQuestion, question);
                this.addCalculatorProperty(schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.toTestOrderQuestion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var question = new TestOrderQuestion({
                    type: '', key: '', orderType: '', selectableOrders: [],
                    orderSettingUuid: '', label: '', rendering: ''
                });
                question.label = schemaQuestion.label;
                question.key = schemaQuestion.id;
                question.validators = this.addValidators(schemaQuestion);
                question.extras = schemaQuestion;
                question.options = schemaQuestion.questionOptions.selectableOrders.map(function (obj) {
                    return {
                        label: obj.label,
                        value: obj.concept
                    };
                });
                /** @type {?} */
                var mappings = {
                    label: 'label',
                    required: 'required',
                    id: 'key'
                };
                this.copyProperties(mappings, schemaQuestion, question);
                return question;
            };
        /**
         * @param {?} schema
         * @return {?}
         */
        QuestionFactory.prototype.getSchemaQuestions = /**
         * @param {?} schema
         * @return {?}
         */
            function (schema) {
                /** @type {?} */
                var listQuestions = new Array();
                this.getQuestions(schema, listQuestions);
                return listQuestions;
            };
        /**
         * @param {?} schema
         * @param {?} foundArray
         * @return {?}
         */
        QuestionFactory.prototype.getQuestions = /**
         * @param {?} schema
         * @param {?} foundArray
         * @return {?}
         */
            function (schema, foundArray) {
                if (!Array.isArray(foundArray)) {
                    foundArray = [];
                }
                if (Array.isArray(schema)) {
                    for (var property in schema) {
                        if (schema.hasOwnProperty(property)) {
                            this.getQuestions(schema[property], foundArray);
                        }
                    }
                }
                if (schema && !Array.isArray(schema) && typeof schema === 'object') {
                    if (schema.questionOptions) {
                        if (schema.questionOptions.rendering === 'group' ||
                            schema.questionOptions.rendering === 'repeating') {
                            // schema.questions = this.getGroupMembers(schema.questions);
                            foundArray.push(this.toModel(schema, schema.questionOptions.rendering));
                        }
                        else if (schema.questionOptions.rendering === 'field-set') ;
                        else {
                            foundArray.push(this.toModel(schema, schema.questionOptions.rendering));
                        }
                    }
                    else {
                        for (var o in schema) {
                            if (schema.hasOwnProperty(o)) {
                                this.getQuestions(schema[o], foundArray);
                            }
                        }
                    }
                }
            };
        /**
         * @param {?} schema
         * @return {?}
         */
        QuestionFactory.prototype.getChildrenQuestionModels = /**
         * @param {?} schema
         * @return {?}
         */
            function (schema) {
                /** @type {?} */
                var children = [];
                this.getQuestions(schema, children);
                return children;
            };
        /**
         * @param {?} schema
         * @param {?} renderType
         * @return {?}
         */
        QuestionFactory.prototype.toModel = /**
         * @param {?} schema
         * @param {?} renderType
         * @return {?}
         */
            function (schema, renderType) {
                if (renderType === 'ui-select-extended') {
                    renderType = schema.type;
                }
                if (!schema.id) {
                    schema['id'] = this.generateId(10);
                }
                if (schema.questionOptions &&
                    (schema.questionOptions.showDate === true ||
                        schema.questionOptions.showDate === 'true')) {
                    schema = this.convertOldVersionComplexObsQuestionToNewVersion(schema);
                    renderType = 'field-set';
                }
                switch (renderType) {
                    case 'select':
                        return this.toSelectQuestion(schema);
                    case 'single-select':
                        return this.toSelectQuestion(schema);
                    case 'multi-select':
                        return this.toSelectQuestion(schema);
                    case 'numeric':
                        return this.toNumericQuestion(schema);
                    case 'number':
                        return this.toNumberQuestion(schema);
                    case 'encounterDatetime':
                        return this.toEncounterDatetimeQuestion(schema);
                    case 'date':
                        return this.toDateQuestion(schema);
                    case 'multiCheckbox':
                        return this.toMultiCheckboxQuestion(schema);
                    case 'drug':
                        return this.toDrugQuestion(schema);
                    case 'problem':
                        return this.toProblemQuestion(schema);
                    case 'group':
                        return this.toGroupQuestion(schema);
                    case 'field-set':
                        return this.toFieldSetQuestion(schema);
                    case 'repeating':
                        return this.toRepeatingQuestion(schema);
                    case 'personAttribute':
                        return this.toPersonAttributeQuestion(schema);
                    case 'text':
                        return this.toTextQuestion(schema);
                    case 'textarea':
                        return this.toTextAreaQuestion(schema);
                    case 'textarea':
                        return this.toTextAreaQuestion(schema);
                    case 'select-concept-answers':
                        return this.toConceptAnswerSelect(schema);
                    case 'encounterLocation':
                        return this.toEncounterLocationQuestion(schema);
                    case 'encounterDatetime':
                        return this.toEncounterDatetimeQuestion(schema);
                    case 'encounterProvider':
                        return this.toEncounterProviderQuestion(schema);
                    case 'radio':
                        return this.toCheckBoxQuestion(schema);
                    case 'checkbox':
                        return this.toCheckBoxQuestion(schema);
                    case 'encounterProvider':
                        return this.toEncounterProviderQuestion(schema);
                    case 'file':
                        return this.toFileUploadQuestion(schema);
                    default:
                        console.warn('New Schema Question Type found.........' + renderType);
                        return this.toTextQuestion(schema);
                }
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.convertOldVersionComplexObsQuestionToNewVersion = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var converted = {};
                converted.type = 'complex-obs';
                converted.label = schemaQuestion.label;
                converted.id = 'complex_' + schemaQuestion.id;
                converted.questionOptions = {};
                converted.questionOptions.concept = schemaQuestion.questionOptions.concept;
                converted.questionOptions.rendering = 'field-set';
                converted.questions = [];
                converted.validators = [];
                /** @type {?} */
                var mainField = JSON.parse(JSON.stringify(schemaQuestion));
                mainField.type = 'complex-obs-child';
                delete mainField.questionOptions.showDate;
                delete mainField.questionOptions.shownDateOptions;
                mainField.questionOptions.obsField = 'value';
                /** @type {?} */
                var dateField = {};
                dateField.type = 'complex-obs-child';
                dateField.label = 'Date of ' + mainField.label;
                dateField.id = 'date_' + mainField.id;
                dateField.questionOptions = {};
                dateField.questionOptions.concept = schemaQuestion.questionOptions.concept;
                dateField.questionOptions.rendering = 'date';
                dateField.questionOptions.obsField = 'obsDatetime';
                /** @type {?} */
                var dateOptions = (((Object))).assign({}, schemaQuestion.questionOptions.shownDateOptions);
                dateField.validators = dateOptions.validators;
                dateField.hide = dateOptions.hide;
                converted.questions.push(mainField);
                converted.questions.push(dateField);
                return converted;
            };
        /**
         * @param {?} mappings
         * @param {?} source
         * @param {?} destination
         * @return {?}
         */
        QuestionFactory.prototype.copyProperties = /**
         * @param {?} mappings
         * @param {?} source
         * @param {?} destination
         * @return {?}
         */
            function (mappings, source, destination) {
                for (var property in source) {
                    if (mappings.hasOwnProperty(property) && destination.hasOwnProperty(mappings[property])) {
                        destination[mappings[property]] = source[property];
                    }
                }
            };
        /**
         * @param {?} schemaQuestion
         * @return {?}
         */
        QuestionFactory.prototype.addValidators = /**
         * @param {?} schemaQuestion
         * @return {?}
         */
            function (schemaQuestion) {
                /** @type {?} */
                var validators = [];
                if (schemaQuestion.validators) {
                    // TODO - add more validator types
                    _.forEach(schemaQuestion.validators, function (validator) {
                        switch (validator.type) {
                            case 'date':
                                validators.push(new DateValidationModel(validator));
                                break;
                            case 'js_expression':
                                validators.push(new JsExpressionValidationModel(validator));
                                break;
                            case 'conditionalAnswered':
                                validators.push(new ConditionalValidationModel(validator));
                                break;
                            default:
                                validators.push(new ValidationModel(validator));
                                break;
                        }
                    });
                }
                /** @type {?} */
                var questionOptions = schemaQuestion.questionOptions;
                /** @type {?} */
                var renderingType = questionOptions ? questionOptions.rendering : '';
                switch (renderingType) {
                    case 'number':
                        if (questionOptions.max && questionOptions.min) {
                            validators.push(new MaxValidationModel({
                                type: 'max',
                                max: questionOptions.max
                            }));
                            validators.push(new MinValidationModel({
                                type: 'min',
                                min: questionOptions.min
                            }));
                        }
                        break;
                    default:
                        break;
                }
                // add conditional required validators
                if (typeof schemaQuestion.required === 'object') {
                    /** @type {?} */
                    var required = schemaQuestion.required;
                    if (required.type === 'conditionalRequired') {
                        validators.push(new ConditionalValidationModel({
                            referenceQuestionId: required.referenceQuestionId,
                            referenceQuestionAnswers: required.referenceQuestionAnswers,
                            type: required.type,
                            message: required.message,
                        }));
                    }
                }
                return validators;
            };
        /**
         * @param {?} schemaQuestion
         * @param {?} question
         * @return {?}
         */
        QuestionFactory.prototype.addHistoricalExpressions = /**
         * @param {?} schemaQuestion
         * @param {?} question
         * @return {?}
         */
            function (schemaQuestion, question) {
                if (schemaQuestion.historicalExpression && schemaQuestion.historicalExpression.length > 0) {
                    question.setHistoricalValue(true);
                    if (schemaQuestion.showHistoricalEncounterDate !== undefined) {
                        question.showHistoricalEncounterDate((schemaQuestion.showHistoricalEncounterDate === 'true'));
                    }
                    else {
                        question.showHistoricalEncounterDate();
                    }
                    /** @type {?} */
                    var origValue = this.historicalHelperService.evaluate(schemaQuestion.historicalExpression, this.dataSources);
                    question.historicalDataValue = origValue;
                    if (schemaQuestion.historicalPrepopulate) {
                        question.defaultValue = origValue;
                    }
                }
            };
        /**
         * @param {?} schemaQuestion
         * @param {?} question
         * @return {?}
         */
        QuestionFactory.prototype.addCalculatorProperty = /**
         * @param {?} schemaQuestion
         * @param {?} question
         * @return {?}
         */
            function (schemaQuestion, question) {
                if (schemaQuestion.questionOptions &&
                    typeof schemaQuestion.questionOptions.calculate === 'object') {
                    question.calculateExpression = schemaQuestion.questionOptions.calculate.calculateExpression;
                }
            };
        /**
         * @param {?} schemaQuestion
         * @param {?} question
         * @return {?}
         */
        QuestionFactory.prototype.addAlertProperty = /**
         * @param {?} schemaQuestion
         * @param {?} question
         * @return {?}
         */
            function (schemaQuestion, question) {
                if (schemaQuestion.alert) {
                    question.alert = schemaQuestion.alert;
                }
                // if (typeof schemaQuestion.message === 'object') {
                //   if (schemaQuestion.message.alertWhenExpression) {
                //     question.message = schemaQuestion.message.alertWhenExpression;
                //   }
                // }
            };
        /**
         * @param {?} schemaQuestion
         * @param {?} question
         * @return {?}
         */
        QuestionFactory.prototype.addDisableOrHideProperty = /**
         * @param {?} schemaQuestion
         * @param {?} question
         * @return {?}
         */
            function (schemaQuestion, question) {
                if (!!schemaQuestion.disable) {
                    question.disable = schemaQuestion.disable;
                }
                if (typeof schemaQuestion.disable === 'object') {
                    question.disable = schemaQuestion.disable.disableWhenExpression;
                }
                if (!!schemaQuestion.hide) {
                    question.hide = schemaQuestion.hide;
                }
                if (typeof schemaQuestion.hide === 'object') {
                    if (schemaQuestion.hide.hideWhenExpression) {
                        question.hide = schemaQuestion.hide.hideWhenExpression;
                    }
                }
            };
        /**
         * @private
         * @param {?} x
         * @return {?}
         */
        QuestionFactory.prototype.generateId = /**
         * @private
         * @param {?} x
         * @return {?}
         */
            function (x) {
                /** @type {?} */
                var s = '_';
                while (s.length < x && x > 0) {
                    /** @type {?} */
                    var r = Math.random();
                    s += (r < 0.1 ? Math.floor(r * 100) :
                        String.fromCharCode(Math.floor(r * 26) + (r > 0.5 ? 97 : 65)));
                }
                return '_' + s;
            };
        return QuestionFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Form = (function () {
        function Form(schema, formFactory, questionFactory) {
            this.schema = schema;
            this.formFactory = formFactory;
            this.questionFactory = questionFactory;
            this.valueProcessingInfo = {};
            this.existingOrders = {};
            this._showErrors = false;
            this._dataSourcesContainer = new DataSources();
        }
        Object.defineProperty(Form.prototype, "dataSourcesContainer", {
            get: /**
             * @return {?}
             */ function () {
                return this._dataSourcesContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} node
         * @param {?} path
         * @param {?} found
         * @return {?}
         */
        Form.prototype.searchNodeByPath = /**
         * @param {?} node
         * @param {?} path
         * @param {?} found
         * @return {?}
         */
            function (node, path, found) {
                var _this = this;
                /** @type {?} */
                var children = node.children;
                for (var key in children) {
                    if (children.hasOwnProperty(key)) {
                        /** @type {?} */
                        var child = children[key];
                        if (child instanceof GroupNode) {
                            if (path === child.path) {
                                found.push(child);
                                return found;
                            }
                            this.searchNodeByPath(child, path, found);
                        }
                        else if (child instanceof LeafNode) {
                            if (path === child.path) {
                                found.push(child);
                                return found;
                            }
                        }
                        else if (child instanceof ArrayNode) {
                            if (path === child.path) {
                                found.push(child);
                                return found;
                            }
                            /** @type {?} */
                            var aChild = ((child));
                            aChild.children.forEach(function (aChildNode) {
                                _this.searchNodeByPath(aChildNode, path, found);
                            });
                        }
                    }
                }
                return found;
            };
        /**
         * @param {?} questionId
         * @param {?=} questionType
         * @return {?}
         */
        Form.prototype.searchNodeByQuestionId = /**
         * @param {?} questionId
         * @param {?=} questionType
         * @return {?}
         */
            function (questionId, questionType) {
                /** @type {?} */
                var found = [];
                if (questionType) {
                    this.searchNodeByQuestionType(this.rootNode, questionType, found);
                }
                else {
                    this.findNodesByQuestionId(this.rootNode, questionId, found);
                }
                return found;
            };
        /**
         * @param {?} rootNode
         * @param {?} questionType
         * @param {?} found
         * @return {?}
         */
        Form.prototype.searchNodeByQuestionType = /**
         * @param {?} rootNode
         * @param {?} questionType
         * @param {?} found
         * @return {?}
         */
            function (rootNode, questionType, found) {
                var _this = this;
                if (rootNode instanceof GroupNode) {
                    /** @type {?} */
                    var nodeAsGroup = ((rootNode));
                    // tslint:disable-next-line:forin
                    for (var o in nodeAsGroup.children) {
                        this.searchNodeByQuestionType(nodeAsGroup.children[o], questionType, found);
                    }
                }
                if (rootNode instanceof ArrayNode) {
                    /** @type {?} */
                    var nodeAsArray = ((rootNode));
                    nodeAsArray.children.forEach(function (node) {
                        _this.searchNodeByQuestionType(node, questionType, found);
                    });
                }
                if (rootNode instanceof LeafNode) {
                    /** @type {?} */
                    var questionBase = rootNode.question;
                    if (questionBase.extras && questionBase.extras.type && questionBase.extras.type === questionType) {
                        found.push(rootNode);
                    }
                }
            };
        /**
         * @private
         * @param {?} rootNode
         * @param {?} questionId
         * @param {?} results
         * @return {?}
         */
        Form.prototype.findNodesByQuestionId = /**
         * @private
         * @param {?} rootNode
         * @param {?} questionId
         * @param {?} results
         * @return {?}
         */
            function (rootNode, questionId, results) {
                var _this = this;
                if (rootNode.question.key === questionId) {
                    results.push(rootNode);
                }
                if (rootNode instanceof GroupNode) {
                    /** @type {?} */
                    var nodeAsGroup = ((rootNode));
                    // tslint:disable-next-line:forin
                    for (var o in nodeAsGroup.children) {
                        this.findNodesByQuestionId(nodeAsGroup.children[o], questionId, results);
                    }
                }
                if (rootNode instanceof ArrayNode) {
                    /** @type {?} */
                    var nodeAsArray = ((rootNode));
                    nodeAsArray.children.forEach(function (node) {
                        _this.findNodesByQuestionId(node, questionId, results);
                    });
                }
            };
        Object.defineProperty(Form.prototype, "valid", {
            get: /**
             * @return {?}
             */ function () {
                return this.rootNode.control.valid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Form.prototype, "showErrors", {
            get: /**
             * @return {?}
             */ function () {
                return this._showErrors;
            },
            set: /**
             * @param {?} show
             * @return {?}
             */ function (show) {
                this._showErrors = show;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} node
         * @param {?=} invalidControlNodes
         * @return {?}
         */
        Form.prototype.markInvalidControls = /**
         * @param {?} node
         * @param {?=} invalidControlNodes
         * @return {?}
         */
            function (node, invalidControlNodes) {
                var _this = this;
                /** @type {?} */
                var children = node.children;
                for (var key in children) {
                    if (children.hasOwnProperty(key)) {
                        /** @type {?} */
                        var child = children[key];
                        if (child instanceof GroupNode) {
                            this.markInvalidControls(child, invalidControlNodes);
                        }
                        else if (child instanceof LeafNode) {
                            /** @type {?} */
                            var questionBase = (((child))).question;
                            if (questionBase.key && questionBase.key.length > 0) {
                                /** @type {?} */
                                var c = ((child.control));
                                if (!c.valid && !c.disabled) {
                                    if (invalidControlNodes) {
                                        invalidControlNodes.push(child);
                                    }
                                    c.markAsTouched();
                                }
                            }
                        }
                        else if (child instanceof ArrayNode) {
                            /** @type {?} */
                            var arrayNode = ((child));
                            if (arrayNode && arrayNode.children && arrayNode.children.length > 0) {
                                _.forEach(arrayNode.children, function (groupNode) {
                                    _this.markInvalidControls(groupNode, invalidControlNodes);
                                });
                            }
                        }
                    }
                }
                return invalidControlNodes;
            };
        /**
         * @return {?}
         */
        Form.prototype.updateHiddenDisabledStateForAllControls = /**
         * @return {?}
         */
            function () {
                this._updateHiddenDisabledStateForAllControls(this.rootNode);
            };
        /**
         * @return {?}
         */
        Form.prototype.updateAlertsForAllControls = /**
         * @return {?}
         */
            function () {
                this._updateAlertsForAllControls(this.rootNode);
            };
        /**
         * @private
         * @param {?} rootNode
         * @return {?}
         */
        Form.prototype._updateAlertsForAllControls = /**
         * @private
         * @param {?} rootNode
         * @return {?}
         */
            function (rootNode) {
                var _this = this;
                if (rootNode.control) {
                    if ((((rootNode.control))).updateAlert) {
                        (((rootNode.control))).updateAlert();
                    }
                }
                if (rootNode instanceof GroupNode) {
                    /** @type {?} */
                    var nodeAsGroup = ((rootNode));
                    // tslint:disable-next-line:forin
                    for (var o in nodeAsGroup.children) {
                        this._updateAlertsForAllControls(nodeAsGroup.children[o]);
                    }
                }
                if (rootNode instanceof ArrayNode) {
                    /** @type {?} */
                    var nodeAsArray = ((rootNode));
                    nodeAsArray.children.forEach(function (node) {
                        _this._updateAlertsForAllControls(node);
                    });
                }
            };
        /**
         * @private
         * @param {?} rootNode
         * @return {?}
         */
        Form.prototype._updateHiddenDisabledStateForAllControls = /**
         * @private
         * @param {?} rootNode
         * @return {?}
         */
            function (rootNode) {
                var _this = this;
                if (rootNode.control) {
                    if ((((rootNode.control))).updateDisabledState) {
                        (((rootNode.control))).updateDisabledState();
                    }
                    if ((((rootNode.control))).updateHiddenState) {
                        (((rootNode.control))).updateHiddenState();
                    }
                }
                if (rootNode instanceof GroupNode) {
                    /** @type {?} */
                    var nodeAsGroup = ((rootNode));
                    // tslint:disable-next-line:forin
                    for (var o in nodeAsGroup.children) {
                        this._updateHiddenDisabledStateForAllControls(nodeAsGroup.children[o]);
                    }
                }
                if (rootNode instanceof ArrayNode) {
                    /** @type {?} */
                    var nodeAsArray = ((rootNode));
                    nodeAsArray.children.forEach(function (node) {
                        _this._updateHiddenDisabledStateForAllControls(node);
                    });
                }
            };
        return Form;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormFactory = (function () {
        function FormFactory(controlService, questionFactroy, controlRelationsFactory) {
            this.controlService = controlService;
            this.questionFactroy = questionFactroy;
            this.controlRelationsFactory = controlRelationsFactory;
            this.hd = {
                getValue: function () {
                    return 20;
                }
            };
        }
        /**
         * @param {?} schema
         * @param {?=} dataSource
         * @return {?}
         */
        FormFactory.prototype.createForm = /**
         * @param {?} schema
         * @param {?=} dataSource
         * @return {?}
         */
            function (schema, dataSource) {
                /** @type {?} */
                var form = new Form(schema, this, this.questionFactroy);
                if (dataSource) {
                    for (var key in dataSource) {
                        if (dataSource.hasOwnProperty(key)) {
                            form.dataSourcesContainer.registerDataSource(key, dataSource[key], false);
                        }
                    }
                }
                /** @type {?} */
                var question = this.questionFactroy.createQuestionModel(schema, form);
                form.rootNode = ((this.createNode(question, null, null, form)));
                this.buildRelations(form.rootNode);
                form.updateHiddenDisabledStateForAllControls();
                form.updateAlertsForAllControls();
                return form;
            };
        /**
         * @param {?} rootNode
         * @return {?}
         */
        FormFactory.prototype.buildRelations = /**
         * @param {?} rootNode
         * @return {?}
         */
            function (rootNode) {
                Validations.JSExpressionValidatorsEnabled = false;
                this.controlRelationsFactory.buildRelations(rootNode);
                // enable js expression validations
                Validations.JSExpressionValidatorsEnabled = true;
            };
        /**
         * @param {?} question
         * @param {?=} parentNode
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormFactory.prototype.createNode = /**
         * @param {?} question
         * @param {?=} parentNode
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (question, parentNode, parentControl, form) {
                /** @type {?} */
                var node = null;
                if (question instanceof NestedQuestion) {
                    if (question instanceof RepeatingQuestion) {
                        node = this.createArrayNode(question, parentNode, parentControl, form);
                    }
                    else {
                        node = this.createGroupNode(question, parentNode, parentControl, form);
                    }
                }
                else {
                    node = this.createLeafNode(question, parentNode, parentControl, form);
                }
                return node;
            };
        /**
         * @param {?} question
         * @param {?} parentNode
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormFactory.prototype.createLeafNode = /**
         * @param {?} question
         * @param {?} parentNode
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (question, parentNode, parentControl, form) {
                /** @type {?} */
                var controlModel = this.controlService.generateControlModel(question, parentControl, false, form);
                return new LeafNode(question, controlModel, null, form, parentNode ? parentNode.path : undefined);
            };
        /**
         * @param {?} question
         * @param {?=} parentNode
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormFactory.prototype.createGroupNode = /**
         * @param {?} question
         * @param {?=} parentNode
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (question, parentNode, parentControl, form) {
                /** @type {?} */
                var controlModel = ((this.controlService.generateControlModel(question, parentControl, false, form)));
                /** @type {?} */
                var groupNode = new GroupNode(question, controlModel, null, form, parentNode ? parentNode.path : undefined);
                this.createNodeChildren(question, groupNode, (controlModel || parentControl), form);
                return groupNode;
            };
        /**
         * @param {?} question
         * @param {?=} parentNode
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormFactory.prototype.createArrayNode = /**
         * @param {?} question
         * @param {?=} parentNode
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (question, parentNode, parentControl, form) {
                var _this = this;
                /** @type {?} */
                var controlModel = ((this.controlService.generateControlModel(question, parentControl, false, form)));
                /** @type {?} */
                var arrayNode = new ArrayNode(question, controlModel, parentControl, this, form, parentNode ? parentNode.path : undefined);
                arrayNode.createChildFunc = this.createArrayNodeChild;
                arrayNode.removeChildFunc = this.removeArrayNodeChild;
                arrayNode.addChildNodeCreatedListener(function (node) {
                    Validations.JSExpressionValidatorsEnabled = false;
                    _this.controlRelationsFactory.buildArrayNodeRelations(node);
                    Validations.JSExpressionValidatorsEnabled = true;
                });
                return arrayNode;
            };
        /**
         * @param {?} question
         * @param {?} node
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
        FormFactory.prototype.createNodeChildren = /**
         * @param {?} question
         * @param {?} node
         * @param {?=} parentControl
         * @param {?=} form
         * @return {?}
         */
            function (question, node, parentControl, form) {
                var _this = this;
                question.questions.forEach(function (element) {
                    /** @type {?} */
                    var child = _this.createNode(element, node, parentControl, form);
                    node.setChild(element.key, child);
                });
                return node.children;
            };
        /**
         * @param {?} question
         * @param {?} node
         * @param {?=} factory
         * @return {?}
         */
        FormFactory.prototype.createArrayNodeChild = /**
         * @param {?} question
         * @param {?} node
         * @param {?=} factory
         * @return {?}
         */
            function (question, node, factory) {
                if (factory === null || factory === undefined) {
                    factory = this;
                }
                /** @type {?} */
                var groupQuestion = new QuestionGroup({
                    key: node.path + '.' + node.children.length + '',
                    type: 'group', extras: question.extras, label: '', questions: question.questions
                });
                if (question.controlType === AfeControlType.None) {
                    groupQuestion.controlType = question.controlType;
                }
                /** @type {?} */
                var group = factory.createGroupNode(groupQuestion, null, null, node.form);
                node.children.push(group);
                if (node.control instanceof AfeFormArray) {
                    /** @type {?} */
                    var nodeControl = ((node.control));
                    nodeControl.setControl(nodeControl.controls.length, group.control);
                }
                return group;
            };
        /**
         * @param {?} index
         * @param {?} node
         * @return {?}
         */
        FormFactory.prototype.removeArrayNodeChild = /**
         * @param {?} index
         * @param {?} node
         * @return {?}
         */
            function (index, node) {
                /** @type {?} */
                var nodeToRemove = node.children[index];
                node.children.splice(index, 1);
                if (node.control !== null || node.control !== undefined) {
                    if (node.control instanceof AfeFormArray) {
                        /** @type {?} */
                        var control = ((node.control));
                        /** @type {?} */
                        var controlIndexToRemove = control.controls.indexOf(nodeToRemove.control);
                        if (controlIndexToRemove >= 0) {
                            control.removeAt(controlIndexToRemove);
                        }
                    }
                }
            };
        FormFactory.decorators = [
            { type: core.Injectable },
        ];
        FormFactory.ctorParameters = function () {
            return [
                { type: FormControlService },
                { type: QuestionFactory },
                { type: ControlRelationsFactory }
            ];
        };
        return FormFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$5 = moment_;
    var ObsAdapterHelper = (function () {
        function ObsAdapterHelper() {
        }
        /**
         * @param {?} node
         * @param {?} obsArray
         * @return {?}
         */
        ObsAdapterHelper.prototype.findObsAnswerToQuestion = /**
         * @param {?} node
         * @param {?} obsArray
         * @return {?}
         */
            function (node, obsArray) {
                var _this = this;
                /** @type {?} */
                var found = [];
                if (!this.isObsNode(node)) {
                    return found;
                }
                if (node instanceof LeafNode ||
                    (node instanceof GroupNode &&
                        node.question.extras.type === 'complex-obs')) {
                    _.each(obsArray, function (item) {
                        if (item.concept &&
                            item.concept.uuid === node.question.extras.questionOptions.concept) {
                            found.push(item);
                        }
                    });
                    return found;
                }
                // At this point the node is either a group or a repeating node
                /** @type {?} */
                var childQuestionsUuids = this.getChildQuestionsConceptUuids(node);
                if (childQuestionsUuids.length > 0) {
                    _.each(obsArray, function (obs) {
                        if (obs.concept &&
                            obs.concept.uuid === node.question.extras.questionOptions.concept &&
                            Array.isArray(obs.groupMembers) &&
                            _this.isSubsetOf(childQuestionsUuids, _this.getGroupMembersConceptUuids(obs))) {
                            found.push(obs);
                        }
                    });
                }
                return found;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.getChildQuestionsConceptUuids = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var found = [];
                if (node.question.extras && node.question.extras.questions) {
                    _.each(node.question.extras.questions, function (question) {
                        if (question.questionOptions &&
                            question.questionOptions.concept) {
                            found.push(question.questionOptions.concept);
                        }
                    });
                }
                return found;
            };
        /**
         * @param {?} obsWithGroupMembers
         * @return {?}
         */
        ObsAdapterHelper.prototype.getGroupMembersConceptUuids = /**
         * @param {?} obsWithGroupMembers
         * @return {?}
         */
            function (obsWithGroupMembers) {
                /** @type {?} */
                var found = [];
                if (Array.isArray(obsWithGroupMembers.groupMembers)) {
                    _.each(obsWithGroupMembers.groupMembers, function (member) {
                        found.push(member.concept.uuid);
                    });
                }
                return found;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.isObsNode = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                return node.question.extras &&
                    (node.question.extras.type === 'obs' ||
                        node.question.extras.type === 'obsGroup' ||
                        node.question.extras.type === 'complex-obs' ||
                        node.question.extras.type === 'complex-obs-child');
            };
        /**
         * @param {?} supersetArray
         * @param {?} subsetArray
         * @return {?}
         */
        ObsAdapterHelper.prototype.isSubsetOf = /**
         * @param {?} supersetArray
         * @param {?} subsetArray
         * @return {?}
         */
            function (supersetArray, subsetArray) {
                if (subsetArray.length === 0 && supersetArray.length === 0) {
                    return true;
                }
                return subsetArray.every(function (element) {
                    return supersetArray.indexOf(element) >= 0;
                });
            };
        /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
        ObsAdapterHelper.prototype.setSimpleObsNodeValue = /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
            function (node, obs) {
                if (node && obs.length > 0) {
                    /** @type {?} */
                    var obsToUse = obs[0];
                    // set initial value
                    node.initialValue = obsToUse;
                    if (!this.isEmpty(obsToUse.value) && obsToUse.value.uuid) {
                        // answer to the obs is a concept, use uuid value
                        this.setNodeFormControlValue(node, obsToUse.value.uuid);
                    }
                    else if (!this.isEmpty(obsToUse.value)) {
                        this.setNodeFormControlValue(node, obsToUse.value);
                    }
                }
            };
        /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
        ObsAdapterHelper.prototype.setMultiselectObsNodeValue = /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
            function (node, obs) {
                if (node && obs.length > 0) {
                    node.initialValue = obs;
                    /** @type {?} */
                    var obsUuids = [];
                    try {
                        for (var obs_1 = __values(obs), obs_1_1 = obs_1.next(); !obs_1_1.done; obs_1_1 = obs_1.next()) {
                            var m = obs_1_1.value;
                            obsUuids.push(m.value.uuid);
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (obs_1_1 && !obs_1_1.done && (_a = obs_1.return))
                                _a.call(obs_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    this.setNodeFormControlValue(node, obsUuids);
                }
                var e_1, _a;
            };
        /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
        ObsAdapterHelper.prototype.setComplexObsNodeValue = /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
            function (node, obs) {
                if (node && obs.length > 0) {
                    /** @type {?} */
                    var valueField = void 0;
                    // essential memmber
                    /** @type {?} */
                    var dateField = void 0;
                    // other member to be manipulated by user
                    /** @type {?} */
                    var nodeAsGroup = (((node)));
                    // tslint:disable-next-line:forin
                    for (var o in nodeAsGroup.children) {
                        if ((((nodeAsGroup.children[o]))).question.extras.questionOptions.obsField === 'value') {
                            valueField = nodeAsGroup.children[o];
                        }
                        if ((((nodeAsGroup.children[o]))).question.extras.questionOptions.obsField === 'obsDatetime') {
                            dateField = nodeAsGroup.children[o];
                        }
                    }
                    // set the obs value here
                    this.setNodeValue(valueField, obs);
                    node.initialValue = valueField.initialValue;
                    // set the date value here
                    dateField.initialValue = valueField.initialValue;
                    this.setNodeFormControlValue(dateField, valueField.initialValue.obsDatetime);
                }
            };
        /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
        ObsAdapterHelper.prototype.setGroupObsNodeValue = /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
            function (node, obs) {
                if (node && obs.length > 0) {
                    /** @type {?} */
                    var groupNode = ((node));
                    groupNode.initialValue = obs[0];
                    // tslint:disable-next-line:forin
                    for (var o in groupNode.children) {
                        this.setNodeValue(groupNode.children[o], obs[0].groupMembers);
                    }
                }
            };
        /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
        ObsAdapterHelper.prototype.setRepeatingGroupObsNodeValue = /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
            function (node, obs) {
                if (node && obs.length > 0) {
                    /** @type {?} */
                    var arrayNode = ((node));
                    arrayNode.initialValue = obs;
                    for (var i = 0; i < obs.length; i++) {
                        /** @type {?} */
                        var createdNode = arrayNode.createChildNode();
                        this.setGroupObsNodeValue(createdNode, [obs[i]]);
                    }
                }
            };
        /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
        ObsAdapterHelper.prototype.setNodeValue = /**
         * @param {?} node
         * @param {?} obs
         * @return {?}
         */
            function (node, obs) {
                switch (this.getObsNodeType(node)) {
                    case 'unknown':
                        if (node instanceof GroupNode) {
                            /** @type {?} */
                            var groupNode = ((node));
                            // tslint:disable-next-line:forin
                            for (var o in groupNode.children) {
                                this.setNodeValue(groupNode.children[o], obs);
                            }
                            break;
                        }
                        if (node instanceof ArrayNode) {
                            /** @type {?} */
                            var arrayNode = ((node));
                            for (var i = 0; i < arrayNode.children.length; i++) {
                                this.setNodeValue(arrayNode.children[i], obs);
                            }
                            break;
                        }
                        break;
                    case 'simple':
                        // search asnwering obs at this point
                        /** @type {?} */
                        var answeringObs = this.findObsAnswerToQuestion(node, obs);
                        // set answer here
                        this.setSimpleObsNodeValue(node, answeringObs);
                        break;
                    case 'multiselect':
                        // search asnwering obs at this point
                        /** @type {?} */
                        var multiselectObs = this.findObsAnswerToQuestion(node, obs);
                        // set answer here
                        this.setMultiselectObsNodeValue(node, multiselectObs);
                        break;
                    case 'complex':
                        // search asnwering obs at this point
                        /** @type {?} */
                        var complexObs = this.findObsAnswerToQuestion(node, obs);
                        // set answer here
                        this.setComplexObsNodeValue(node, complexObs);
                        break;
                    case 'group':
                        /** @type {?} */
                        var groupObs = this.findObsAnswerToQuestion(node, obs);
                        if (groupObs.length > 0) {
                            this.setGroupObsNodeValue(node, groupObs);
                        }
                        break;
                    case 'repeatingGroup':
                        /** @type {?} */
                        var repeatingGroupObs = this.findObsAnswerToQuestion(node, obs);
                        if (repeatingGroupObs.length > 0) {
                            this.setRepeatingGroupObsNodeValue(node, repeatingGroupObs);
                        }
                        break;
                    default:
                        console.error('Unknown obs node', node);
                        break;
                }
            };
        /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
        ObsAdapterHelper.prototype.setNodeFormControlValue = /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
            function (node, value) {
                node.control.setValue(value);
                // TODO: Determine if we need this call
                // node.control.updateValueAndValidity();
                // TODO: Remove this hack and put it in appropriate place
                if (node.question.enableHistoricalValue && node.initialValue !== undefined) {
                    node.question.setHistoricalValue(false);
                }
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.getObsNodeType = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                if (this.isObsNode(node)) {
                    if (node instanceof LeafNode &&
                        (node.question.extras.questionOptions.rendering === 'multiCheckbox' ||
                            node.question.extras.questionOptions.rendering === 'checkbox' ||
                            node.question.extras.questionOptions.rendering === 'multi-select')) {
                        return 'multiselect';
                    }
                    if (node instanceof LeafNode) {
                        return 'simple';
                    }
                    if (node instanceof GroupNode &&
                        node.question.extras.type === 'complex-obs') {
                        return 'complex';
                    }
                    if (node instanceof ArrayNode &&
                        node.question.extras.type === 'obsGroup' &&
                        node.question.extras.questionOptions.rendering === 'repeating') {
                        return 'repeatingGroup';
                    }
                    if (node instanceof GroupNode &&
                        node.question.extras.type === 'obsGroup') {
                        return 'group';
                    }
                    return 'unknownObs';
                }
                return 'unknown';
            };
        // PAYLOAD GENERATION FUNCTIONS
        // PAYLOAD GENERATION FUNCTIONS
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.getSimpleObsPayload =
            // PAYLOAD GENERATION FUNCTIONS
            /**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                // check for empty values first
                if (this.isEmpty(node.control.value)) {
                    if (node.initialValue) {
                        // Handle case for existing voided obs
                        return {
                            uuid: node.initialValue.uuid,
                            voided: true
                        };
                    }
                    return null;
                }
                // check for exisiting, unchanged values
                if (node.initialValue && !this.simpleNodeValueChanged(node)) {
                    return null;
                }
                // all numbers, text, concepts answers are handled in the same way
                // no need for further formatting in this case
                /** @type {?} */
                var obs = {
                    concept: node.question.extras.questionOptions.concept,
                    value: node.control.value
                };
                // handle date fields
                if (node.question.extras.questionOptions.rendering === 'date') {
                    obs.value = this.toOpenMrsDateTimeString(node.control.value);
                }
                if (node.initialValue) {
                    // for existing cases, delete concept property, and add uuid
                    delete obs.concept;
                    obs.uuid = node.initialValue.uuid;
                }
                return obs;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.getComplexObsPayload = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var valueField;
                // essential memmber
                /** @type {?} */
                var dateField;
                // other member to be manipulated by user
                /** @type {?} */
                var nodeAsGroup = (((node)));
                // tslint:disable-next-line:forin
                for (var o in nodeAsGroup.children) {
                    if ((((nodeAsGroup.children[o]))).question.extras.questionOptions.obsField === 'value') {
                        valueField = nodeAsGroup.children[o];
                    }
                    if ((((nodeAsGroup.children[o]))).question.extras.questionOptions.obsField === 'obsDatetime') {
                        dateField = nodeAsGroup.children[o];
                    }
                }
                /** @type {?} */
                var valuePayload = this.getObsNodePayload(valueField);
                console.log('valuePayload', valuePayload);
                // set obs datetime for the generated payload
                if (valuePayload.length > 0) {
                    valuePayload[0].obsDatetime = this.toOpenMrsDateTimeString(dateField.control.value);
                    return valuePayload[0];
                }
                else if (valuePayload.length === 0 && node.initialValue) {
                    // determine if date changed
                    if (!this.areDatesEqual(node.initialValue.obsDatetime, dateField.control.value)) {
                        /** @type {?} */
                        var payload = {
                            uuid: node.initialValue.uuid,
                        };
                        payload.obsDatetime = this.toOpenMrsDateTimeString(dateField.control.value);
                        return payload;
                    }
                }
                return null;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.getMultiselectObsPayload = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var payload = [];
                /** @type {?} */
                var existingUuids = [];
                // add voided obs i.e. deleted options
                if (Array.isArray(node.initialValue)) {
                    _.each(node.initialValue, function (item) {
                        existingUuids.push(item.value.uuid);
                        if (Array.isArray(node.control.value)) {
                            if (node.control.value.indexOf(item.value.uuid) < 0) {
                                payload.push({
                                    uuid: item.uuid,
                                    voided: true
                                });
                            }
                        }
                        else {
                            // every value was deleted
                            payload.push({
                                uuid: item.uuid,
                                voided: true
                            });
                        }
                    });
                }
                // add new obs i.e they didn't exisit originally
                if (Array.isArray(node.control.value)) {
                    _.each(node.control.value, function (item) {
                        if (existingUuids.indexOf(item) < 0) {
                            payload.push({
                                concept: node.question.extras.questionOptions.concept,
                                value: item
                            });
                        }
                    });
                }
                return payload;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.getGroupPayload = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                var _this = this;
                /** @type {?} */
                var nodeAsGroup = ((node));
                /** @type {?} */
                var childrenPayload = [];
                _.each(nodeAsGroup.children, function (child) {
                    /** @type {?} */
                    var payload = _this.getObsNodePayload(child);
                    if (payload.length > 0) {
                        childrenPayload = childrenPayload.concat(payload);
                    }
                });
                if (childrenPayload.length === 0) {
                    return null;
                }
                /** @type {?} */
                var groupPayload = {
                    groupMembers: childrenPayload
                };
                if (nodeAsGroup.initialValue) {
                    groupPayload.uuid = nodeAsGroup.initialValue.uuid;
                }
                else {
                    groupPayload.concept = nodeAsGroup.question.extras.questionOptions.concept;
                }
                return groupPayload;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.getRepeatingGroupPayload = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                var _this = this;
                /** @type {?} */
                var nodeAsArray = ((node));
                /** @type {?} */
                var childrenPayload = [];
                /** @type {?} */
                var groupsUuidsAfterEditting = [];
                _.each(nodeAsArray.children, function (child) {
                    /** @type {?} */
                    var payload = _this.getObsNodePayload(child);
                    if (payload.length > 0) {
                        childrenPayload = childrenPayload.concat(payload);
                    }
                    if (child.initialValue && child.initialValue.uuid) {
                        groupsUuidsAfterEditting.push(child.initialValue.uuid);
                    }
                });
                // void deleted groups
                // console.log('groupsUuidsAfterEditting', groupsUuidsAfterEditting);
                if (nodeAsArray.initialValue && Array.isArray(nodeAsArray.initialValue)) {
                    _.each(nodeAsArray.initialValue, function (obs) {
                        if (groupsUuidsAfterEditting.indexOf(obs.uuid) < 0) {
                            /** @type {?} */
                            var voidedGroup = {
                                uuid: obs.uuid,
                                voided: true
                            };
                            childrenPayload.push(voidedGroup);
                        }
                    });
                }
                if (childrenPayload.length <= 0) {
                    return null;
                }
                return childrenPayload;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.getObsNodePayload = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var payload = [];
                switch (this.getObsNodeType(node)) {
                    case 'unknown':
                        if (node instanceof GroupNode) {
                            /** @type {?} */
                            var groupNode = ((node));
                            // tslint:disable-next-line:forin
                            for (var o in groupNode.children) {
                                /** @type {?} */
                                var groupNodePayoad = this.getObsNodePayload(groupNode.children[o]);
                                if (Array.isArray(groupNodePayoad) && groupNodePayoad.length > 0) {
                                    payload = payload.concat(groupNodePayoad);
                                }
                            }
                            break;
                        }
                        if (node instanceof ArrayNode) {
                            /** @type {?} */
                            var arrayNode = ((node));
                            for (var i = 0; i < arrayNode.children.length; i++) {
                                /** @type {?} */
                                var arrayNodePayload = this.getObsNodePayload(arrayNode.children[i]);
                                if (Array.isArray(arrayNodePayload) && arrayNodePayload.length > 0) {
                                    payload = payload.concat(arrayNodePayload);
                                }
                            }
                            break;
                        }
                        break;
                    case 'simple':
                        /** @type {?} */
                        var simpleObs = this.getSimpleObsPayload(node);
                        if (simpleObs !== null) {
                            payload.push(simpleObs);
                        }
                        break;
                    case 'multiselect':
                        /** @type {?} */
                        var multiselectObs = this.getMultiselectObsPayload(node);
                        if (Array.isArray(multiselectObs) && multiselectObs.length > 0) {
                            payload = payload.concat(multiselectObs);
                        }
                        break;
                    case 'complex':
                        /** @type {?} */
                        var complexObs = this.getComplexObsPayload(node);
                        if (complexObs !== null) {
                            payload.push(complexObs);
                        }
                        break;
                    case 'group':
                        /** @type {?} */
                        var groupedObs = this.getGroupPayload(node);
                        if (groupedObs && groupedObs !== null) {
                            payload.push(groupedObs);
                        }
                        break;
                    case 'repeatingGroup':
                        /** @type {?} */
                        var repeatingGroupedObs = this.getRepeatingGroupPayload(node);
                        if (Array.isArray(repeatingGroupedObs) && repeatingGroupedObs.length > 0) {
                            payload = payload.concat(repeatingGroupedObs);
                        }
                        break;
                    default:
                        break;
                }
                return payload;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsAdapterHelper.prototype.simpleNodeValueChanged = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                if (node.initialValue) {
                    if (node.initialValue.value && node.initialValue.value.uuid) {
                        // question whose answer is a concept
                        return node.control.value !== node.initialValue.value.uuid;
                    }
                    if (node.question.extras.questionOptions.rendering === 'date') {
                        return !this.areDatesEqual(node.control.value, node.initialValue.value);
                    }
                    return node.control.value !== node.initialValue.value;
                }
                return false;
            };
        /**
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        ObsAdapterHelper.prototype.areDatesEqual = /**
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
            function (date1, date2) {
                return moment$5(date1).isSame(date2);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ObsAdapterHelper.prototype.isEmpty = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value === '' ||
                    value === null ||
                    value === undefined) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} datetime
         * @return {?}
         */
        ObsAdapterHelper.prototype.toOpenMrsDateTimeString = /**
         * @param {?} datetime
         * @return {?}
         */
            function (datetime) {
                if (this.isEmpty(datetime)) {
                    return undefined;
                }
                else {
                    // transform value to memoent value to avoid error
                    /** @type {?} */
                    var formattedVal = moment$5(datetime).format();
                    /** @type {?} */
                    var val = formattedVal.substring(0, 19).replace('T', ' ');
                    return this.isEmpty(val) ? undefined : val;
                }
            };
        return ObsAdapterHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ObsValueAdapter = (function () {
        function ObsValueAdapter(helper) {
            this.helper = helper;
        }
        /**
         * @param {?} form
         * @return {?}
         */
        ObsValueAdapter.prototype.generateFormPayload = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                return this.helper.getObsNodePayload(form.rootNode);
                // TODO: Get rid of the section below when the helper is stable.
                // // Traverse  to get all nodes
                // let pages = this.traverse(form.rootNode);
                // // Extract actual question nodes
                // let questionNodes = this.getQuestionNodes(pages);
                // // Get obs Payload
                // return this.getObsPayload(questionNodes);
            };
        /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
        ObsValueAdapter.prototype.populateForm = /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
            function (form, payload) {
                this.helper.setNodeValue(form.rootNode, payload);
                // TODO: Get rid of the section below when the helper is stable.
                // // Traverse  to get all nodes
                // let pages = this.traverse(form.rootNode);
                // // Extract actual question nodes
                // let questionNodes = this.getQuestionNodes(pages);
                // // Extract set obs
                // this.setValues(questionNodes, payload);
            };
        // TODO: Get rid of all the functions below as they will not be needed
        // once the helper is stable
        // TODO: Get rid of all the functions below as they will not be needed
        // once the helper is stable
        /**
         * @param {?} nodes
         * @param {?=} payload
         * @param {?=} forcegroup
         * @return {?}
         */
        ObsValueAdapter.prototype.setValues =
            // TODO: Get rid of all the functions below as they will not be needed
            // once the helper is stable
            /**
             * @param {?} nodes
             * @param {?=} payload
             * @param {?=} forcegroup
             * @return {?}
             */
            function (nodes, payload, forcegroup) {
                if (nodes) {
                    var _loop_1 = function (node) {
                        if (node instanceof LeafNode) {
                            this_1.setObsValue(node, payload);
                            if (node.question.enableHistoricalValue && node.initialValue !== undefined) {
                                node.question.setHistoricalValue(false);
                            }
                        }
                        else if (node.question && node.question.extras && node.question.renderingType === 'group' || forcegroup) {
                            /** @type {?} */
                            var groupObs = _.find(payload, function (o) {
                                return o.concept.uuid === node.question.extras.questionOptions.concept && o.groupMembers;
                            });
                            if (groupObs) {
                                if (node.node) {
                                    node.node['initialValue'] = groupObs;
                                }
                                this_1.setValues(node.groupMembers, groupObs.groupMembers);
                            }
                            if (forcegroup && node.payload) {
                                this_1.setValues(node.groupMembers, node.payload.groupMembers);
                            }
                        }
                        else if (node instanceof GroupNode && node.question.extras.type === 'complex-obs') {
                            this_1.setComplexObsValue(node, payload);
                        }
                        else if (node.question && node.question.extras && node.question.renderingType === 'repeating' && !forcegroup) {
                            this_1.setRepeatingGroupValues(node, payload);
                            node.node.control.updateValueAndValidity();
                        }
                        else {
                            throw new Error('not implemented');
                        }
                    };
                    var this_1 = this;
                    try {
                        for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                            var node = nodes_1_1.value;
                            _loop_1(node);
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return))
                                _a.call(nodes_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                var e_1, _a;
            };
        /**
         * @param {?} node
         * @param {?} payload
         * @return {?}
         */
        ObsValueAdapter.prototype.setObsValue = /**
         * @param {?} node
         * @param {?} payload
         * @return {?}
         */
            function (node, payload) {
                if (node.question && node.question.extras &&
                    (node.question.extras.type === 'obs' ||
                        (node.question.extras.type === 'complex-obs-child' &&
                            node.question.extras.questionOptions.obsField === 'value')) &&
                    node.question.extras.questionOptions.rendering !== 'multiCheckbox' ||
                    node.question.extras.questionOptions.rendering !== 'checkbox' ||
                    node.question.extras.questionOptions.rendering !== 'multi-select') {
                    /** @type {?} */
                    var obs = _.find(payload, function (o) {
                        return o.concept.uuid === node.question.extras.questionOptions.concept;
                    });
                    if (obs) {
                        if (obs.value instanceof Object) {
                            node.control.setValue(obs.value.uuid);
                            node.control.updateValueAndValidity();
                        }
                        else {
                            node.control.setValue(obs.value);
                            node.control.updateValueAndValidity();
                        }
                        node['initialValue'] = { obsUuid: obs.uuid, value: obs.value };
                    }
                }
                else {
                    /** @type {?} */
                    var multiObs = _.filter(payload, function (o) {
                        return o.concept.uuid === node.question.extras.questionOptions.concept;
                    });
                    if (multiObs && multiObs.length > 0) {
                        node.control.setValue(this.getMultiselectValues(multiObs));
                        node.control.updateValueAndValidity();
                        node['initialValue'] = multiObs;
                    }
                }
            };
        /**
         * @param {?} node
         * @param {?} payload
         * @return {?}
         */
        ObsValueAdapter.prototype.setComplexObsValue = /**
         * @param {?} node
         * @param {?} payload
         * @return {?}
         */
            function (node, payload) {
                /** @type {?} */
                var valueField;
                /** @type {?} */
                var dateField;
                // tslint:disable-next-line:forin
                for (var o in node.children) {
                    if ((((node.children[o]))).question.extras.questionOptions.obsField === 'value') {
                        valueField = node.children[o];
                    }
                    if ((((node.children[o]))).question.extras.questionOptions.obsField === 'obsDatetime') {
                        dateField = node.children[o];
                    }
                }
                // set the usual obs value
                this.setObsValue(valueField, payload);
                // set the obs date
                /** @type {?} */
                var obs = _.find(payload, function (o) {
                    return o.concept.uuid === node.question.extras.questionOptions.concept;
                });
                if (obs) {
                    dateField['initialValue'] = { obsUuid: obs.uuid, value: obs.obsDatetime };
                    (((dateField))).control.setValue(obs.obsDatetime);
                    (((dateField))).control.updateValueAndValidity();
                }
            };
        /**
         * @param {?} multiObs
         * @return {?}
         */
        ObsValueAdapter.prototype.getMultiselectValues = /**
         * @param {?} multiObs
         * @return {?}
         */
            function (multiObs) {
                /** @type {?} */
                var values = [];
                try {
                    for (var multiObs_1 = __values(multiObs), multiObs_1_1 = multiObs_1.next(); !multiObs_1_1.done; multiObs_1_1 = multiObs_1.next()) {
                        var m = multiObs_1_1.value;
                        values.push(m.value.uuid);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (multiObs_1_1 && !multiObs_1_1.done && (_a = multiObs_1.return))
                            _a.call(multiObs_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return values;
                var e_2, _a;
            };
        /**
         * @param {?} node
         * @param {?} payload
         * @return {?}
         */
        ObsValueAdapter.prototype.setRepeatingGroupValues = /**
         * @param {?} node
         * @param {?} payload
         * @return {?}
         */
            function (node, payload) {
                /** @type {?} */
                var groupRepeatingObs = _.filter(payload, function (o) {
                    /** @type {?} */
                    var found = o.concept.uuid === node.question.extras.questionOptions.concept;
                    /** @type {?} */
                    var intersect = false;
                    if (found && o.groupMembers) {
                        /** @type {?} */
                        var obs = o.groupMembers.map(function (a) {
                            return a.concept.uuid;
                        });
                        /** @type {?} */
                        var schemaQuestions = node.question.questions.map(function (a) {
                            return a.extras.questionOptions.concept;
                        });
                        intersect = (_.intersection(obs, schemaQuestions).length > 0);
                    }
                    return found && intersect;
                });
                if (groupRepeatingObs.length > 0) {
                    node.node['initialValue'] = groupRepeatingObs;
                    for (var i = 0; i < groupRepeatingObs.length; i++) {
                        node.node.createChildNode();
                    }
                }
                /** @type {?} */
                var groups = [];
                /** @type {?} */
                var index = 0;
                var _loop_2 = function (child) {
                    /** @type {?} */
                    var children = Object.keys(child.children).map(function (key) { return child.children[key]; });
                    /** @type {?} */
                    var groupPayload = groupRepeatingObs[index];
                    groups.push({ question: node.question, groupMembers: children, payload: groupPayload });
                    index++;
                };
                try {
                    for (var _a = __values(node.node.children), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var child = _b.value;
                        _loop_2(child);
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                this.setValues(groups, groupRepeatingObs, true);
                var e_3, _c;
            };
        /**
         * @param {?} pages
         * @return {?}
         */
        ObsValueAdapter.prototype.getQuestionNodes = /**
         * @param {?} pages
         * @return {?}
         */
            function (pages) {
                /** @type {?} */
                var merged = [];
                /** @type {?} */
                var arrays = [];
                try {
                    for (var pages_1 = __values(pages), pages_1_1 = pages_1.next(); !pages_1_1.done; pages_1_1 = pages_1.next()) {
                        var page = pages_1_1.value;
                        try {
                            for (var _a = __values(page.page), _b = _a.next(); !_b.done; _b = _a.next()) {
                                var section = _b.value;
                                arrays.push(section.section);
                            }
                        }
                        catch (e_4_1) {
                            e_4 = { error: e_4_1 };
                        }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return))
                                    _c.call(_a);
                            }
                            finally {
                                if (e_4)
                                    throw e_4.error;
                            }
                        }
                    }
                }
                catch (e_5_1) {
                    e_5 = { error: e_5_1 };
                }
                finally {
                    try {
                        if (pages_1_1 && !pages_1_1.done && (_d = pages_1.return))
                            _d.call(pages_1);
                    }
                    finally {
                        if (e_5)
                            throw e_5.error;
                    }
                }
                return merged.concat.apply([], arrays);
                var e_5, _d, e_4, _c;
            };
        /**
         * @param {?} nodes
         * @return {?}
         */
        ObsValueAdapter.prototype.repeatingGroup = /**
         * @param {?} nodes
         * @return {?}
         */
            function (nodes) {
                /** @type {?} */
                var toReturn = [];
                try {
                    for (var nodes_2 = __values(nodes), nodes_2_1 = nodes_2.next(); !nodes_2_1.done; nodes_2_1 = nodes_2.next()) {
                        var node = nodes_2_1.value;
                        toReturn.push({ question: node.question, groupMembers: this.traverse(node) });
                    }
                }
                catch (e_6_1) {
                    e_6 = { error: e_6_1 };
                }
                finally {
                    try {
                        if (nodes_2_1 && !nodes_2_1.done && (_a = nodes_2.return))
                            _a.call(nodes_2);
                    }
                    finally {
                        if (e_6)
                            throw e_6.error;
                    }
                }
                return toReturn;
                var e_6, _a;
            };
        /**
         * @param {?} obs
         * @param {?} obsPayload
         * @return {?}
         */
        ObsValueAdapter.prototype.processGroup = /**
         * @param {?} obs
         * @param {?} obsPayload
         * @return {?}
         */
            function (obs, obsPayload) {
                if (obs.question && obs.question.extras && obs.question.extras.questionOptions.rendering === 'group') {
                    /** @type {?} */
                    var members = _.filter(this.getObsPayload(obs.groupMembers), function (o) {
                        return o.value !== '';
                    });
                    /** @type {?} */
                    var mappedMembers = members.map(function (a) {
                        return a.voided;
                    });
                    if (members.length > 0 && mappedMembers.every(Boolean)) {
                        obsPayload.push({
                            uuid: obs.node.initialValue.uuid,
                            voided: true
                        });
                    }
                    else if (members.length > 0) {
                        if (obs.node.initialValue) {
                            obsPayload.push({
                                uuid: obs.node.initialValue.uuid,
                                groupMembers: members
                            });
                        }
                        else {
                            obsPayload.push({
                                concept: obs.question.extras.questionOptions.concept,
                                groupMembers: members
                            });
                        }
                    }
                }
            };
        /**
         * @param {?} group
         * @return {?}
         */
        ObsValueAdapter.prototype.mapInitialGroup = /**
         * @param {?} group
         * @return {?}
         */
            function (group) {
                /** @type {?} */
                var current = {};
                try {
                    for (var _a = __values(group.groupMembers), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var member = _b.value;
                        /** @type {?} */
                        var value = '';
                        if (member.value instanceof Object) {
                            value = member.value.uuid;
                        }
                        else if (member.value) {
                            value = member.value;
                        }
                        else if (member.groupMembers && member.groupMembers.length > 0) {
                            current = this.mapInitialGroup(group);
                        }
                        current[member.concept.uuid + ':' + value] = value;
                    }
                }
                catch (e_7_1) {
                    e_7 = { error: e_7_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_7)
                            throw e_7.error;
                    }
                }
                return current;
                var e_7, _c;
            };
        /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
        ObsValueAdapter.prototype.mapModelGroup = /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
            function (node, value) {
                /** @type {?} */
                var current = {};
                for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                        /** @type {?} */
                        var groupQuestion = _.find(node.question.questions, { key: key });
                        /** @type {?} */
                        var modelValue = value[key];
                        if (modelValue instanceof Object) ;
                        else if (modelValue !== '') {
                            current[groupQuestion.extras.questionOptions.concept + ':'
                                + modelValue] = modelValue;
                        }
                    }
                }
                return current;
            };
        /**
         * @param {?} node
         * @param {?} obsPayload
         * @return {?}
         */
        ObsValueAdapter.prototype.processRepeatingGroups = /**
         * @param {?} node
         * @param {?} obsPayload
         * @return {?}
         */
            function (node, obsPayload) {
                /** @type {?} */
                var initialValues = [];
                if (node.node.initialValue) {
                    try {
                        for (var _a = __values(node.node.initialValue), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var group = _b.value;
                            initialValues.push({ uuid: group.uuid, value: this.mapInitialGroup(group) });
                        }
                    }
                    catch (e_8_1) {
                        e_8 = { error: e_8_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return))
                                _c.call(_a);
                        }
                        finally {
                            if (e_8)
                                throw e_8.error;
                        }
                    }
                }
                /** @type {?} */
                var repeatingModel = [];
                try {
                    for (var _d = __values(node.node.control.value), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var value = _e.value;
                        repeatingModel.push({ value: this.mapModelGroup(node, value) });
                    }
                }
                catch (e_9_1) {
                    e_9 = { error: e_9_1 };
                }
                finally {
                    try {
                        if (_e && !_e.done && (_f = _d.return))
                            _f.call(_d);
                    }
                    finally {
                        if (e_9)
                            throw e_9.error;
                    }
                }
                /** @type {?} */
                var deleted = this.leftOuterJoinArrays(initialValues, repeatingModel);
                /** @type {?} */
                var newObs = this.leftOuterJoinArrays(repeatingModel, initialValues);
                /** @type {?} */
                var groupConcept = node.question.extras.questionOptions.concept;
                /** @type {?} */
                var newObsPayload = [];
                if (deleted.length > 0) {
                    /** @type {?} */
                    var deletedObs = this.createGroupDeletedObs(deleted);
                    try {
                        for (var deletedObs_1 = __values(deletedObs), deletedObs_1_1 = deletedObs_1.next(); !deletedObs_1_1.done; deletedObs_1_1 = deletedObs_1.next()) {
                            var d = deletedObs_1_1.value;
                            obsPayload.push(d);
                        }
                    }
                    catch (e_10_1) {
                        e_10 = { error: e_10_1 };
                    }
                    finally {
                        try {
                            if (deletedObs_1_1 && !deletedObs_1_1.done && (_g = deletedObs_1.return))
                                _g.call(deletedObs_1);
                        }
                        finally {
                            if (e_10)
                                throw e_10.error;
                        }
                    }
                    if (newObs.length > 0) {
                        newObsPayload = this.createGroupNewObs(newObs, groupConcept);
                    }
                }
                else {
                    newObsPayload = this.createGroupNewObs(newObs, groupConcept);
                }
                if (newObsPayload.length > 0) {
                    try {
                        for (var newObsPayload_1 = __values(newObsPayload), newObsPayload_1_1 = newObsPayload_1.next(); !newObsPayload_1_1.done; newObsPayload_1_1 = newObsPayload_1.next()) {
                            var p = newObsPayload_1_1.value;
                            obsPayload.push(p);
                        }
                    }
                    catch (e_11_1) {
                        e_11 = { error: e_11_1 };
                    }
                    finally {
                        try {
                            if (newObsPayload_1_1 && !newObsPayload_1_1.done && (_h = newObsPayload_1.return))
                                _h.call(newObsPayload_1);
                        }
                        finally {
                            if (e_11)
                                throw e_11.error;
                        }
                    }
                }
                var e_8, _c, e_9, _f, e_10, _g, e_11, _h;
            };
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        ObsValueAdapter.prototype.leftOuterJoinArrays = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                /** @type {?} */
                var unique = first.filter(function (obj) {
                    return !second.some(function (obj2) {
                        return _.isEqual(obj.value, obj2.value);
                    });
                });
                return unique;
            };
        /**
         * @param {?} payload
         * @param {?} groupConcept
         * @return {?}
         */
        ObsValueAdapter.prototype.createGroupNewObs = /**
         * @param {?} payload
         * @param {?} groupConcept
         * @return {?}
         */
            function (payload, groupConcept) {
                /** @type {?} */
                var newPayload = [];
                try {
                    for (var payload_1 = __values(payload), payload_1_1 = payload_1.next(); !payload_1_1.done; payload_1_1 = payload_1.next()) {
                        var obs = payload_1_1.value;
                        /** @type {?} */
                        var groupPayload = [];
                        /* tslint:disable */
                        for (var key in obs.value) {
                            /** @type {?} */
                            var concept = key.split(':')[0];
                            /** @type {?} */
                            var value = key.split(':')[1];
                            groupPayload.push({ concept: concept, value: value });
                        }
                        newPayload.push({ concept: groupConcept, groupMembers: groupPayload });
                        /* tslint:enable */
                    }
                }
                catch (e_12_1) {
                    e_12 = { error: e_12_1 };
                }
                finally {
                    try {
                        if (payload_1_1 && !payload_1_1.done && (_a = payload_1.return))
                            _a.call(payload_1);
                    }
                    finally {
                        if (e_12)
                            throw e_12.error;
                    }
                }
                return newPayload;
                var e_12, _a;
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        ObsValueAdapter.prototype.createGroupDeletedObs = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                /** @type {?} */
                var deletedObs = [];
                try {
                    for (var payload_2 = __values(payload), payload_2_1 = payload_2.next(); !payload_2_1.done; payload_2_1 = payload_2.next()) {
                        var d = payload_2_1.value;
                        deletedObs.push({ uuid: d.uuid, voided: true });
                    }
                }
                catch (e_13_1) {
                    e_13 = { error: e_13_1 };
                }
                finally {
                    try {
                        if (payload_2_1 && !payload_2_1.done && (_a = payload_2.return))
                            _a.call(payload_2);
                    }
                    finally {
                        if (e_13)
                            throw e_13.error;
                    }
                }
                return deletedObs;
                var e_13, _a;
            };
        /**
         * @param {?} datetime
         * @return {?}
         */
        ObsValueAdapter.prototype.getExactTime = /**
         * @param {?} datetime
         * @return {?}
         */
            function (datetime) {
                return datetime.substring(0, 19).replace('T', ' ');
            };
        /**
         * @param {?} obs
         * @param {?} obsPayload
         * @return {?}
         */
        ObsValueAdapter.prototype.processObs = /**
         * @param {?} obs
         * @param {?} obsPayload
         * @return {?}
         */
            function (obs, obsPayload) {
                if (obs.control && obs.question.extras) {
                    /** @type {?} */
                    var obsValue = {
                        concept: obs.question.extras.questionOptions.concept,
                        value: (obs.question.extras.questionOptions.rendering === 'date' && !this.isEmpty(obs.control.value)) ?
                            this.getExactTime(obs.control.value) : obs.control.value
                    };
                    if (obs.question.extras.questionOptions.rendering === 'multiCheckbox' ||
                        obs.question.extras.questionOptions.rendering === 'checkbox' ||
                        obs.question.extras.questionOptions.rendering === 'multi-select') {
                        /** @type {?} */
                        var multis = this.processMultiSelect(obs.question.extras.questionOptions.concept, obs.control.value);
                        if (obs.initialValue) {
                            /** @type {?} */
                            var mappedInitial = obs.initialValue.map(function (a) {
                                return { uuid: a.uuid, value: { concept: a.concept.uuid, value: a.value.uuid } };
                            });
                            /** @type {?} */
                            var mappedCurrent = multis.map(function (a) {
                                return { value: a };
                            });
                            /** @type {?} */
                            var deletedObs = this.leftOuterJoinArrays(mappedInitial, mappedCurrent);
                            /** @type {?} */
                            var newObs = this.leftOuterJoinArrays(mappedCurrent, mappedInitial);
                            this.processDeletedMultiSelectObs(deletedObs, obsPayload);
                            this.processNewMultiSelectObs(newObs, obsPayload);
                        }
                        else {
                            this.processNewMultiSelectObs(multis, obsPayload);
                        }
                    }
                    else {
                        if (obs.initialValue && obs.initialValue.value && obsValue) {
                            this.updateOrVoidObs(obsValue, obs.initialValue, obsPayload);
                        }
                        else if (obsValue.value !== '' && obsValue.value !== null) {
                            obsPayload.push(obsValue);
                        }
                    }
                }
            };
        /**
         * @param {?} node
         * @param {?} obsPayload
         * @return {?}
         */
        ObsValueAdapter.prototype.processComplexObs = /**
         * @param {?} node
         * @param {?} obsPayload
         * @return {?}
         */
            function (node, obsPayload) {
                /** @type {?} */
                var valueField;
                /** @type {?} */
                var dateField;
                // tslint:disable-next-line:forin
                for (var o in node.children) {
                    if ((((node.children[o]))).question.extras.questionOptions.obsField === 'value') {
                        valueField = node.children[o];
                    }
                    if ((((node.children[o]))).question.extras.questionOptions.obsField === 'obsDatetime') {
                        dateField = node.children[o];
                    }
                }
                if (valueField) {
                    // process obs as usual
                    this.processObs(valueField, obsPayload);
                    // obtain the last inserted obs and set the obsDatetime
                    /** @type {?} */
                    var createdPayload = obsPayload.length > 0 ? obsPayload[obsPayload.length - 1] : undefined;
                    if (createdPayload &&
                        ((createdPayload.concept && createdPayload.concept === node.question.extras.questionOptions.concept) ||
                            (valueField.initialValue && createdPayload.uuid === valueField.initialValue.obsUuid))) {
                        if (dateField.initialValue && dateField.control.value !== dateField.initialValue.value) {
                            createdPayload.obsDatetime = dateField.control.value;
                        }
                    }
                }
            };
        /**
         * @param {?} values
         * @param {?} obsPayload
         * @return {?}
         */
        ObsValueAdapter.prototype.processDeletedMultiSelectObs = /**
         * @param {?} values
         * @param {?} obsPayload
         * @return {?}
         */
            function (values, obsPayload) {
                try {
                    for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                        var value = values_1_1.value;
                        obsPayload.push({ uuid: value.uuid, voided: true });
                    }
                }
                catch (e_14_1) {
                    e_14 = { error: e_14_1 };
                }
                finally {
                    try {
                        if (values_1_1 && !values_1_1.done && (_a = values_1.return))
                            _a.call(values_1);
                    }
                    finally {
                        if (e_14)
                            throw e_14.error;
                    }
                }
                var e_14, _a;
            };
        /**
         * @param {?} values
         * @param {?} obsPayload
         * @return {?}
         */
        ObsValueAdapter.prototype.processNewMultiSelectObs = /**
         * @param {?} values
         * @param {?} obsPayload
         * @return {?}
         */
            function (values, obsPayload) {
                try {
                    for (var values_2 = __values(values), values_2_1 = values_2.next(); !values_2_1.done; values_2_1 = values_2.next()) {
                        var multi = values_2_1.value;
                        if (multi.value instanceof Object) {
                            obsPayload.push(multi.value);
                        }
                        else {
                            obsPayload.push(multi);
                        }
                    }
                }
                catch (e_15_1) {
                    e_15 = { error: e_15_1 };
                }
                finally {
                    try {
                        if (values_2_1 && !values_2_1.done && (_a = values_2.return))
                            _a.call(values_2);
                    }
                    finally {
                        if (e_15)
                            throw e_15.error;
                    }
                }
                var e_15, _a;
            };
        /**
         * @param {?} obsValue
         * @param {?} initialValue
         * @param {?} obsPayload
         * @return {?}
         */
        ObsValueAdapter.prototype.updateOrVoidObs = /**
         * @param {?} obsValue
         * @param {?} initialValue
         * @param {?} obsPayload
         * @return {?}
         */
            function (obsValue, initialValue, obsPayload) {
                if (this.isEmpty(obsValue.value) && initialValue.value) {
                    obsPayload.push({ uuid: initialValue.obsUuid, voided: true });
                }
                else if (!this.isEmpty(obsValue.value) && initialValue.value) {
                    obsPayload.push({ uuid: initialValue.obsUuid, value: obsValue.value });
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ObsValueAdapter.prototype.isEmpty = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value === '' ||
                    value === null ||
                    value === undefined) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} o
         * @param {?=} type
         * @return {?}
         */
        ObsValueAdapter.prototype.traverse = /**
         * @param {?} o
         * @param {?=} type
         * @return {?}
         */
            function (o, type) {
                /** @type {?} */
                var questions = [];
                if (o.children) {
                    if (o.children instanceof Array) {
                        /** @type {?} */
                        var returned = this.repeatingGroup(o.children);
                        return returned;
                    }
                    if (o.children instanceof Object) {
                        for (var key in o.children) {
                            if (o.children.hasOwnProperty(key)) {
                                switch (o.children[key].question.renderingType) {
                                    case 'page':
                                        /** @type {?} */
                                        var page = this.traverse(o.children[key]);
                                        questions.push({ page: page });
                                        break;
                                    case 'section':
                                        /** @type {?} */
                                        var section = this.traverse(o.children[key]);
                                        questions.push({ section: section });
                                        break;
                                    case 'group':
                                        /** @type {?} */
                                        var qs = this.traverse(o.children[key]);
                                        questions.push({ node: o.children[key], question: o.children[key].question, groupMembers: qs });
                                        break;
                                    case 'repeating':
                                        /** @type {?} */
                                        var rep = this.repeatingGroup(o.children[key].children);
                                        questions.push({ node: o.children[key], question: o.children[key].question, groupMembers: rep });
                                        break;
                                    default:
                                        questions.push(o.children[key]);
                                        break;
                                }
                            }
                        }
                    }
                }
                return questions;
            };
        /**
         * @param {?} concept
         * @param {?} values
         * @return {?}
         */
        ObsValueAdapter.prototype.processMultiSelect = /**
         * @param {?} concept
         * @param {?} values
         * @return {?}
         */
            function (concept, values) {
                /** @type {?} */
                var multiSelectObs = [];
                if (values && values !== null) {
                    try {
                        for (var values_3 = __values(values), values_3_1 = values_3.next(); !values_3_1.done; values_3_1 = values_3.next()) {
                            var value = values_3_1.value;
                            /** @type {?} */
                            var obs = {
                                concept: concept,
                                value: value
                            };
                            multiSelectObs.push(obs);
                        }
                    }
                    catch (e_16_1) {
                        e_16 = { error: e_16_1 };
                    }
                    finally {
                        try {
                            if (values_3_1 && !values_3_1.done && (_a = values_3.return))
                                _a.call(values_3);
                        }
                        finally {
                            if (e_16)
                                throw e_16.error;
                        }
                    }
                }
                return multiSelectObs;
                var e_16, _a;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ObsValueAdapter.prototype.isObs = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                return (node.question.extras.type === 'obs' ||
                    node.question.extras.type === 'obsGroup' ||
                    node.question.extras.type === 'complex-obs');
            };
        /**
         * @param {?} nodes
         * @return {?}
         */
        ObsValueAdapter.prototype.getObsPayload = /**
         * @param {?} nodes
         * @return {?}
         */
            function (nodes) {
                /** @type {?} */
                var obsPayload = [];
                try {
                    for (var nodes_3 = __values(nodes), nodes_3_1 = nodes_3.next(); !nodes_3_1.done; nodes_3_1 = nodes_3.next()) {
                        var node = nodes_3_1.value;
                        if (this.isObs(node)) {
                            if (node.groupMembers, node.question.extras.questionOptions.rendering === 'group') {
                                this.processGroup(node, obsPayload);
                            }
                            else if (node.groupMembers, node.question.extras.questionOptions.rendering === 'repeating') {
                                this.processRepeatingGroups(node, obsPayload);
                            }
                            else if (node instanceof GroupNode && (((node))).question.extras.type === 'complex-obs') {
                                this.processComplexObs(node, obsPayload);
                            }
                            else {
                                this.processObs(node, obsPayload);
                            }
                        }
                    }
                }
                catch (e_17_1) {
                    e_17 = { error: e_17_1 };
                }
                finally {
                    try {
                        if (nodes_3_1 && !nodes_3_1.done && (_a = nodes_3.return))
                            _a.call(nodes_3);
                    }
                    finally {
                        if (e_17)
                            throw e_17.error;
                    }
                }
                return obsPayload;
                var e_17, _a;
            };
        ObsValueAdapter.decorators = [
            { type: core.Injectable },
        ];
        ObsValueAdapter.ctorParameters = function () {
            return [
                { type: ObsAdapterHelper }
            ];
        };
        return ObsValueAdapter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OrderValueAdapter = (function () {
        function OrderValueAdapter() {
            this.formOrderNodes = [];
            this.provider = '';
        }
        /**
         * @param {?} form
         * @return {?}
         */
        OrderValueAdapter.prototype.generateFormPayload = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.formOrderNodes = [];
                this._setOrderProvider(form);
                this._findTestOrderQuestionNodes(form.rootNode);
                return this._createOrdersPayload(this.formOrderNodes, form);
            };
        /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
        OrderValueAdapter.prototype.populateForm = /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
            function (form, payload) {
                form.existingOrders = payload;
                this.formOrderNodes = [];
                this._findTestOrderQuestionNodes(form.rootNode);
                /** @type {?} */
                var existingOrders = this._getExistingOrders(form);
                this._setOrderValues(this.formOrderNodes, existingOrders);
            };
        /**
         * @private
         * @param {?} form
         * @return {?}
         */
        OrderValueAdapter.prototype._setOrderProvider = /**
         * @private
         * @param {?} form
         * @return {?}
         */
            function (form) {
                if (form.valueProcessingInfo.providerUuid) {
                    this.provider = form.valueProcessingInfo.providerUuid;
                }
            };
        /**
         * @private
         * @param {?} orderNodes
         * @param {?} form
         * @return {?}
         */
        OrderValueAdapter.prototype._createOrdersPayload = /**
         * @private
         * @param {?} orderNodes
         * @param {?} form
         * @return {?}
         */
            function (orderNodes, form) {
                /** @type {?} */
                var payload = [];
                /** @type {?} */
                var selectedOrders = [];
                /** @type {?} */
                var deletedOrders = [];
                /** @type {?} */
                var existingOrders = this._getExistingOrders(form);
                var _loop_1 = function (orderNode) {
                    /** @type {?} */
                    var orderNodeValues = orderNode.control.value;
                    /** @type {?} */
                    var orders = [];
                    if (existingOrders) {
                        existingOrders.map(function (obj) {
                            orders[obj.concept] = obj.concept;
                        });
                    }
                    for (var order in orderNodeValues) {
                        if (orderNodeValues.hasOwnProperty(order)) {
                            /** @type {?} */
                            var orderValue = orderNodeValues[order][orderNode.question.key];
                            /** @type {?} */
                            var payloadOrder = this_1._createPayloadOrder(orderValue, orderNode.question.extras);
                            if (orders[orderValue] !== orderValue && payloadOrder.concept !== '') {
                                payload.push(payloadOrder);
                            }
                            selectedOrders[orderValue] = orderValue;
                            if (payloadOrder.orderNumber === '') {
                                delete payloadOrder.orderNumber;
                            }
                            if (payloadOrder.uuid === '') {
                                delete payloadOrder.uuid;
                            }
                        }
                    }
                };
                var this_1 = this;
                try {
                    for (var orderNodes_1 = __values(orderNodes), orderNodes_1_1 = orderNodes_1.next(); !orderNodes_1_1.done; orderNodes_1_1 = orderNodes_1.next()) {
                        var orderNode = orderNodes_1_1.value;
                        _loop_1(orderNode);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (orderNodes_1_1 && !orderNodes_1_1.done && (_a = orderNodes_1.return))
                            _a.call(orderNodes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                deletedOrders = this._getDeletedOrders(selectedOrders, existingOrders);
                return this._addDeletedOrdersToPayload(deletedOrders, payload);
                var e_1, _a;
            };
        /**
         * @private
         * @param {?} form
         * @return {?}
         */
        OrderValueAdapter.prototype._getExistingOrders = /**
         * @private
         * @param {?} form
         * @return {?}
         */
            function (form) {
                if (form.existingOrders && form.existingOrders.orders) {
                    /** @type {?} */
                    var existingOrders = form.existingOrders.orders.map(function (o) {
                        return {
                            concept: o.concept.uuid,
                            orderNumber: o.orderNumber,
                            orderUuid: o.uuid,
                            voided: o.voided,
                            dateVoided: o.auditInfo.dateVoided
                        };
                    });
                    return existingOrders = _.filter(existingOrders, function (order) {
                        if (order.voided === true || order.dateVoided) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                }
                else {
                    return;
                }
            };
        /**
         * @private
         * @param {?} node
         * @param {?} existingOrders
         * @return {?}
         */
        OrderValueAdapter.prototype._setOrderValues = /**
         * @private
         * @param {?} node
         * @param {?} existingOrders
         * @return {?}
         */
            function (node, existingOrders) {
                this._findTestOrderQuestionNodes(node);
                /** @type {?} */
                var orderNodes = this.formOrderNodes;
                try {
                    for (var orderNodes_2 = __values(orderNodes), orderNodes_2_1 = orderNodes_2.next(); !orderNodes_2_1.done; orderNodes_2_1 = orderNodes_2.next()) {
                        var orderNode = orderNodes_2_1.value;
                        this._setOrderNodeValues(orderNode, existingOrders);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (orderNodes_2_1 && !orderNodes_2_1.done && (_a = orderNodes_2.return))
                            _a.call(orderNodes_2);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                var e_2, _a;
            };
        /**
         * @private
         * @param {?} deletedOrders
         * @param {?} payload
         * @return {?}
         */
        OrderValueAdapter.prototype._addDeletedOrdersToPayload = /**
         * @private
         * @param {?} deletedOrders
         * @param {?} payload
         * @return {?}
         */
            function (deletedOrders, payload) {
                for (var order in deletedOrders) {
                    if (deletedOrders.hasOwnProperty(order)) {
                        payload.push({ uuid: deletedOrders[order], voided: true });
                    }
                }
                return payload;
            };
        /**
         * @private
         * @param {?} orderConcept
         * @param {?} quesitonExtras
         * @return {?}
         */
        OrderValueAdapter.prototype._createPayloadOrder = /**
         * @private
         * @param {?} orderConcept
         * @param {?} quesitonExtras
         * @return {?}
         */
            function (orderConcept, quesitonExtras) {
                /** @type {?} */
                var order = {
                    concept: '',
                    type: '',
                    orderer: '',
                    careSetting: ''
                };
                order.concept = orderConcept;
                order.type = quesitonExtras.questionOptions.orderType;
                order.orderer = this.provider;
                order.careSetting = quesitonExtras.questionOptions.orderSettingUuid;
                // delete orderer if provider not provided
                if (order.orderer === '') {
                    delete order.orderer;
                }
                return order;
            };
        /**
         * @private
         * @param {?} selectedOrders
         * @param {?} existingOrders
         * @return {?}
         */
        OrderValueAdapter.prototype._getDeletedOrders = /**
         * @private
         * @param {?} selectedOrders
         * @param {?} existingOrders
         * @return {?}
         */
            function (selectedOrders, existingOrders) {
                /** @type {?} */
                var deleteOrders = [];
                if (selectedOrders) {
                    for (var order in existingOrders) {
                        if (existingOrders.hasOwnProperty(order)) {
                            /** @type {?} */
                            var existingOrderConcept = existingOrders[order].concept;
                            /** @type {?} */
                            var selectedOrder = selectedOrders[existingOrderConcept];
                            if (selectedOrder !== existingOrderConcept) {
                                deleteOrders.push(existingOrders[order].orderUuid);
                            }
                        }
                    }
                }
                // console.log('Deleted Orders ', deleteOrders);
                return deleteOrders;
            };
        /**
         * @private
         * @param {?} node
         * @param {?} orders
         * @return {?}
         */
        OrderValueAdapter.prototype._setOrderNodeValues = /**
         * @private
         * @param {?} node
         * @param {?} orders
         * @return {?}
         */
            function (node, orders) {
                /** @type {?} */
                var index = 0;
                node['initialValue'] = orders;
                try {
                    for (var orders_1 = __values(orders), orders_1_1 = orders_1.next(); !orders_1_1.done; orders_1_1 = orders_1.next()) {
                        var order = orders_1_1.value;
                        node.createChildNode();
                        /** @type {?} */
                        var value = {};
                        value[node.question.key] = order.concept;
                        /** @type {?} */
                        var childNode = node.children[index];
                        childNode.control.setValue(value);
                        childNode['initialValue'] = value;
                        childNode['orderNumber'] = order.orderNumber;
                        // console.log('Set Value', node.children[index].control.value, node, childNode);
                        index++;
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (orders_1_1 && !orders_1_1.done && (_a = orders_1.return))
                            _a.call(orders_1);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                var e_3, _a;
            };
        /**
         * @private
         * @param {?} formNode
         * @return {?}
         */
        OrderValueAdapter.prototype._findTestOrderQuestionNodes = /**
         * @private
         * @param {?} formNode
         * @return {?}
         */
            function (formNode) {
                if (formNode.children) {
                    if (formNode.children instanceof Object) {
                        for (var key in formNode.children) {
                            if (formNode.children.hasOwnProperty(key)) {
                                switch (formNode.children[key].question.renderingType) {
                                    case 'page':
                                        this._findTestOrderQuestionNodes(formNode.children[key]);
                                        break;
                                    case 'section':
                                        this._findTestOrderQuestionNodes(formNode.children[key]);
                                        break;
                                    case 'group':
                                        this._findTestOrderQuestionNodes(formNode.children[key]);
                                        break;
                                    case 'repeating':
                                        if (formNode.children) {
                                            // tslint:disable-next-line:forin
                                            for (var node in formNode.children) {
                                                /** @type {?} */
                                                var question = formNode.children[node].question;
                                                if (question.extras && question.extras.type === 'testOrder') {
                                                    this.formOrderNodes.push(formNode.children[node]);
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
            };
        OrderValueAdapter.decorators = [
            { type: core.Injectable },
        ];
        return OrderValueAdapter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$6 = moment_;
    var EncounterAdapter = (function () {
        function EncounterAdapter(ordersAdapter, obsAdapter) {
            this.ordersAdapter = ordersAdapter;
            this.obsAdapter = obsAdapter;
        }
        /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
        EncounterAdapter.prototype.populateForm = /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
            function (form, payload) {
                this.populateNode(form.rootNode, payload);
                if (Array.isArray(payload.orders)) {
                    this.ordersAdapter.populateForm(form, payload);
                }
                if (Array.isArray(payload.obs)) {
                    this.obsAdapter.populateForm(form, payload.obs);
                }
            };
        /**
         * @param {?} rootNode
         * @param {?} payload
         * @return {?}
         */
        EncounterAdapter.prototype.populateNode = /**
         * @param {?} rootNode
         * @param {?} payload
         * @return {?}
         */
            function (rootNode, payload) {
                if (payload === undefined || payload === null) {
                    throw new Error('Expected payload');
                }
                /** @type {?} */
                var nodes = this.getEncounterNodes(rootNode);
                nodes.forEach(function (node) {
                    switch (node.question.extras.type) {
                        case 'encounterDatetime':
                            if (payload['encounterDatetime']) {
                                // console.log('date', payload['encounterDatetime']);
                                node.control.setValue(moment$6(payload['encounterDatetime']).toDate());
                                node.initialValue = moment$6(payload['encounterDatetime']).toDate();
                            }
                            break;
                        case 'encounterProvider':
                            if (Array.isArray(payload['encounterProviders']) && payload['encounterProviders'].length > 0) {
                                /** @type {?} */
                                var firstProvider = payload['encounterProviders'][0].provider;
                                if (firstProvider && firstProvider.uuid) {
                                    node.control.setValue(firstProvider.uuid);
                                    node.initialValue = firstProvider.uuid;
                                }
                            }
                            break;
                        case 'encounterLocation':
                            if (payload['location'] && payload['location'].uuid) {
                                node.control.setValue(payload['location'].uuid);
                                node.initialValue = payload['location'].uuid;
                            }
                            break;
                        default:
                            break;
                    }
                });
            };
        /**
         * @param {?} form
         * @return {?}
         */
        EncounterAdapter.prototype.generateFormPayload = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                /** @type {?} */
                var payload = this.generateNodePayload(form.rootNode);
                this.setNonFilledPayloadMembers(form, payload);
                payload['obs'] = this.obsAdapter.generateFormPayload(form) || [];
                payload['orders'] = this.ordersAdapter.generateFormPayload(form) || [];
                return payload;
            };
        /**
         * @param {?} rootNode
         * @return {?}
         */
        EncounterAdapter.prototype.generateNodePayload = /**
         * @param {?} rootNode
         * @return {?}
         */
            function (rootNode) {
                /** @type {?} */
                var nodes = this.getEncounterNodes(rootNode);
                /** @type {?} */
                var payload = {};
                nodes.forEach(function (node) {
                    if (node.control.value !== null &&
                        node.control.value !== undefined &&
                        node.control.value !== '') {
                        switch (node.question.extras.type) {
                            case 'encounterDatetime':
                                /** @type {?} */
                                var dateValue = moment$6(node.control.value)
                                    .utcOffset(rootNode.form.valueProcessingInfo.utcOffset || '+0300');
                                payload['encounterDatetime'] = dateValue.format('YYYY-MM-DD HH:mm:ss');
                                break;
                            case 'encounterProvider':
                                if (node.control.value && node.control.value !== '') {
                                    /** @type {?} */
                                    var providers = [];
                                    providers.push({
                                        provider: node.control.value,
                                        encounterRole: 'a0b03050-c99b-11e0-9572-0800200c9a66' // unknown provider role in the encounter as default
                                    });
                                    payload['encounterProviders'] = providers;
                                }
                                break;
                            case 'encounterLocation':
                                payload['location'] = node.control.value;
                                break;
                            default:
                                break;
                        }
                    }
                });
                return payload;
            };
        /**
         * @param {?} rootNode
         * @return {?}
         */
        EncounterAdapter.prototype.getEncounterNodes = /**
         * @param {?} rootNode
         * @return {?}
         */
            function (rootNode) {
                /** @type {?} */
                var results = [];
                this._getEncounterNodes(rootNode, results);
                return results;
            };
        /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
        EncounterAdapter.prototype.setNonFilledPayloadMembers = /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
            function (form, payload) {
                if (form.valueProcessingInfo.patientUuid) {
                    this.setPayloadPatientUuid(payload, form.valueProcessingInfo.patientUuid);
                }
                if (form.valueProcessingInfo.visitUuid) {
                    this.setPayloadVisitUuid(payload, form.valueProcessingInfo.visitUuid);
                }
                if (form.valueProcessingInfo.encounterTypeUuid) {
                    this.setPayloadEncounterTypeUuid(payload, form.valueProcessingInfo.encounterTypeUuid);
                }
                if (form.valueProcessingInfo.formUuid) {
                    this.setPayloadFormUuid(payload, form.valueProcessingInfo.formUuid);
                }
                if (form.valueProcessingInfo.encounterUuid) {
                    this.setPayloadEncounterUuid(payload, form.valueProcessingInfo.encounterUuid);
                }
            };
        /**
         * @param {?} payload
         * @param {?} patientUuid
         * @return {?}
         */
        EncounterAdapter.prototype.setPayloadPatientUuid = /**
         * @param {?} payload
         * @param {?} patientUuid
         * @return {?}
         */
            function (payload, patientUuid) {
                payload['patient'] = patientUuid;
            };
        /**
         * @param {?} payload
         * @param {?} visitUuid
         * @return {?}
         */
        EncounterAdapter.prototype.setPayloadVisitUuid = /**
         * @param {?} payload
         * @param {?} visitUuid
         * @return {?}
         */
            function (payload, visitUuid) {
                payload['visit'] = visitUuid;
            };
        /**
         * @param {?} payload
         * @param {?} encounterTypeUuid
         * @return {?}
         */
        EncounterAdapter.prototype.setPayloadEncounterTypeUuid = /**
         * @param {?} payload
         * @param {?} encounterTypeUuid
         * @return {?}
         */
            function (payload, encounterTypeUuid) {
                payload['encounterType'] = encounterTypeUuid;
            };
        /**
         * @param {?} payload
         * @param {?} formUuid
         * @return {?}
         */
        EncounterAdapter.prototype.setPayloadFormUuid = /**
         * @param {?} payload
         * @param {?} formUuid
         * @return {?}
         */
            function (payload, formUuid) {
                payload['form'] = formUuid;
            };
        /**
         * @param {?} payload
         * @param {?} encounterUuid
         * @return {?}
         */
        EncounterAdapter.prototype.setPayloadEncounterUuid = /**
         * @param {?} payload
         * @param {?} encounterUuid
         * @return {?}
         */
            function (payload, encounterUuid) {
                payload['uuid'] = encounterUuid;
            };
        /**
         * @private
         * @param {?} rootNode
         * @param {?} array
         * @return {?}
         */
        EncounterAdapter.prototype._getEncounterNodes = /**
         * @private
         * @param {?} rootNode
         * @param {?} array
         * @return {?}
         */
            function (rootNode, array) {
                var _this = this;
                if (this._isEncounterNode(rootNode)) {
                    array.push(rootNode);
                }
                if (rootNode instanceof GroupNode) {
                    /** @type {?} */
                    var node = ((rootNode));
                    // tslint:disable-next-line:forin
                    for (var o in node.children) {
                        if (node.children[o] instanceof NodeBase) {
                            this._getEncounterNodes(node.children[o], array);
                        }
                    }
                }
                if (rootNode instanceof ArrayNode) {
                    /** @type {?} */
                    var node = ((rootNode));
                    node.children.forEach(function (child) {
                        _this._getEncounterNodes(child, array);
                    });
                }
            };
        /**
         * @private
         * @param {?} node
         * @return {?}
         */
        EncounterAdapter.prototype._isEncounterNode = /**
         * @private
         * @param {?} node
         * @return {?}
         */
            function (node) {
                if (node.question.extras &&
                    (node.question.extras.type === 'encounterDatetime' ||
                        node.question.extras.type === 'encounterProvider' ||
                        node.question.extras.type === 'encounterLocation')) {
                    return true;
                }
                return false;
            };
        EncounterAdapter.decorators = [
            { type: core.Injectable },
        ];
        EncounterAdapter.ctorParameters = function () {
            return [
                { type: OrderValueAdapter },
                { type: ObsValueAdapter }
            ];
        };
        return EncounterAdapter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PersonAttribuAdapter = (function () {
        function PersonAttribuAdapter() {
        }
        /**
         * @param {?} form
         * @return {?}
         */
        PersonAttribuAdapter.prototype.generateFormPayload = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                return this.generateNodePayload(form.rootNode);
            };
        /**
         * @param {?} rootNode
         * @return {?}
         */
        PersonAttribuAdapter.prototype.generateNodePayload = /**
         * @param {?} rootNode
         * @return {?}
         */
            function (rootNode) {
                /** @type {?} */
                var nodes = this.getPersonAttributeNodes(rootNode);
                /** @type {?} */
                var payload = [];
                nodes.forEach(function (node) {
                    if (node.control.value !== null &&
                        node.control.value !== undefined &&
                        node.control.value !== '' &&
                        node.initialValue !== node.control.value) {
                        if (node.question.extras.questionOptions.isSimpleValue === true) {
                            payload.push({
                                attributeType: node.question.extras.questionOptions.attributeType,
                                value: node.control.value
                            });
                        }
                        else {
                            payload.push({
                                attributeType: node.question.extras.questionOptions.attributeType,
                                hydratedObject: node.control.value
                            });
                        }
                    }
                });
                return payload;
            };
        /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
        PersonAttribuAdapter.prototype.populateForm = /**
         * @param {?} form
         * @param {?} payload
         * @return {?}
         */
            function (form, payload) {
                this.populateNode(form.rootNode, payload);
            };
        /**
         * @param {?} rootNode
         * @param {?} payload
         * @return {?}
         */
        PersonAttribuAdapter.prototype.populateNode = /**
         * @param {?} rootNode
         * @param {?} payload
         * @return {?}
         */
            function (rootNode, payload) {
                if (!Array.isArray(payload)) {
                    throw new Error('Expected an array of attributes');
                }
                /** @type {?} */
                var nodes = this.getPersonAttributeNodes(rootNode);
                nodes.forEach(function (node) {
                    payload.forEach(function (element) {
                        if (element.attributeType.uuid
                            === node.question.extras.questionOptions.attributeType) {
                            if (element.value.uuid) {
                                node.control.setValue(element.value.uuid);
                                node.initialValue = element.value.uuid;
                            }
                            else {
                                node.control.setValue(element.value);
                                node.initialValue = element.value;
                            }
                        }
                    });
                });
            };
        /**
         * @param {?} rootNode
         * @return {?}
         */
        PersonAttribuAdapter.prototype.getPersonAttributeNodes = /**
         * @param {?} rootNode
         * @return {?}
         */
            function (rootNode) {
                /** @type {?} */
                var results = [];
                this._getPersonAttributesNodes(rootNode, results);
                return results;
            };
        /**
         * @private
         * @param {?} rootNode
         * @param {?} array
         * @return {?}
         */
        PersonAttribuAdapter.prototype._getPersonAttributesNodes = /**
         * @private
         * @param {?} rootNode
         * @param {?} array
         * @return {?}
         */
            function (rootNode, array) {
                var _this = this;
                if (rootNode.question.extras &&
                    rootNode.question.extras.type === 'personAttribute') {
                    array.push(rootNode);
                }
                if (rootNode instanceof GroupNode) {
                    /** @type {?} */
                    var node = ((rootNode));
                    // tslint:disable-next-line:forin
                    for (var o in node.children) {
                        if (node.children[o] instanceof NodeBase) {
                            this._getPersonAttributesNodes(node.children[o], array);
                        }
                    }
                }
                if (rootNode instanceof ArrayNode) {
                    /** @type {?} */
                    var node = ((rootNode));
                    node.children.forEach(function (child) {
                        _this._getPersonAttributesNodes(child, array);
                    });
                }
            };
        PersonAttribuAdapter.decorators = [
            { type: core.Injectable },
        ];
        PersonAttribuAdapter.ctorParameters = function () { return []; };
        return PersonAttribuAdapter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RemoteSelectComponent = (function () {
        function RemoteSelectComponent(renderer) {
            this.renderer = renderer;
            // @Input() dataSource: DataSource;
            this.placeholder = 'Search...';
            this.items = [];
            this.value = [];
            this.loading = false;
            this.searchText = '';
            this.notFoundMsg = 'match no found';
            this.done = new core.EventEmitter();
            this.characters = [];
            // the method set in registerOnChange, it is just
            // a placeholder for a method that takes one parameter,
            // we use it to emit changes back to the form
            this.propagateChange = function (change) { };
        }
        Object.defineProperty(RemoteSelectComponent.prototype, "dataSource", {
            get: /**
             * @return {?}
             */ function () {
                return this._dataSource;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._dataSource = v;
                if (this._dataSource && this._dataSource.dataFromSourceChanged) {
                    this.subscribeToDataSourceDataChanges();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        RemoteSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        RemoteSelectComponent.prototype.subscribeToDataSourceDataChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._dataSource.dataFromSourceChanged.subscribe(function (results) {
                    if (results.length > 0) {
                        _this.items = results;
                        _this.notFoundMsg = '';
                        // console.log('updating items', results, this.selectC.value);
                        _this.restoreSelectedValue(_this.selectC.value, results);
                    }
                    else {
                        _this.notFoundMsg = 'Not found';
                        _this.items = [];
                    }
                });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RemoteSelectComponent.prototype.typed = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.search(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RemoteSelectComponent.prototype.search = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                if (this.dataSource) {
                    this.searchText = value;
                    this.notFoundMsg = 'Loading.........';
                    this.dataSource.searchOptions(value)
                        .subscribe(function (result) {
                        if (result.length > 0) {
                            /** @type {?} */
                            var existing = _.map(_this.value, _.clone);
                            /** @type {?} */
                            var concat = existing.concat(result);
                            _this.items = _.uniqBy(concat, 'value');
                        }
                        _this.notFoundMsg = '';
                    }, function (error) {
                        _this.notFoundMsg = 'Errored';
                    });
                }
            };
        /**
         * @param {?} value
         * @param {?} results
         * @return {?}
         */
        RemoteSelectComponent.prototype.restoreSelectedValue = /**
         * @param {?} value
         * @param {?} results
         * @return {?}
         */
            function (value, results) {
                var _this = this;
                /** @type {?} */
                var found = false;
                _.each(results, function (item) {
                    if (item.value === value) {
                        setTimeout(function () {
                            _this.selectC.select(value);
                            _this.selectC.value = value;
                        });
                        found = true;
                    }
                });
                if (!found) {
                    // console.log('not found after loading items', value, results);
                    setTimeout(function () {
                        _this.selectC.select('');
                        _this.selectC.value = '';
                    });
                }
            };
        /**
         * @param {?} searchText
         * @return {?}
         */
        RemoteSelectComponent.prototype.canSearch = /**
         * @param {?} searchText
         * @return {?}
         */
            function (searchText) {
                return (searchText.length - this.searchText.length >= 2 ||
                    (searchText.length - this.searchText.length <= 2 && searchText !== '')) && this.loading === false;
            };
        // this is the initial value set to the component
        // this is the initial value set to the component
        /**
         * @param {?} value
         * @return {?}
         */
        RemoteSelectComponent.prototype.writeValue =
            // this is the initial value set to the component
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var _this = this;
                if (value && value !== '') {
                    if (this.dataSource) {
                        this.loading = true;
                        this.dataSource.resolveSelectedValue(value).subscribe(function (result) {
                            _this.items = [result];
                            setTimeout(function () {
                                _this.selectC.select(result.value);
                                _this.selectC.value = result.value;
                            });
                            _this.loading = false;
                        }, function (error) {
                            _this.loading = false;
                        });
                    }
                }
            };
        // registers 'fn' that will be fired when changes are made
        // this is how we emit the changes back to the form
        // registers 'fn' that will be fired when changes are made
        // this is how we emit the changes back to the form
        /**
         * @param {?} fn
         * @return {?}
         */
        RemoteSelectComponent.prototype.registerOnChange =
            // registers 'fn' that will be fired when changes are made
            // this is how we emit the changes back to the form
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.propagateChange = fn;
            };
        // not used, used for touch input
        // not used, used for touch input
        /**
         * @return {?}
         */
        RemoteSelectComponent.prototype.registerOnTouched =
            // not used, used for touch input
            /**
             * @return {?}
             */
            function () { };
        // change events from the textarea
        // change events from the textarea
        /**
         * @param {?} event
         * @return {?}
         */
        RemoteSelectComponent.prototype.onChange =
            // change events from the textarea
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.propagateChange(event.id);
                // .....
                // update the form
                // this.propagateChange(this.data);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        RemoteSelectComponent.prototype.removed = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                console.log('Removed');
                this.propagateChange('');
            };
        /**
         * @param {?} event
         * @return {?}
         */
        RemoteSelectComponent.prototype.selected = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.propagateChange(event.value);
            };
        RemoteSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'remote-select',
                        template: "<div>\n    <ng-select [id]=\"componentID\" [noFilter]=\"0\" (selected)=\"selected($event)\" (deselected)=\"removed($event)\" [options]=\"items\" [allowClear]=\"true\"\n        [placeholder]=\"placeholder\" [notFoundMsg]=\"notFoundMsg\" (typed)=\"typed($event)\" tabindex=\"0\">\n    </ng-select>\n    <div *ngIf=\"loading\">\n        resolving....\n    </div>\n</div>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return RemoteSelectComponent; }),
                                multi: true,
                            }
                        ]
                    },] },
        ];
        RemoteSelectComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 }
            ];
        };
        RemoteSelectComponent.propDecorators = {
            placeholder: [{ type: core.Input }],
            componentID: [{ type: core.Input }],
            done: [{ type: core.Output }],
            selectC: [{ type: core.ViewChild, args: [SelectComponent,] }],
            dataSource: [{ type: core.Input }]
        };
        return RemoteSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RemoteSelectModule = (function () {
        function RemoteSelectModule() {
        }
        RemoteSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, SelectModule, forms.FormsModule],
                        exports: [RemoteSelectComponent],
                        declarations: [RemoteSelectComponent],
                        providers: [],
                    },] },
        ];
        return RemoteSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$7 = moment_;
    var AppointmentsOverviewComponent = (function () {
        function AppointmentsOverviewComponent() {
            this.showAppointments = false;
            this.loadingAppointments = false;
            this.errorLoadingAppointments = false;
            this.appointmentsLoaded = false;
            this.appointments = [];
            this.today = '';
        }
        /**
         * @return {?}
         */
        AppointmentsOverviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        AppointmentsOverviewComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.node.control.valueChanges.subscribe(function (v) {
                    _this.resetProperties();
                    /** @type {?} */
                    var node = _this.node;
                    if (node.question.extras.questionOptions.concept
                        && (node.question.extras.questionOptions.concept === 'a8a666ba-1350-11df-a1f1-0026b9348838'
                            || node.question.extras.questionOptions.concept === 'a89d2398-1350-11df-a1f1-0026b9348838')) {
                        // console.log('what change is here', this.showAppointments);
                        if (!_this.showAppointments) {
                            _this.loadingAppointments = true;
                            _this.showAppointments = true;
                            /** @type {?} */
                            var dataSource = void 0;
                            if (node.form && node.form.dataSourcesContainer.dataSources) {
                                dataSource = node.form.dataSourcesContainer.dataSources.monthlyScheduleResourceService;
                            }
                            /** @type {?} */
                            var locationUuid = node.form.dataSourcesContainer.dataSources.userLocation.uuid;
                            if (dataSource && locationUuid) {
                                /** @type {?} */
                                var startDate = moment$7(v).startOf('week').add(1, 'day').format('YYYY-MM-DD');
                                /** @type {?} */
                                var endDate = moment$7(v).endOf('week').subtract(1, 'day').format('YYYY-MM-DD');
                                _this.today = moment$7(v).format('DD-MM-YYYY');
                                // create 5 week days
                                /** @type {?} */
                                var _data_1 = [];
                                /** @type {?} */
                                var programTypes = ['781d85b0-1359-11df-a1f1-0026b9348838', '781d897a-1359-11df-a1f1-0026b9348838',
                                    '96047aaf-7ab3-45e9-be6a-b61810fe617d', 'c19aec66-1a40-4588-9b03-b6be55a8dd1d', 'f7793d42-11ac-4cfd-9b35-e0a21a7a7c31',
                                    '334c9e98-173f-4454-a8ce-f80b20b7fdf0', '96ba279b-b23b-4e78-aba9-dcbd46a96b7b', '781d8880-1359-11df-a1f1-0026b9348838'];
                                /** @type {?} */
                                var programTypeParams = programTypes.join();
                                for (var i = 1; i <= 5; i++) {
                                    _data_1.push({
                                        date: moment$7(v).startOf('week').add(i, 'day').format('DD-MM-YYYY'),
                                        count: 0
                                    });
                                }
                                dataSource.getMonthlySchedule({
                                    startDate: startDate,
                                    endDate: endDate,
                                    limit: 5,
                                    locationUuids: locationUuid,
                                    programType: programTypeParams
                                }).subscribe(function (data) {
                                    _this.appointmentsLoaded = true;
                                    _this.loadingAppointments = false;
                                    _data_1.map(function (appointment, index) {
                                        appointment.count = data[index] !== undefined ? data[index].count.scheduled : 0;
                                    });
                                    _this.appointments = _data_1;
                                }, function (error) {
                                    _this.loadingAppointments = false;
                                    _this.errorLoadingAppointments = true;
                                    _this.showAppointments = false;
                                    console.error(error);
                                });
                            }
                            else {
                                _this.showAppointments = false;
                                _this.errorLoadingAppointments = true;
                            }
                        }
                    }
                });
            };
        /**
         * @return {?}
         */
        AppointmentsOverviewComponent.prototype.resetProperties = /**
         * @return {?}
         */
            function () {
                this.loadingAppointments = false;
                this.appointmentsLoaded = false;
                this.errorLoadingAppointments = false;
                this.showAppointments = false;
                this.appointments = [];
                this.today = '';
            };
        AppointmentsOverviewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'appointments-overview',
                        template: "<div *ngIf=\"showAppointments\" class=\"appointments\">\n  <p *ngIf=\"loadingAppointments\">\n    <span *ngIf=\"!appointmentsLoaded && errorLoadingAppointments\">Error checking appointments</span>\n    <span *ngIf=\"loadingAppointments\"><span\n      class=\"fa fa-spinner fa-spin\"></span>Checking appointments...</span>\n  </p>\n  <div *ngIf=\"appointmentsLoaded && !errorLoadingAppointments\">\n    <table *ngIf=\"appointments.length>0\" class=\"table table-stripped table-bordered\">\n      <thead>\n      <tr>\n        <th *ngFor=\"let appointment of appointments\" [ngClass]=\"{'active': appointment.date === today}\">\n          <span>{{appointment.date}}</span>\n        </th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n        <td *ngFor=\"let appointment of appointments\"\n            [ngClass]=\"{'active': appointment.date === today}\">\n          <span><strong><em>{{appointment.count}}</em></strong></span>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n",
                        styles: [".appointments{margin-top:12px;font-size:12px;color:#999}.appointments p{padding-top:12px}.appointments th{border-bottom:0!important;color:#333}.appointments td span,.appointments th span{display:block}.appointments td.active,.appointments th.active{background-color:#3c8dbc;color:#fff!important;padding:0}.appointments td.active span,.appointments th.active span{padding:4px}.appointments span.fa{display:inline-block;margin-right:7px}"]
                    },] },
        ];
        AppointmentsOverviewComponent.ctorParameters = function () { return []; };
        AppointmentsOverviewComponent.propDecorators = {
            node: [{ type: core.Input }]
        };
        return AppointmentsOverviewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EncounterViewerService = (function () {
        function EncounterViewerService() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        EncounterViewerService.prototype.resolveSelectedValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return;
            };
        /**
         * @param {?} searchText
         * @return {?}
         */
        EncounterViewerService.prototype.searchOptions = /**
         * @param {?} searchText
         * @return {?}
         */
            function (searchText) {
                return;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        EncounterViewerService.prototype.fileUpload = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                return;
            };
        /**
         * @param {?} url
         * @return {?}
         */
        EncounterViewerService.prototype.fetchFile = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                return;
            };
        /**
         * @param {?} answerUuid
         * @param {?} schema
         * @return {?}
         */
        EncounterViewerService.prototype.resolveSelectedValueFromSchema = /**
         * @param {?} answerUuid
         * @param {?} schema
         * @return {?}
         */
            function (answerUuid, schema) {
                var _this = this;
                /** @type {?} */
                var label;
                if (schema.pages) {
                    _.forEach(schema.pages, function (page) {
                        /** @type {?} */
                        var l = _this.resolveSelectedValueFromSchema(answerUuid, page);
                        if (l) {
                            label = l;
                        }
                    });
                }
                if (schema.sections) {
                    _.forEach(schema.sections, function (section) {
                        /** @type {?} */
                        var l = _this.resolveSelectedValueFromSchema(answerUuid, section);
                        if (l) {
                            label = l;
                        }
                    });
                }
                if (schema.questions) {
                    _.forEach(schema.questions, function (question) {
                        if (question.questions) {
                            /** @type {?} */
                            var l = _this.resolveSelectedValueFromSchema(answerUuid, question);
                            if (l) {
                                label = l;
                            }
                        }
                        else {
                            if (question.questionOptions.answers) {
                                _.forEach(question.questionOptions.answers, function (answer) {
                                    if (answer.concept === answerUuid) {
                                        label = answer.label;
                                    }
                                });
                            }
                            else if (question.questionOptions.selectableOrders) {
                                _.forEach(question.questionOptions.selectableOrders, function (order) {
                                    if (order.concept === answerUuid) {
                                        label = order.label;
                                    }
                                });
                            }
                        }
                    });
                }
                return label;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        EncounterViewerService.prototype.hasAnswer = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var answered = false;
                if (node.initialValue) {
                    answered = true;
                }
                return answered;
            };
        /**
         * @param {?} node
         * @param {?=} answered
         * @return {?}
         */
        EncounterViewerService.prototype.questionsAnswered = /**
         * @param {?} node
         * @param {?=} answered
         * @return {?}
         */
            function (node, answered) {
                var _this = this;
                /** @type {?} */
                var $answered = answered || [];
                if (node.question.renderingType === 'page') {
                    _.forEach(node.children, function (childNode) {
                        _this.questionsAnswered(childNode, $answered);
                    });
                }
                else if (node.question.renderingType === 'section') {
                    _.forEach(node.children, function (childNode) {
                        if (childNode.question.renderingType === 'group') {
                            _.forEach(childNode.children, function (child) {
                                /** @type {?} */
                                var ans = _this.questionsAnswered(child, $answered);
                                if (ans) {
                                    $answered.push(ans);
                                }
                            });
                        }
                        else if (_this.hasAnswer(childNode)) {
                            $answered.push(true);
                        }
                    });
                }
                else {
                    return this.hasAnswer(node);
                }
                if ($answered.length > 0) {
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @param {?} val
         * @return {?}
         */
        EncounterViewerService.prototype.isDate = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                if (Date.parse(val)) {
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @param {?} unixTimestamp
         * @return {?}
         */
        EncounterViewerService.prototype.convertTime = /**
         * @param {?} unixTimestamp
         * @return {?}
         */
            function (unixTimestamp) {
                /** @type {?} */
                var a = new Date(unixTimestamp);
                /** @type {?} */
                var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May',
                    'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                /** @type {?} */
                var year = a.getFullYear();
                /** @type {?} */
                var month = months[a.getMonth()];
                /** @type {?} */
                var date = a.getDate();
                /** @type {?} */
                var hour = a.getHours();
                /** @type {?} */
                var min = a.getMinutes();
                /** @type {?} */
                var sec = a.getSeconds();
                /** @type {?} */
                var suffix = hour < 12 ? 'AM' : 'PM';
                /** @type {?} */
                var time;
                if (hour === 0 && min === 0) {
                    time = date + ' ' + month + ' ' + year;
                }
                else {
                    time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + suffix + ' (EAT)';
                }
                return time;
            };
        EncounterViewerService.decorators = [
            { type: core.Injectable },
        ];
        EncounterViewerService.ctorParameters = function () { return []; };
        return EncounterViewerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EncounterViewerComponent = (function () {
        function EncounterViewerComponent(encounterViewerService, dataSources) {
            this.encounterViewerService = encounterViewerService;
            this.dataSources = dataSources;
        }
        Object.defineProperty(EncounterViewerComponent.prototype, "node", {
            set: /**
             * @param {?} rootNode
             * @return {?}
             */ function (rootNode) {
                this.rootNode = rootNode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EncounterViewerComponent.prototype, "schema", {
            set: /**
             * @param {?} schema
             * @return {?}
             */ function (schema) {
                this._schema = schema;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EncounterViewerComponent.prototype, "encounter", {
            set: /**
             * @param {?} enc
             * @return {?}
             */ function (enc) {
                this.enc = enc;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EncounterViewerComponent.prototype, "form", {
            set: /**
             * @param {?} form
             * @return {?}
             */ function (form) {
                this.rootNode = form.rootNode;
                this._schema = form.schema;
                console.log(this.rootNode);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        EncounterViewerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.rootNode && this.rootNode.question.extras
                    && this.rootNode.question.renderingType === 'file') {
                    this.fileDataSource =
                        this.dataSources.dataSources[this.rootNode.question.dataSource];
                }
                else if (this.rootNode && this.rootNode.question.extras
                    && this.rootNode.question.renderingType === 'remote-select') {
                    this.remoteDataSource =
                        this.dataSources.dataSources[this.rootNode.question.dataSource];
                }
                else {
                    this.customDataSource = this.encounterViewerService;
                }
            };
        /**
         * @param {?} node
         * @return {?}
         */
        EncounterViewerComponent.prototype.questionsAnswered = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var $answered = this.encounterViewerService.questionsAnswered(node);
                return $answered;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        EncounterViewerComponent.prototype.questionAnswered = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                /** @type {?} */
                var answered = this.encounterViewerService.hasAnswer(node);
                return answered;
            };
        /**
         * @param {?} questionLabel
         * @return {?}
         */
        EncounterViewerComponent.prototype.checkForColon = /**
         * @param {?} questionLabel
         * @return {?}
         */
            function (questionLabel) {
                if (questionLabel.indexOf(':') === -1) {
                    return true;
                }
                else {
                    return false;
                }
            };
        EncounterViewerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'encounter-viewer',
                        template: "<div class=\"viewer\">\n\n\n  <div *ngIf=\"rootNode.question.renderingType === 'form'\" class=\"form\">\n    <div *ngFor=\"let question of rootNode.question.questions; let i = index;\">\n      <div *ngIf=\"questionsAnswered(rootNode.children[question.key])\">\n        <div [attr.id]=\"'page'+i\" class=\"panel panel-default\">\n          <p class=\"page-label panel-heading text-primary\">{{question.label}}</p>\n          <div class=\"panel-body\">\n            <encounter-viewer [node]=\"rootNode.children[question.key]\" [schema]=\"_schema\" [parentComponent]=\"this\" [parentGroup]=\"rootNode.control\"></encounter-viewer>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"rootNode.question.renderingType === 'page'\" class=\"page\">\n    <encounter-viewer *ngFor=\"let question of rootNode.question.questions\" [parentComponent]=\"this\" [node]=\"rootNode.children[question.key]\"\n      [schema]=\"_schema\" [parentGroup]=\"parentGroup\"></encounter-viewer>\n  </div>\n\n\n  <div *ngIf=\"rootNode.question.renderingType === 'section'&& questionsAnswered(rootNode)\"\n    class=\"section\">\n    <div class=\"panel panel-primary\">\n      <p class=\"panel-heading section-label\">{{ rootNode.question.label }}</p>\n    </div>\n    <div *ngFor=\"let question of rootNode.question.questions\">\n      <encounter-viewer [node]=\"rootNode.children[question.key]\" [parentComponent]=\"this\" [schema]=\"_schema\" [parentGroup]=\"parentGroup\"></encounter-viewer>\n    </div>\n  </div>\n\n  <!--Leaf Controls-->\n  <div style=\"margin-left:10px;\">\n  <form *ngIf=\"rootNode.question.controlType === 0\" [formGroup]=\"parentGroup\">\n    <div *ngIf=\"rootNode.control.value\">\n    <div class=\"question-answer\">\n      <label *ngIf=\"rootNode.question.label\" [attr.for]=\"rootNode.question.key\" style=\"font-weight:400;\">\n          {{ rootNode.question.label }}\n      </label>\n      <span *ngIf=\"checkForColon(rootNode.question.label)\">:</span>\n      <div [ngSwitch]=\"rootNode.question.renderingType\" style=\"display:inline-block; font-weight:bold;\">\n          <div *ngSwitchCase=\" 'file' \">\n            <file-preview [formControlName]=\"rootNode.question.key\" [id]=\"rootNode.question.key + 'id'\" [dataSource]=\"fileDataSource\"></file-preview>\n          </div>\n          <div *ngSwitchCase=\"'remote-select'\">\n            <remote-answer [formControlName]=\"rootNode.question.key\" [id]=\"rootNode.question.key + 'id'\" [dataSource]=\"remoteDataSource\"></remote-answer>\n          </div>\n          <div *ngSwitchDefault style=\"display:inline-block\">\n              <question-control [schema]=\"_schema\" [value]=\"rootNode.control.value\" [dataSource]=\"customDataSource\"></question-control>\n            </div>\n      </div>\n     \n    </div>\n    </div>\n  </form>\n</div>\n\n  <!--Array Controls-->\n  <div *ngIf=\"rootNode.question.controlType === 1 && questionsAnswered(rootNode)\">\n    <div [ngSwitch]=\"rootNode.question.renderingType\">\n      <div *ngSwitchCase=\" 'repeating' \">\n        <div [ngSwitch]=\"rootNode.question.extras.type\">\n          <div *ngSwitchCase=\"'testOrder'\">\n            <label>{{rootNode.question.label}}:</label>\n            <div *ngFor=\"let child of rootNode.children; let i=index \">\n              <encounter-viewer *ngFor=\"let question of child.question.questions \" [parentComponent]=\"this\" [node]=\"child.children[question.key]\n                \" [parentGroup]=\"child.control \" [schema]=\"_schema\"></encounter-viewer>\n            </div>\n          </div>\n          \n          <div *ngSwitchCase=\"'obsGroup'\">\n            <div *ngFor=\"let child of rootNode.children; let i=index \">\n              <encounter-viewer *ngFor=\"let question of child.question.questions \" [parentComponent]=\"this\" [node]=\"child.children[question.key]\n                \" [parentGroup]=\"child.control \" [schema]=\"_schema\"></encounter-viewer>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"rootNode.question.controlType === 2\">\n\n    <!--GROUP-->\n    <div [ngSwitch]=\"rootNode.question.renderingType \">\n      <div *ngSwitchCase=\" 'group' \">\n        <encounter-viewer *ngFor=\"let question of rootNode.question.questions \" [parentComponent]=\"this\" [node]=\"rootNode.children[question.key]\n                  \" [parentGroup]=\"rootNode.control \" [schema]=\"_schema\"></encounter-viewer>\n      </div>\n      <div *ngSwitchCase=\" 'field-set' \">\n        <encounter-viewer *ngFor=\"let question of rootNode.question.questions \" [parentComponent]=\"this\" [node]=\"rootNode.children[question.key]\n                  \" [parentGroup]=\"rootNode.control \" [schema]=\"_schema\"></encounter-viewer>\n      </div>\n    </div>\n  </div>\n\n\n\n  </div>\n",
                        styles: [".page-label{font-size:20px;font-weight:700}.section-label{font-size:18px;font-weight:500}.panel-primary{border:none!important}.question-answer{font-size:16px}.panel{margin-bottom:5px}div.section{margin-bottom:15px!important}.line-breaker{white-space:pre-line}hr{margin:10px}"],
                    },] },
        ];
        EncounterViewerComponent.ctorParameters = function () {
            return [
                { type: EncounterViewerService },
                { type: DataSources }
            ];
        };
        EncounterViewerComponent.propDecorators = {
            parentGroup: [{ type: core.Input }],
            parentComponent: [{ type: core.Input }],
            node: [{ type: core.Input }],
            schema: [{ type: core.Input }],
            encounter: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return EncounterViewerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EncounterContainerComponent = (function () {
        function EncounterContainerComponent(encAdapter) {
            this.encAdapter = encAdapter;
        }
        Object.defineProperty(EncounterContainerComponent.prototype, "form", {
            set: /**
             * @param {?} form
             * @return {?}
             */ function (form) {
                this.$form = form;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EncounterContainerComponent.prototype, "encounter", {
            set: /**
             * @param {?} enc
             * @return {?}
             */ function (enc) {
                this.$enc = enc;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        EncounterContainerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        EncounterContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'encounter-renderer',
                        template: "<encounter-viewer class=\"card\" [form]=\"$form\" [encounter]=\"$enc\"></encounter-viewer>\n\n\n",
                        styles: [".card{box-shadow:0 2px 5px 0 rgba(0,0,0,.16),0 2px 10px 0 rgba(0,0,0,.12)}"]
                    },] },
        ];
        EncounterContainerComponent.ctorParameters = function () {
            return [
                { type: EncounterAdapter }
            ];
        };
        EncounterContainerComponent.propDecorators = {
            form: [{ type: core.Input }],
            encounter: [{ type: core.Input }]
        };
        return EncounterContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QuestionControlComponent = (function () {
        function QuestionControlComponent() {
            // The internal data model
            this.innerValue = '';
        }
        Object.defineProperty(QuestionControlComponent.prototype, "schema", {
            set: /**
             * @param {?} schema
             * @return {?}
             */ function (schema) {
                this._schema = schema;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QuestionControlComponent.prototype, "value", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QuestionControlComponent.prototype, "dataSource", {
            set: /**
             * @param {?} dataSource
             * @return {?}
             */ function (dataSource) {
                this._dataSource = dataSource;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        QuestionControlComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.writeValue(this._value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        QuestionControlComponent.prototype.isUuid = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value.length === 36 && value.indexOf(' ') === -1 && value.indexOf('.') === -1) {
                    return true;
                }
                else {
                    return false;
                }
            };
        // Current time string.
        // Current time string.
        /**
         * @param {?} v
         * @param {?=} arrayElement
         * @return {?}
         */
        QuestionControlComponent.prototype.writeValue =
            // Current time string.
            /**
             * @param {?} v
             * @param {?=} arrayElement
             * @return {?}
             */
            function (v, arrayElement) {
                var _this = this;
                if (v !== this.innerValue) {
                    if (this.isUuid(v)) {
                        if (!arrayElement) {
                            /** @type {?} */
                            var val = this._dataSource.resolveSelectedValueFromSchema(v, this._schema);
                            if (val) {
                                this.innerValue = val.toUpperCase();
                            }
                            else {
                                this.innerValue = v;
                            }
                        }
                        else {
                            return this._dataSource.resolveSelectedValueFromSchema(v, this._schema);
                        }
                    }
                    else if (_.isArray(v)) {
                        /** @type {?} */
                        var arr_1 = [];
                        _.forEach(v, function (el) {
                            arr_1.push(_this.writeValue(el, true));
                        });
                        this.innerValue = arr_1;
                    }
                    else if (this.isDate(v)) {
                        if (!arrayElement) {
                            this.innerValue = this._dataSource.convertTime(v);
                        }
                        else {
                            return this._dataSource.convertTime(v);
                        }
                    }
                    else {
                        if (!arrayElement) {
                            this.innerValue = v;
                        }
                        else {
                            return v;
                        }
                    }
                }
            };
        /**
         * @param {?} str
         * @return {?}
         */
        QuestionControlComponent.prototype.isDate = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                return this._dataSource.isDate(str) && !_.isNumber(str);
            };
        QuestionControlComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'question-control',
                        styles: ["input{border:none;box-shadow:none;color:#000;background:#fff!important;padding-top:23px;display:block;position:relative}"],
                        template: "<div>\n    {{innerValue}}\n</div>",
                    },] },
        ];
        QuestionControlComponent.ctorParameters = function () { return []; };
        QuestionControlComponent.propDecorators = {
            schema: [{ type: core.Input }],
            value: [{ type: core.Input }],
            dataSource: [{ type: core.Input }]
        };
        return QuestionControlComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var noop = function () { };
    var FilePreviewComponent = (function () {
        function FilePreviewComponent(encounterService) {
            this.encounterService = encounterService;
            this.innerValue = null;
            // Placeholders for the callbacks which are later providesd
            // by the Control Value Accessor
            this.onTouchedCallback = noop;
            this.onChangeCallback = noop;
        }
        Object.defineProperty(FilePreviewComponent.prototype, "dataSource", {
            get: /**
             * @return {?}
             */ function () {
                return this._dataSource;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._dataSource = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePreviewComponent.prototype, "value", {
            // get accessor
            get: 
            // get accessor
            /**
             * @return {?}
             */
            function () {
                return this.innerValue;
            },
            // set accessor including call the onchange callback
            set: 
            // set accessor including call the onchange callback
            /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (v !== this.innerValue) {
                    this.innerValue = v;
                }
            },
            enumerable: true,
            configurable: true
        });
        // Current time string.
        // Current time string.
        /**
         * @param {?} v
         * @return {?}
         */
        FilePreviewComponent.prototype.writeValue =
            // Current time string.
            /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (v !== this.innerValue) {
                    this.innerValue = v;
                }
            };
        // From ControlValueAccessor interface
        // From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        FilePreviewComponent.prototype.registerOnChange =
            // From ControlValueAccessor interface
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.onChangeCallback = fn;
            };
        // From ControlValueAccessor interface
        // From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        FilePreviewComponent.prototype.registerOnTouched =
            // From ControlValueAccessor interface
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.onTouchedCallback = fn;
            };
        /**
         * @return {?}
         */
        FilePreviewComponent.prototype.onBlur = /**
         * @return {?}
         */
            function () {
                this.onTouchedCallback();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FilePreviewComponent.prototype.onChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // const files = event.srcElement.files;
                // const fileToLoad = files[0];
                // const fileReader = new FileReader();
                // fileReader.onload = (fileLoadedEvent) => {
                //   const data = fileReader.result;
                //   const fileType = data.substring('data:image/'.length, data.indexOf(';base64'));
                //   const payload = {
                //     data,
                //     extension: fileType
                //   };
                // };
                // fileReader.readAsDataURL(fileToLoad);
            };
        FilePreviewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'file-preview',
                        styles: [""],
                        template: "<div *ngIf=\"innerValue\">\n              <img class=\"img-responsive\"\n                [src]=\"innerValue | secure:this._dataSource.fetchFile\" alt=\"image\" />\n                </div>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return FilePreviewComponent; }),
                                multi: true
                            }
                        ]
                    },] },
        ];
        FilePreviewComponent.ctorParameters = function () {
            return [
                { type: EncounterViewerService }
            ];
        };
        FilePreviewComponent.propDecorators = {
            source: [{ type: core.Input }],
            dataSource: [{ type: core.Input }]
        };
        return FilePreviewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var noop$1 = function () { };
    var RemoteAnswerComponent = (function () {
        function RemoteAnswerComponent() {
            this.innerValue = null;
            // Placeholders for the callbacks which are later providesd
            // by the Control Value Accessor
            this.onTouchedCallback = noop$1;
            this.onChangeCallback = noop$1;
        }
        Object.defineProperty(RemoteAnswerComponent.prototype, "dataSource", {
            get: /**
             * @return {?}
             */ function () {
                return this._dataSource;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._dataSource = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RemoteAnswerComponent.prototype, "value", {
            // get accessor
            get: 
            // get accessor
            /**
             * @return {?}
             */
            function () {
                return this.innerValue;
            },
            // set accessor including call the onchange callback
            set: 
            // set accessor including call the onchange callback
            /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (v !== this.innerValue) {
                    this.innerValue = v;
                }
            },
            enumerable: true,
            configurable: true
        });
        // Current time string.
        // Current time string.
        /**
         * @param {?} v
         * @return {?}
         */
        RemoteAnswerComponent.prototype.writeValue =
            // Current time string.
            /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                var _this = this;
                if (v !== this.innerValue) {
                    if (this._dataSource) {
                        this._dataSource.resolveSelectedValue(v).subscribe(function (ans) {
                            _this.innerValue = ans.label;
                        });
                    }
                    else {
                        this.innerValue = v;
                    }
                }
            };
        // From ControlValueAccessor interface
        // From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        RemoteAnswerComponent.prototype.registerOnChange =
            // From ControlValueAccessor interface
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.onChangeCallback = fn;
            };
        // From ControlValueAccessor interface
        // From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        RemoteAnswerComponent.prototype.registerOnTouched =
            // From ControlValueAccessor interface
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.onTouchedCallback = fn;
            };
        /**
         * @return {?}
         */
        RemoteAnswerComponent.prototype.onBlur = /**
         * @return {?}
         */
            function () {
                this.onTouchedCallback();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        RemoteAnswerComponent.prototype.onChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
            };
        RemoteAnswerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'remote-answer',
                        styles: [],
                        template: "\n    <div *ngIf=\"innerValue\">\n      {{innerValue}}\n      </div>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return RemoteAnswerComponent; }),
                                multi: true
                            }
                        ]
                    },] },
        ];
        RemoteAnswerComponent.ctorParameters = function () { return []; };
        RemoteAnswerComponent.propDecorators = {
            source: [{ type: core.Input }],
            dataSource: [{ type: core.Input }]
        };
        return RemoteAnswerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EncounterViewerModule = (function () {
        function EncounterViewerModule() {
        }
        EncounterViewerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            EncounterViewerComponent,
                            EncounterContainerComponent,
                            QuestionControlComponent,
                            FilePreviewComponent,
                            RemoteAnswerComponent
                        ],
                        imports: [
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            common.CommonModule,
                            http.HttpModule,
                            SharedModule
                        ],
                        providers: [
                            EncounterViewerService,
                        ],
                        exports: [
                            EncounterContainerComponent,
                            http.HttpModule
                        ],
                    },] },
        ];
        return EncounterViewerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxControlComponent = (function () {
        function CheckboxControlComponent() {
            this._value = [];
            this.onChange = function (change) { };
            this.onTouched = function () { };
        }
        /**
         * @return {?}
         */
        CheckboxControlComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        CheckboxControlComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxControlComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxControlComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxControlComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        Object.defineProperty(CheckboxControlComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                if (this._value.length === 0) {
                    return '';
                }
                else {
                    return this._value || this._value[0];
                }
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                if (typeof v === 'undefined' || v === null || v === '') {
                    v = [];
                }
                else if (typeof v === 'string') {
                    v = [v];
                }
                else if (!Array.isArray(v)) {
                    throw new TypeError('Value must be a string or an array.');
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} option
         * @param {?} event
         * @return {?}
         */
        CheckboxControlComponent.prototype.selectOpt = /**
         * @param {?} option
         * @param {?} event
         * @return {?}
         */
            function (option, event) {
                var _this = this;
                if (event.target.checked) {
                    this._value.push(option.value);
                }
                else {
                    this.options.forEach(function (o) {
                        if (o.value === option.value) {
                            _this._value.splice(o, 1);
                        }
                    });
                }
                this.onChange(this.value);
            };
        CheckboxControlComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'checkbox',
                        template: "<div *ngFor=\"let option of options; let i = index;\">\n    <label class=\"form-control no-border\">\n        <input type=\"checkbox\" id=\"i + 'id'\" (change)=\"selectOpt(option, $event)\" value=\"option.value\">\n        {{ option.label }}\n    </label>\n</div>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return CheckboxControlComponent; }),
                                multi: true,
                            }
                        ],
                        styles: ["\n  .no-border {\n    border: 0;\n    box-shadow: none;\n  }"]
                    },] },
        ];
        CheckboxControlComponent.propDecorators = {
            options: [{ type: core.Input }]
        };
        return CheckboxControlComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxModule = (function () {
        function CheckboxModule() {
        }
        CheckboxModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CheckboxControlComponent
                        ],
                        exports: [
                            CheckboxControlComponent
                        ],
                        imports: [common.CommonModule, forms.FormsModule]
                    },] },
        ];
        return CheckboxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormEntryModule = (function () {
        function FormEntryModule() {
        }
        FormEntryModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule,
                            forms.ReactiveFormsModule,
                            collapse.CollapseModule,
                            SelectModule,
                            DateTimePickerModule,
                            RemoteSelectModule,
                            RemoteFileUploadModule,
                            EncounterViewerModule,
                            CheckboxModule,
                            material.MatIconModule,
                            material.MatTabsModule,
                            material.MatCardModule,
                            NgxDateTimePickerModule,
                            SharedModule
                        ],
                        declarations: [
                            FormRendererComponent,
                            AfeNgSelectComponent,
                            AppointmentsOverviewComponent,
                            HistoricalValueDirective,
                            ErrorRendererComponent
                        ],
                        providers: [
                            forms.FormBuilder,
                            FormControlService,
                            FormErrorsService,
                            ValidationFactory,
                            HidersDisablersFactory,
                            AlertsFactory,
                            ExpressionRunner,
                            JsExpressionHelper,
                            HistoricalFieldHelperService,
                            FormSchemaCompiler,
                            FormFactory,
                            QuestionFactory,
                            ValidationFactory,
                            ControlRelationsFactory,
                            ObsAdapterHelper,
                            ObsValueAdapter,
                            EncounterAdapter,
                            PersonAttribuAdapter,
                            OrderValueAdapter,
                            DebugModeService
                        ],
                        exports: [FormRendererComponent, AfeNgSelectComponent,
                            ErrorRendererComponent, DateTimePickerModule, EncounterViewerModule, NgxDateTimePickerModule]
                    },] },
        ];
        return FormEntryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Pair = (function () {
        function Pair(key, value) {
            this.key = key;
            this.value = value;
        }
        return Pair;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var RenderingType = {
        Form: 0,
        Page: 1,
        Section: 2,
        Select: 3,
        DropDown: 4,
    };
    RenderingType[RenderingType.Form] = 'Form';
    RenderingType[RenderingType.Page] = 'Page';
    RenderingType[RenderingType.Section] = 'Section';
    RenderingType[RenderingType.Select] = 'Select';
    RenderingType[RenderingType.DropDown] = 'DropDown';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormEntryModule = FormEntryModule;
    exports.AfeFormControl = AfeFormControl;
    exports.AfeFormGroup = AfeFormGroup;
    exports.AfeFormArray = AfeFormArray;
    exports.AfeControlType = AfeControlType;
    exports.ControlRelationsFactory = ControlRelationsFactory;
    exports.FormControlService = FormControlService;
    exports.FormFactory = FormFactory;
    exports.Form = Form;
    exports.QuestionFactory = QuestionFactory;
    exports.ValidationFactory = ValidationFactory;
    exports.FormSchemaCompiler = FormSchemaCompiler;
    exports.HistoricalEncounterDataService = HistoricalEncounterDataService;
    exports.FormErrorsService = FormErrorsService;
    exports.EncounterAdapter = EncounterAdapter;
    exports.PersonAttribuAdapter = PersonAttribuAdapter;
    exports.OrderValueAdapter = OrderValueAdapter;
    exports.ObsValueAdapter = ObsValueAdapter;
    exports.ObsAdapterHelper = ObsAdapterHelper;
    exports.DataSources = DataSources;
    exports.CheckBoxQuestion = CheckBoxQuestion;
    exports.ConditionalValidationModel = ConditionalValidationModel;
    exports.DateQuestion = DateQuestion;
    exports.DateValidationModel = DateValidationModel;
    exports.FileUploadQuestion = FileUploadQuestion;
    exports.QuestionGroup = QuestionGroup;
    exports.JsExpressionValidationModel = JsExpressionValidationModel;
    exports.MaxValidationModel = MaxValidationModel;
    exports.MinValidationModel = MinValidationModel;
    exports.MultiSelectQuestion = MultiSelectQuestion;
    exports.Pair = Pair;
    exports.QuestionBase = QuestionBase;
    exports.RenderingType = RenderingType;
    exports.RepeatingQuestion = RepeatingQuestion;
    exports.Option = Option$1;
    exports.SelectQuestion = SelectQuestion;
    exports.TestOrderQuestion = TestOrderQuestion;
    exports.TextAreaInputQuestion = TextAreaInputQuestion;
    exports.TextInputQuestion = TextInputQuestion;
    exports.UiSelectQuestion = UiSelectQuestion;
    exports.ValidationModel = ValidationModel;
    exports.NestedQuestion = NestedQuestion;
    exports.DateTimePickerModule = DateTimePickerModule;
    exports.NgxDateTimePickerModule = NgxDateTimePickerModule;
    exports.JsExpressionHelper = JsExpressionHelper;
    exports.ɵbe = AfeNgSelectComponent;
    exports.ɵbf = AppointmentsOverviewComponent;
    exports.ɵz = CheckboxControlComponent;
    exports.ɵy = CheckboxModule;
    exports.ɵg = DatePickerComponent;
    exports.ɵk = DateTimePickerComponent;
    exports.ɵi = ModalComponent;
    exports.ɵj = MomentPipe;
    exports.ɵh = TimePickerComponent;
    exports.ɵq = RemoteFileUploadComponent;
    exports.ɵn = RemoteFileUploadModule;
    exports.ɵp = SecurePipe;
    exports.ɵba = MY_FORMATS;
    exports.ɵbb = NgxDateTimePickerComponent;
    exports.ɵm = RemoteSelectComponent;
    exports.ɵl = RemoteSelectModule;
    exports.ɵe = SelectDropdownComponent;
    exports.ɵf = STYLE$1;
    exports.ɵb = SELECT_VALUE_ACCESSOR;
    exports.ɵc = SelectComponent;
    exports.ɵd = STYLE;
    exports.ɵa = SelectModule;
    exports.ɵw = FilePreviewComponent;
    exports.ɵv = QuestionControlComponent;
    exports.ɵx = RemoteAnswerComponent;
    exports.ɵu = EncounterContainerComponent;
    exports.ɵs = EncounterViewerComponent;
    exports.ɵr = EncounterViewerModule;
    exports.ɵt = EncounterViewerService;
    exports.ɵbg = HistoricalValueDirective;
    exports.ɵbi = ErrorRendererComponent;
    exports.ɵbk = ExpressionRunner;
    exports.ɵbj = HidersDisablersFactory;
    exports.ɵbm = AlertsFactory;
    exports.ɵbc = FormRendererComponent;
    exports.ɵbd = DEFAULT_STYLES;
    exports.ɵbh = HistoricalFieldHelperService;
    exports.ɵbl = DebugModeService;
    exports.ɵo = SharedModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,